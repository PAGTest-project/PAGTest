[{"file_path": "src/test/java/unit/spot/margin/TestIsolatedAccount.java", "testclass_name": "TestIsolatedAccount", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIsolatedAccount", "description": "Unit tests for isolated account functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "endTime", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedAccount", "primary_tested": ["Margin.isolatedAccount(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated account functionality of the Margin created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java", "testclass_name": "TestMarginAccountSummary", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMarginAccountSummary", "description": "Unit tests for the margin account summary functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMarginSummary", "primary_tested": ["SubAccount.marginAccountSummary(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin account summary functionality of the SubAccount class."}]}, {"file_path": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java", "testclass_name": "TestAllIsolatedSymbols", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAllIsolatedSymbols", "description": "Test suite for testing the retrieval of all isolated symbols using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAllIsolatedSymbols", "primary_tested": ["Margin.getAllIsolatedSymbols(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of all isolated symbols using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java", "testclass_name": "TestGetMarginOpenOrders", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetMarginOpenOrders", "description": "Unit test for getting margin open orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetMarginOpenOrders", "primary_tested": ["Margin.getOpenOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting margin open orders using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestOrderRateLimit.java", "testclass_name": "TestOrderRateLimit", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOrderRateLimit", "description": "Test suite for checking the order rate limit functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOrderRateLimit", "primary_tested": ["Margin.orderRateLimit(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the order rate limit functionality of the Margin class in the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java", "testclass_name": "TestSmallLiabilityAssets", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSmallLiabilityAssets", "description": "Unit tests for the small liability assets functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSmallLiabilityAssets", "primary_tested": ["Margin.smallLiabilityAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability assets functionality of the Margin class in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestLeverageBracket.java", "testclass_name": "TestLeverageBracket", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLeverageBracket", "description": "Unit tests for the leverage bracket functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLeverageBracket", "primary_tested": ["Margin.leverageBracket()"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockWebServer.setDispatcher(Dispatcher)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the leverage bracket functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestAccountStatus.java", "testclass_name": "TestAccountStatus", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAccountStatus", "description": "Unit tests for the account status functionality of the SubAccount service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountStatus", "primary_tested": ["SubAccount.accountStatus(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account status functionality of the SubAccount service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java", "testclass_name": "TestFuturesSummary", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesSummary", "description": "Unit tests for the futures account summary functionality of the SubAccount service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesSummary", "primary_tested": ["SubAccount.futuresAccountSummary(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account summary functionality of the SubAccount service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetOcoOrder.java", "testclass_name": "TestGetOcoOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOcoOrder", "description": "Unit test for getting an OCO order using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderListId", "type": "int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOcoOrder", "primary_tested": ["Margin.getOcoOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderListId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting an OCO order using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java", "testclass_name": "TestSpotAccountSummary", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSpotAccountSummary", "description": "Unit tests for the spot account summary functionality of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "page", "type": "int"}, {"name": "size", "type": "int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSpotAccountSummary", "primary_tested": ["SubAccount.spotAccountSummary(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "page", "type": "variable"}, {"name": "size", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the spot account summary functionality of the Binance connector client."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestSubAccountList.java", "testclass_name": "TestSubAccountList", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubAccountList", "description": "Unit tests for listing sub-accounts using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "page", "type": "final int"}, {"name": "limit", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubAccountList", "primary_tested": ["SubAccount.subAccountList(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "page", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of listing sub-accounts using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestTransferHistory.java", "testclass_name": "TestTransferHistory", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTransferHistory", "description": "Unit tests for the transfer history functionality of the SubAccount service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "final int"}, {"name": "endTime", "type": "final int"}, {"name": "type", "type": "final int"}, {"name": "limit", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTransferHist", "primary_tested": ["SubAccount.transferHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "type", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transfer history functionality of the SubAccount service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java", "testclass_name": "TestSpotTransferHistory", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSpotTransferHistory", "description": "Unit tests for the spot transfer history functionality of the SubAccount service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final int"}, {"name": "endTime", "type": "static final int"}, {"name": "page", "type": "static final int"}, {"name": "limit", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSpotTransferHistory", "primary_tested": ["SubAccount.spotTransferHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "page", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the spot transfer history functionality of the SubAccount service."}]}, {"file_path": "src/test/java/unit/websocketapi/TestSignedRequests.java", "testclass_name": "TestSignedRequests", "dependencies": ["package unit.websocketapi;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.WebSocketApiClient;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.WebSocketApiClientImpl;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.RsaSignatureGenerator;", "import unit.MockData;"], "name": "TestSignedRequests", "description": "Unit tests for signed requests in the WebSocketApiClient.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHmacSignatureGeneratorWithoutSecretKey", "primary_tested": ["HmacSignatureGenerator.HmacSignatureGenerator(String)"], "external_dependencies": {"modules": ["HmacSignatureGenerator", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the HmacSignatureGenerator constructor with invalid secret keys."}, {"name": "testRsaSignatureGeneratorWithoutPrivateKey", "primary_tested": ["RsaSignatureGenerator.RsaSignatureGenerator(String)"], "external_dependencies": {"modules": ["RsaSignatureGenerator", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the RsaSignatureGenerator constructor with invalid private keys."}, {"name": "testSignedRequestWithoutConnectingFirst", "primary_tested": ["WebSocketApiGeneral.ping(String)"], "associated_methods": ["WebSocketApiClientImpl.connect(WebSocketMessageCallback)"], "external_dependencies": {"modules": ["HmacSignatureGenerator", "WebSocketApiClientImpl", "BinanceConnectorException", "MockData"], "project_specific_resources": ["MockData.SECRET_KEY", "MockData.API_KEY", "MockData.WS_BASE_URL"]}, "category": "unit", "description": "Tests a signed request without first connecting the WebSocketApiClient."}, {"name": "testSignedRequestWithoutSignatureGenerator", "primary_tested": ["WebSocketApiAccount.accountStatus(String)"], "associated_methods": ["WebSocketApiClientImpl.connect(WebSocketMessageCallback)"], "external_dependencies": {"modules": ["WebSocketApiClientImpl", "BinanceConnectorException"]}, "category": "unit", "description": "Tests a signed request without providing a SignatureGenerator."}, {"name": "testSignedRequestWithoutApiKey", "primary_tested": ["WebSocketApiAccount.accountStatus(String)"], "associated_methods": ["WebSocketApiClientImpl.connect(WebSocketMessageCallback)"], "external_dependencies": {"modules": ["HmacSignatureGenerator", "WebSocketApiClientImpl", "BinanceConnectorException", "MockData"], "project_specific_resources": ["MockData.SECRET_KEY", "MockData.WS_BASE_URL"]}, "category": "unit", "description": "Tests a signed request without providing an API key."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java", "testclass_name": "TestFuturesPositionRiskV2", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesPositionRiskV2", "description": "Unit tests for the futures position risk functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futuresType", "type": "static final int"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesPositionRiskWithoutParameters", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futures position risk method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testFuturesPositionRisk", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futuresType", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java", "testclass_name": "TestUpdateIpRestriction", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestUpdateIpRestriction", "description": "Unit tests for updating IP restriction for sub-accounts using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testUpdateIpRestrictionWithoutParameters", "primary_tested": ["SubAccount.updateIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the update IP restriction functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testUpdateIpRestriction", "primary_tested": ["SubAccount.updateIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the update IP restriction functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestDepositAddress.java", "testclass_name": "TestDepositAddress", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDepositAddress", "description": "Unit tests for the deposit address functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositAddressWithoutParameters", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDepositAddress", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java", "testclass_name": "TestSubAccountToMaster", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubAccountToMaster", "description": "Unit tests for the sub-account to master transfer functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubToMasterWithoutParameters", "primary_tested": ["SubAccount.subAccountToMaster(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "Dispatcher", "MockWebServer"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to master transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSubToMaster", "primary_tested": ["SubAccount.subAccountToMaster(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "Dispatcher", "MockWebServer"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to master transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java", "testclass_name": "TestFuturesAccount", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesAccount", "description": "Unit tests for the futures account functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountWithoutParameters", "primary_tested": ["SubAccount.futuresAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesAccount", "primary_tested": ["SubAccount.futuresAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestEnableMargin.java", "testclass_name": "TestEnableMargin", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEnableMargin", "description": "Unit tests for enabling margin for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableMarginWithoutEmail", "primary_tested": ["SubAccount.enableMargin(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the enabling of margin for a sub-account without providing an email, expecting a BinanceConnectorException."}, {"name": "testEnableMargin", "primary_tested": ["SubAccount.enableMargin(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "MockData", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the enabling of margin for a sub-account with a provided email, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java", "testclass_name": "TestFuturesAccountSummaryV2", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesAccountSummaryV2", "description": "Unit tests for the futures account summary functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futuresType", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesSummaryWithoutType", "primary_tested": ["SubAccount.futuresAccountSummaryV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futures account summary functionality when the 'futuresType' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesSummary", "primary_tested": ["SubAccount.futuresAccountSummaryV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futuresType", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of the futures account summary with the 'futuresType' parameter provided."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java", "testclass_name": "TestFuturesPositionRisk", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesPositionRisk", "description": "Unit tests for the futures position risk functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesPositionRiskWithoutParameters", "primary_tested": ["SubAccount.futuresPositionRisk(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesPositionRisk", "primary_tested": ["SubAccount.futuresPositionRisk(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java", "testclass_name": "TestManagedSubDetails", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestManagedSubDetails", "description": "Unit tests for the managed sub-account details functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubDetailsWithoutParameters", "primary_tested": ["SubAccount.managedSubDetails(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account details functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubDetails", "primary_tested": ["SubAccount.managedSubDetails(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account details functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java", "testclass_name": "TestUniversalTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestUniversalTransfer", "description": "Unit tests for the universal transfer functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testUniversalTransferWithoutParameters", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the universal transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testUniversalTransfer", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the universal transfer functionality with specified parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java", "testclass_name": "TestEnableLeverageToken", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEnableLeverageToken", "description": "Unit tests for enabling leverage token functionality for sub-accounts using the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEnableTokenWithoutParameters", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of enabling leverage token without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testEnableToken", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of leverage token for a sub-account with the necessary parameters provided."}]}, {"file_path": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java", "testclass_name": "TestNextHourlyInterestRate", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestNextHourlyInterestRate", "description": "Tests for the next hourly interest rate functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetAFutureHourlyInterestRateWithoutParameters", "primary_tested": ["Margin.nextHourlyInterestRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the next hourly interest rate functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testGetAFutureHourlyInterestRate", "primary_tested": ["Margin.nextHourlyInterestRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the next hourly interest rate functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java", "testclass_name": "TestQueryUniversalTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestQueryUniversalTransfer", "description": "Unit tests for querying universal transfer functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final int"}, {"name": "endTime", "type": "static final int"}, {"name": "page", "type": "static final int"}, {"name": "limit", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUniversalTransfer", "primary_tested": ["SubAccount.queryUniversalTransfer(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "page", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the universal transfer query functionality of the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java", "testclass_name": "TestManagedSubWithdraw", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestManagedSubWithdraw", "description": "Unit tests for the managed sub-account withdrawal functionality using the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubWithdrawWithoutParameters", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubWithdraw", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java", "testclass_name": "TestCreateVirtualSubAccount", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateVirtualSubAccount", "description": "Unit tests for creating virtual sub-accounts using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateVirtualSubAccountWithoutString", "primary_tested": ["SubAccount.createVirtualSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of a virtual sub-account without providing a subAccountString, expecting a BinanceConnectorException."}, {"name": "testCreateVirtualSubAccount", "primary_tested": ["SubAccount.createVirtualSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of a virtual sub-account by providing a subAccountString."}]}, {"file_path": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java", "testclass_name": "TestIsolatedMarginTier", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIsolatedMarginTier", "description": "Unit tests for the isolated margin tier functionality of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedMarginTierWithoutParameters", "primary_tested": ["Margin.isolatedMarginTier(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated margin tier functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testIsolatedMarginTier", "primary_tested": ["Margin.isolatedMarginTier(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated margin tier functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestAssets.java", "testclass_name": "TestAssets", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssets", "description": "Unit tests for the assets functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetsWithoutParameters", "primary_tested": ["SubAccount.assets(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the assets functionality of the SubAccount service without parameters, expecting a BinanceConnectorException."}, {"name": "testAssets", "primary_tested": ["SubAccount.assets(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the assets functionality of the SubAccount service with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java", "testclass_name": "TestManagedSubAccountSnapshot", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestManagedSubAccountSnapshot", "description": "Unit tests for the managed sub-account snapshot functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubAccountSnapshotWithoutParameters", "primary_tested": ["SubAccount.managedSubAccountSnapshot(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account snapshot functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubAccountSnapshot", "primary_tested": ["SubAccount.managedSubAccountSnapshot(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account snapshot functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestMarginAccount.java", "testclass_name": "TestMarginAccount", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMarginAccount", "description": "Unit tests for the margin account functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testMarginWithoutParameters", "primary_tested": ["SubAccount.marginAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the margin account functionality when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testMargin", "primary_tested": ["SubAccount.marginAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "MockData", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin account functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestEnableFutures.java", "testclass_name": "TestEnableFutures", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEnableFutures", "description": "Unit tests for enabling futures functionality for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableFuturesWithoutEmail", "primary_tested": ["SubAccount.enableFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the enabling of futures functionality for a sub-account without providing an email, expecting a BinanceConnectorException."}, {"name": "testEnableFutures", "primary_tested": ["SubAccount.enableFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["UrlBuilder.urlEncode(String)", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the enabling of futures functionality for a sub-account by providing an email, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetMarginOrder.java", "testclass_name": "TestGetMarginOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetMarginOrder", "description": "Unit tests for the margin order functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMarginOrderWithoutParameters", "primary_tested": ["Margin.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the margin order functionality when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testMarginOrder", "primary_tested": ["Margin.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin order functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java", "testclass_name": "TestGetIpRestriction", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetIpRestriction", "description": "Unit tests for the IP restriction functionality of the SubAccount API in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetIpRestrictionWithoutParameters", "primary_tested": ["SubAccount.getIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the IP restriction functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testGetIpRestriction", "primary_tested": ["SubAccount.getIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "MockData", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the IP restriction functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java", "testclass_name": "TestFuturesTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesTransfer", "description": "Unit tests for the futures transfer functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "final double"}, {"name": "type", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransWithoutParameters", "primary_tested": ["SubAccount.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesTrans", "primary_tested": ["SubAccount.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}, {"name": "type", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java", "testclass_name": "TestSubAccountToSubAccount", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubAccountToSubAccount", "description": "Unit tests for the sub-account to sub-account transfer functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testSubToSubWithoutParameters", "primary_tested": ["SubAccount.subAccountToSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to sub-account transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSubToSub", "primary_tested": ["SubAccount.subAccountToSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to sub-account transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestMaxBorrow.java", "testclass_name": "TestMaxBorrow", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMaxBorrow", "description": "Tests for the max borrow functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMaxBorrowWithoutParameters", "primary_tested": ["Margin.maxBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the max borrow functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testMaxBorrow", "primary_tested": ["Margin.maxBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the max borrow functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java", "testclass_name": "TestManagedSubDeposit", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestManagedSubDeposit", "description": "Unit tests for the managed sub-account deposit functionality using the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubDepositWithoutParameters", "primary_tested": ["SubAccount.managedSubDeposit(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account deposit functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubWithdraw", "primary_tested": ["SubAccount.managedSubDeposit(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account deposit functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java", "testclass_name": "TestGetAllMarginOrders", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetAllMarginOrders", "description": "Tests for the getAllMarginOrders method in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetAllMarginOrdersWithoutParameters", "primary_tested": ["Margin.getAllOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getAllMarginOrders method without parameters, expecting a BinanceConnectorException."}, {"name": "testGetAllMarginOrders", "primary_tested": ["Margin.getAllOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getAllMarginOrders method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java", "testclass_name": "TestCancelMarginOcoOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelMarginOcoOrder", "description": "Tests for canceling margin OCO orders using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelAllMarginOcoOrderWithoutParameters", "primary_tested": ["Margin.cancelOcoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when canceling a margin OCO order without required parameters."}, {"name": "testCancelAllMarginOcoOrder", "primary_tested": ["Margin.cancelOcoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of a margin OCO order with required parameters."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java", "testclass_name": "TestDeleteIpList", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDeleteIpList", "description": "Unit tests for the delete IP list functionality of the SubAccount API in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testDeleteIpListWithoutParameters", "primary_tested": ["SubAccount.deleteIpList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delete IP list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDeleteIpList", "primary_tested": ["SubAccount.deleteIpList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delete IP list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "testclass_name": "SubAccount_depositAddressTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_depositAddressTest", "description": "Tests for the deposit address functionality of the SubAccount in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositAddress", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality with valid parameters."}, {"name": "testDepositAddressMissingEmail", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality when the email parameter is missing, expecting a BinanceConnectorException."}, {"name": "testDepositAddressMissingCoin", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality when the coin parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/spot/margin/TestMaxTransferable.java", "testclass_name": "TestMaxTransferable", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMaxTransferable", "description": "Tests for the maxTransferable functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMaxTransferableWithoutParameters", "primary_tested": ["Margin.maxTransferable(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the maxTransferable method without parameters, expecting a BinanceConnectorException."}, {"name": "testMaxTransferable", "primary_tested": ["Margin.maxTransferable(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the maxTransferable method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java", "testclass_name": "TestMarginTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMarginTransfer", "description": "Unit tests for the margin transfer functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "final double"}, {"name": "type", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMarginTransferWithoutParameters", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testMarginTransfer", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}, {"name": "type", "type": "variable"}], "project_specific_resources": ["UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java", "testclass_name": "TestFuturesInternalTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesInternalTransfer", "description": "Unit tests for the internal transfer functionality of the SubAccount in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futuresType", "type": "final int"}, {"name": "amount", "type": "final double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesInternalTransWithoutParameters", "primary_tested": ["SubAccount.futuresInternalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the internal transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesInternalTrans", "primary_tested": ["SubAccount.futuresInternalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futuresType", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the internal transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java", "testclass_name": "TestIsolatedMarginData", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIsolatedMarginData", "description": "Test suite for isolated margin data functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedMarginData", "primary_tested": ["Margin.isolatedMarginData(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated margin data retrieval functionality using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/margin/TestAllAssets.java", "testclass_name": "TestAllAssets", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAllAssets", "description": "Unit tests for the allAssets functionality of the Margin service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAllAssets", "primary_tested": ["Margin.allAssets()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the allAssets functionality of the Margin service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java", "testclass_name": "TestGetFuturesInternalTransfer", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetFuturesInternalTransfer", "description": "Unit tests for the internal futures transfer functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "final int"}, {"name": "endTime", "type": "final int"}, {"name": "page", "type": "final int"}, {"name": "limit", "type": "final int"}, {"name": "futuresType", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetFuturesInternalTransferWithoutParameters", "primary_tested": ["SubAccount.getFuturesInternalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the getFuturesInternalTransfer method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testGetFuturesInternalTransfer", "primary_tested": ["SubAccount.getFuturesInternalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "page", "type": "variable"}, {"name": "limit", "type": "variable"}, {"name": "futuresType", "type": "variable"}], "project_specific_resources": ["UrlBuilder.urlEncode(String)", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getFuturesInternalTransfer method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java", "testclass_name": "TestCrossMarginCollateralRatio", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCrossMarginCollateralRatio", "description": "Test suite for the cross margin collateral ratio functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCrossMarginCollateralRatio", "primary_tested": ["Margin.crossMarginCollateralRatio()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cross margin collateral ratio functionality of the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java", "testclass_name": "TestIsolatedAccountLimit", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIsolatedAccountLimit", "description": "Test for the isolated account limit functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedAccountLimit", "primary_tested": ["Margin.getIsolatedAccountLimit(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated account limit functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestInterestHistory.java", "testclass_name": "TestInterestHistory", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestInterestHistory", "description": "Unit tests for the interest history functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final int"}, {"name": "endTime", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testInterestHistory", "primary_tested": ["Margin.interestHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest history functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/TestParameterChecker.java", "testclass_name": "TestParameterChecker", "dependencies": ["package unit;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONObject;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ParameterChecker;"], "name": "TestParameterChecker", "description": "Unit tests for the ParameterChecker utility class, focusing on parameter validation and exception handling.", "class_members": {"variables": [{"name": "mockObject", "type": "String"}, {"name": "emptyString", "type": "String"}]}, "test_cases": [{"name": "testcheckParameter", "primary_tested": ["ParameterChecker.checkParameter(Map<String,Object>,String,Class<?>)"], "external_dependencies": {"modules": ["ParameterChecker", "MockData"], "class_members": [{"name": "mockObject", "type": "variable"}]}, "category": "unit", "description": "Tests the parameter checking functionality with valid parameters."}, {"name": "testcheckParameterNoKey", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "MockData", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the parameter checking functionality when a required parameter is missing, expecting an exception."}, {"name": "testcheckParameterWrongType", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class<?>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"], "class_members": [{"name": "mockObject", "type": "variable"}]}, "category": "unit", "description": "Tests the parameter type checking functionality with an incorrect type, expecting an exception."}, {"name": "testcheckEmptyString", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class<?>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"], "class_members": [{"name": "emptyString", "type": "variable"}]}, "category": "unit", "description": "Tests the parameter type checking functionality with an empty string, expecting an exception."}, {"name": "testcheckNull", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class<?>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the parameter type checking functionality with a null value, expecting an exception."}, {"name": "testMoreThanOneAllowedParam", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String...)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException", "JSONObject"]}, "category": "unit", "description": "Tests the functionality to check that only one of the allowed parameters is present, expecting an exception when more than one is provided."}, {"name": "testNoOneOfTheRequiredPrams", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String...)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException", "JSONObject"]}, "category": "unit", "description": "Tests the functionality to check that at least one of the required parameters is present, expecting an exception when none are provided."}]}, {"file_path": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java", "testclass_name": "TestForceLiquidationRec", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestForceLiquidationRec", "description": "Unit tests for the force liquidation record functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "final int"}, {"name": "endTime", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testForceLiquidationRec", "primary_tested": ["Margin.forceLiquidationRec(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the force liquidation record functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetBnbBurn.java", "testclass_name": "TestGetBnbBurn", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetBnbBurn", "description": "Unit test for the getBnbBurn functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetBnbBurn", "primary_tested": ["Margin.getBnbBurn(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getBnbBurn functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestDelistSchedule.java", "testclass_name": "TestDelistSchedule", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDelistSchedule", "description": "Unit test for the delist schedule functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDelistSchedule", "primary_tested": ["Margin.delistSchedule(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockWebServer.setDispatcher(Dispatcher)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delist schedule functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java", "testclass_name": "TestExchangeSmallLiability", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestExchangeSmallLiability", "description": "Unit tests for the exchange small liability functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExchangeSmallLiability", "primary_tested": ["Margin.exchangeSmallLiability(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange small liability functionality of the Margin client."}]}, {"file_path": "src/test/java/unit/spot/margin/TestBnbBurn.java", "testclass_name": "TestBnbBurn", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBnbBurn", "description": "Unit tests for the BnbBurn functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBnbBurn", "primary_tested": ["Margin.bnbBurn(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bnbBurn functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCrossMarginData.java", "testclass_name": "TestCrossMarginData", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCrossMarginData", "description": "Test suite for cross margin data functionality using MockWebServer.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCrossMarginData", "primary_tested": ["Margin.crossMarginData(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cross margin data retrieval functionality using a mocked web server."}]}, {"file_path": "src/test/java/unit/spot/margin/TestAllPairs.java", "testclass_name": "TestAllPairs", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAllPairs", "description": "Test suite for testing the allPairs functionality of the Margin API using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAllPairs", "primary_tested": ["Margin.allPairs()"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the allPairs functionality of the Margin API using a mock web server to simulate the response."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java", "testclass_name": "TestGetAccount", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetAccount", "description": "Unit test for the getAccount method of the PortfolioMargin service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetAccount", "primary_tested": ["PortfolioMargin.getAccount(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getAccount functionality of the PortfolioMargin service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestTradeCoeff.java", "testclass_name": "TestTradeCoeff", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTradeCoeff", "description": "Test suite for testing the trade coefficient functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradeCoeff", "primary_tested": ["Margin.tradeCoeff(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trade coefficient functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java", "testclass_name": "TestAssetIndexPrice", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetIndexPrice", "description": "Test suite for querying portfolio margin asset index price.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testQueryPortfolioMarginAssetIndexPrice", "primary_tested": ["PortfolioMargin.assetIndexPrice(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of querying the portfolio margin asset index price."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java", "testclass_name": "TestGetMarginOcoOpenOrders", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetMarginOcoOpenOrders", "description": "Test for getting open OCO orders in margin trading.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetMarginOcoOpenOrders", "primary_tested": ["Margin.getOcoOpenOrders(Map<String, Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting open OCO orders in margin trading using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java", "testclass_name": "TestRepayFutures", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRepayFutures", "description": "Unit test for repaying futures negative balance using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepayFutures", "primary_tested": ["PortfolioMargin.repayFutures(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the repayment of futures negative balance using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java", "testclass_name": "TestBankruptcyLoanRecord", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBankruptcyLoanRecord", "description": "Test suite for the bankruptcy loan record functionality in the Portfolio Margin module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBankruptcyLoanRecord", "primary_tested": ["PortfolioMargin.bankruptcyLoanRecord(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bankruptcy loan record functionality of the Portfolio Margin module."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java", "testclass_name": "TestAutoRepayFuturesStatus", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAutoRepayFuturesStatus", "description": "Test suite for checking the auto repay futures status functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAutoRepayFuturesStatus", "primary_tested": ["PortfolioMargin.autoRepayFuturesStatus(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the auto repay futures status functionality of the PortfolioMargin created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java", "testclass_name": "TestCancelAllMarginOrders", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelAllMarginOrders", "description": "Tests for canceling all margin orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelAllMarginOrdersWithoutParameters", "primary_tested": ["Margin.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of canceling all margin orders without providing parameters, expecting a BinanceConnectorException."}, {"name": "testCancelAllMarginOrders", "primary_tested": ["Margin.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of all margin orders by providing the required parameters."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestRepay.java", "testclass_name": "TestRepay", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRepay", "description": "Unit test for the repay functionality in the Portfolio Margin service of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepay", "primary_tested": ["PortfolioMargin.repay(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the repay functionality of the Portfolio Margin service using a mocked web server."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java", "testclass_name": "TestCollateralRate", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralRate", "description": "Test suite for the collateral rate functionality in the Portfolio Margin feature of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralRate", "primary_tested": ["PortfolioMargin.collateralRate(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral rate functionality of the Portfolio Margin feature in the Binance Spot Client."}]}, {"file_path": "src/test/java/unit/spot/margin/TestPriceIndex.java", "testclass_name": "TestPriceIndex", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPriceIndex", "description": "Unit tests for the price index functionality in the Margin module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPriceIndexWithoutParameters", "primary_tested": ["Margin.priceIndex(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the price index functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testPriceIndex", "primary_tested": ["Margin.priceIndex(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the price index functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java", "testclass_name": "TestAutoCollection", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAutoCollection", "description": "Unit tests for the auto-collection functionality of the Portfolio Margin in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFundAutocollection", "primary_tested": ["PortfolioMargin.autoCollection(Map<String, Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the auto-collection functionality of the Portfolio Margin in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java", "testclass_name": "TestAssetLeverage", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetLeverage", "description": "Unit test for testing the asset leverage functionality in the Portfolio Margin module of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetLeverage", "primary_tested": ["PortfolioMargin.assetLeverage()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset leverage functionality of the Portfolio Margin module in the Binance Spot Client."}]}, {"file_path": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java", "testclass_name": "TestGetOpenTwapOrders", "dependencies": ["package unit.spot.spotalgo;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOpenTwapOrders", "description": "Unit tests for getting open TWAP orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOrders", "primary_tested": ["SpotAlgo.getOpenOrders(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting open orders using the SpotAlgo client."}]}, {"file_path": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java", "testclass_name": "TestGetHistoricalOrders", "dependencies": ["package unit.spot.spotalgo;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetHistoricalOrders", "description": "Unit test for retrieving historical orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetHistoricalOrders", "primary_tested": ["SpotAlgo.getHistoricalOrders(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of historical orders using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java", "testclass_name": "TestGetAllMarginOcoOrders", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetAllMarginOcoOrders", "description": "Unit tests for getting all margin OCO orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final int"}, {"name": "endTime", "type": "static final int"}, {"name": "fromId", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetAllMarginOcoOrders", "primary_tested": ["Margin.getAllOcoOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "fromId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting all margin OCO orders using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCapitalFlow.java", "testclass_name": "TestCapitalFlow", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCapitalFlow", "description": "Unit tests for the capital flow functionality in the Margin module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCapitalFlowWithoutParameters", "primary_tested": ["Margin.capitalFlow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the capital flow functionality without parameters."}, {"name": "testCapitalFlow", "primary_tested": ["Margin.capitalFlow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the capital flow functionality with parameters."}]}, {"file_path": "src/test/java/unit/spot/margin/TestTrades.java", "testclass_name": "TestTrades", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTrades", "description": "Tests for the trades functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradesWithoutParameters", "primary_tested": ["Margin.trades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trades functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTrades", "primary_tested": ["Margin.trades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trades functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestNewMarginOrder.java", "testclass_name": "TestNewMarginOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestNewMarginOrder", "description": "Unit tests for the new margin order functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testNewMarginOrderWithoutParameters", "primary_tested": ["Margin.newOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the new margin order functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testNewMarginOrder", "primary_tested": ["Margin.newOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the new margin order functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/pay/TestTransactions.java", "testclass_name": "TestTransactions", "dependencies": ["package unit.spot.pay;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTransactions", "description": "Unit tests for the transactions functionality of the Pay service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTransactions", "primary_tested": ["Pay.transactions(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transactions functionality of the Pay service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java", "testclass_name": "TestSmallLiabilityExchangeHistory", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSmallLiabilityExchangeHistory", "description": "Unit tests for the small liability exchange history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "current", "type": "final int"}, {"name": "size", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSmallLiabilityExchangeHistoryWithoutParameters", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSmallLiabilityExchangeHistory", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "current", "type": "variable"}, {"name": "size", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestAvailableInventory.java", "testclass_name": "TestAvailableInventory", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAvailableInventory", "description": "Tests for the available inventory functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAvailableInventoryWithoutParameters", "primary_tested": ["Margin.availableInventory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the available inventory functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testAvailableInventory", "primary_tested": ["Margin.availableInventory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the available inventory functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestHashrateResaleList.java", "testclass_name": "TestHashrateResaleList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHashrateResaleList", "description": "Test suite for the hashrate resale list functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "pageIndex", "type": "final int"}, {"name": "pageSize", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleList", "primary_tested": ["Mining.hashrateResaleList(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockWebServer.setDispatcher(Dispatcher)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "pageIndex", "type": "variable"}, {"name": "pageSize", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale list functionality of the Mining service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java", "testclass_name": "TestEnableIsolatedAccount", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEnableIsolatedAccount", "description": "Unit tests for enabling isolated margin accounts using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableIsolatedAccountWithoutParameters", "primary_tested": ["Margin.enableIsolatedAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when enabling an isolated margin account without required parameters."}, {"name": "testEnableIsolatedAccount", "primary_tested": ["Margin.enableIsolatedAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of an isolated margin account with the required parameters."}]}, {"file_path": "src/test/java/unit/spot/margin/TestInterestRateHistory.java", "testclass_name": "TestInterestRateHistory", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestInterestRateHistory", "description": "Unit tests for the interest rate history functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testInterestRateHistoryWithoutParameters", "primary_tested": ["Margin.interestRateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest rate history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testInterestRateHistory", "primary_tested": ["Margin.interestRateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest rate history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestAlogrithm.java", "testclass_name": "TestAlogrithm", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAlogrithm", "description": "Test suite for the algorithm functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAlogrithm", "primary_tested": ["Mining.algorithm(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the algorithm functionality of the Mining class in the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java", "testclass_name": "TestAdjustCrossMarginMaxLeverage", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAdjustCrossMarginMaxLeverage", "description": "Tests for adjusting the maximum leverage in cross margin scenarios using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "leverage", "type": "Integer"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAdjustCrossMarginMaxLeverageWithoutParameters", "primary_tested": ["Margin.adjustCrossMarginMaxLeverage(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the adjustCrossMarginMaxLeverage method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testAdjustCrossMarginMaxLeverage", "primary_tested": ["Margin.adjustCrossMarginMaxLeverage(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "leverage", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the adjustCrossMarginMaxLeverage method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestCoinName.java", "testclass_name": "TestCoinName", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCoinName", "description": "Unit test for the coinName method in the Mining API of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCoinName", "primary_tested": ["Mining.coinName(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the coinName method in the Mining API of the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java", "testclass_name": "TestAssetCollection", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetCollection", "description": "Tests for the asset collection functionality in the Portfolio Margin feature of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetCollectionWithoutParameters", "primary_tested": ["PortfolioMargin.assetCollection(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset collection functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testAssetCollection", "primary_tested": ["PortfolioMargin.assetCollection(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset collection functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java", "testclass_name": "TestCancelMarginOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelMarginOrder", "description": "Unit tests for canceling margin orders using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testCancelMarginOrderWithoutParameters", "primary_tested": ["Margin.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of canceling a margin order without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testCancelMarginOcoOrder", "primary_tested": ["Margin.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of a margin OCO order with the necessary parameters provided."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java", "testclass_name": "TestSwitchAutoRepayFutures", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSwitchAutoRepayFutures", "description": "Unit tests for the switchAutoRepayFutures functionality in the PortfolioMargin service of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSwitchAutoRepayFuturesWithoutParameters", "primary_tested": ["PortfolioMargin.switchAutoRepayFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the switchAutoRepayFutures functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSwitchAutoRepayFutures", "primary_tested": ["PortfolioMargin.switchAutoRepayFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the switchAutoRepayFutures functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java", "testclass_name": "TestNewMarginOcoOrder", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestNewMarginOcoOrder", "description": "Unit tests for the new margin OCO order functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "final double"}, {"name": "price", "type": "final int"}, {"name": "stopPrice", "type": "final int"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testNewMarginOcoOrderWithoutParameters", "primary_tested": ["Margin.ocoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the Margin OCO order functionality when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testNewMarginOcoOrder", "primary_tested": ["Margin.ocoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}, {"name": "price", "type": "variable"}, {"name": "stopPrice", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of a new margin OCO order with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java", "testclass_name": "TestBnbTransfer", "dependencies": ["package unit.spot.portfoliomargin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBnbTransfer", "description": "Unit tests for the BNB transfer functionality in the Portfolio Margin module of the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBnbTransferWithoutParameters", "primary_tested": ["PortfolioMargin.bnbTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BNB transfer functionality without providing any parameters, expecting a BinanceConnectorException."}, {"name": "testBnbTransfer", "primary_tested": ["PortfolioMargin.bnbTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BNB transfer functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java", "testclass_name": "TestCancelOrder", "dependencies": ["package unit.spot.spotalgo;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelOrder", "description": "Unit tests for canceling orders in the SpotAlgo client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "algoId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOrderWithoutParameters", "primary_tested": ["SpotAlgo.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of cancelOrder method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testCancelOrder", "primary_tested": ["SpotAlgo.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "algoId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of an order with the provided parameters."}]}, {"file_path": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java", "testclass_name": "TestDisableIsolatedAccount", "dependencies": ["package unit.spot.margin;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDisableIsolatedAccount", "description": "Tests for disabling isolated margin accounts using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDisableIsolatedAccountWithoutParameters", "primary_tested": ["Margin.disableIsolatedAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests disabling an isolated margin account without providing parameters, expecting a BinanceConnectorException."}, {"name": "testDisableIsolatedAccount", "primary_tested": ["Margin.disableIsolatedAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests disabling an isolated margin account with the correct parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java", "testclass_name": "TestEthStakingWbethWrapHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingWbethWrapHistory", "description": "Test for the ETH staking WBETH wrap history functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethWrapHistory", "primary_tested": ["Staking.ethStakingWbethWrapHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking WBETH wrap history functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java", "testclass_name": "TestEthStakingSubHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingSubHistory", "description": "Test for ETH staking subscription history using MockWebServer.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingSubHistory", "primary_tested": ["Staking.ethStakingSubHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking subscription history functionality using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java", "testclass_name": "TestEthStakingRedeemHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingRedeemHistory", "description": "Unit test for the redemption history functionality in the ETH staking service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingRedeemHistory", "primary_tested": ["Staking.ethStakingRedeemHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption history functionality of the ETH staking service."}]}, {"file_path": "src/test/java/unit/spot/mining/TestAccountList.java", "testclass_name": "TestAccountList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAccountList", "description": "Unit tests for the account list functionality in the Mining module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountListWithoutParameters", "primary_tested": ["Mining.accountList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testAccountList", "primary_tested": ["Mining.accountList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java", "testclass_name": "TestTwapOrder", "dependencies": ["package unit.spot.spotalgo;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTwapOrder", "description": "Unit tests for the TWAP order functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "static final double"}, {"name": "duration", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTwapOrderWithoutParameters", "primary_tested": ["SpotAlgo.twapOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the TWAP order functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTwapOrder", "primary_tested": ["SpotAlgo.twapOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}, {"name": "duration", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the TWAP order functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java", "testclass_name": "TestEthStakingWbethRewardHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingWbethRewardHistory", "description": "Test for the ETH staking WBETH reward history functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethRewardHistory", "primary_tested": ["Staking.ethStakingWbethRewardHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking WBETH reward history functionality."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingAccount.java", "testclass_name": "TestEthStakingAccount", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingAccount", "description": "Unit tests for the ETH staking account functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingQuota", "primary_tested": ["Staking.ethStakingAccount(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking account quota functionality using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java", "testclass_name": "TestEthStakingRateHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingRateHistory", "description": "Unit tests for the ETH staking rate history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingRateHistory", "primary_tested": ["Staking.ethStakingRateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking rate history functionality using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/mining/TestMinerList.java", "testclass_name": "TestMinerList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMinerList", "description": "Unit tests for the miner list functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMinerListWithoutParameters", "primary_tested": ["Mining.minerList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the miner list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testMinerList", "primary_tested": ["Mining.minerList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the miner list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingQuota.java", "testclass_name": "TestEthStakingQuota", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingQuota", "description": "Unit tests for the ETH staking quota functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingQuota", "primary_tested": ["Staking.ethStakingQuota(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking quota functionality using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java", "testclass_name": "TestHashrateResaleRequest", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHashrateResaleRequest", "description": "Unit tests for the hashrate resale request functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "endDate", "type": "final long"}, {"name": "startDate", "type": "final long"}, {"name": "hashRate", "type": "final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleRequestWithoutParameters", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale request functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testHashrateResaleRequest", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "endDate", "type": "variable"}, {"name": "startDate", "type": "variable"}, {"name": "hashRate", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale request functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java", "testclass_name": "TestGetSubOrders", "dependencies": ["package unit.spot.spotalgo;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetSubOrders", "description": "Unit tests for querying sub orders in the Spot Algo service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "algoId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testQuerySubOrdersWithoutParameters", "primary_tested": ["SpotAlgo.getSubOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of querying sub orders without parameters, expecting a BinanceConnectorException."}, {"name": "testQuerySubOrders", "primary_tested": ["SpotAlgo.getSubOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "algoId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful querying of sub orders with parameters."}]}, {"file_path": "src/test/java/unit/spot/mining/TestAccountEarning.java", "testclass_name": "TestAccountEarning", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAccountEarning", "description": "Unit tests for the account earning functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountEarningWithoutParameters", "primary_tested": ["Mining.accountEarning(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account earning functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testAccountEarning", "primary_tested": ["Mining.accountEarning(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account earning functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java", "testclass_name": "TestEthStakingRewardsHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingRewardsHistory", "description": "Test for ETH staking rewards history using MockWebServer.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingRewardsHistory", "primary_tested": ["Staking.ethStakingRewardsHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking rewards history functionality using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java", "testclass_name": "TestEthStakingWbethUnwrapHistory", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEthStakingWbethUnwrapHistory", "description": "Test for the ETH staking WBETH unwrap history functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethUnwrapHistory", "primary_tested": ["Staking.ethStakingWbethUnwrapHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking WBETH unwrap history functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestBonusList.java", "testclass_name": "TestBonusList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBonusList", "description": "Unit tests for the bonus list functionality in the Mining API of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBonusListWithoutParameters", "primary_tested": ["Mining.bonusList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bonus list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testBonusList", "primary_tested": ["Mining.bonusList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bonus list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java", "testclass_name": "TestCancelHashrateResaleConfig", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelHashrateResaleConfig", "description": "Unit tests for canceling hashrate resale configuration in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "configId", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelHashrateResaleConfigWithoutParameters", "primary_tested": ["Mining.cancelHashrateResaleConfig(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when canceling hashrate resale configuration without required parameters."}, {"name": "testCancelHashrateResaleConfig", "primary_tested": ["Mining.cancelHashrateResaleConfig(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "configId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of hashrate resale configuration with required parameters."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCreateListenKey.java", "testclass_name": "TestCreateListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateListenKey", "description": "Unit test for creating a listen key using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "MOCK_RESPONSE", "type": "static final String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateListenKey", "primary_tested": ["UserData.createListenKey()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "MOCK_RESPONSE", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of a listen key using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/mining/TestDetailMinerList.java", "testclass_name": "TestDetailMinerList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDetailMinerList", "description": "Unit tests for the detailMinerList functionality of the Mining API in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDetailMinerListWithoutParameters", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the detailMinerList functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDetailMinerList", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the detailMinerList functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java", "testclass_name": "TestHashrateResaleDetail", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHashrateResaleDetail", "description": "Unit tests for the hashrate resale detail functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "configId", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleDetailWithoutParameters", "primary_tested": ["Mining.hashrateResaleDetail(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale detail functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testHashrateResaleDetail", "primary_tested": ["Mining.hashrateResaleDetail(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "configId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale detail functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java", "testclass_name": "TestTargetAssetList", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTargetAssetList", "description": "Unit tests for the target asset list functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTargetAssetList", "primary_tested": ["AutoInvest.targetAssetList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset list functionality of the AutoInvest service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/mining/TestStatisticsList.java", "testclass_name": "TestStatisticsList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestStatisticsList", "description": "Unit tests for the statistics list functionality in the Mining module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testStatisticsListWithoutParameters", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the statistics list method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testStatisticsList", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the statistics list method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/mining/TestEarningList.java", "testclass_name": "TestEarningList", "dependencies": ["package unit.spot.mining;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEarningList", "description": "Unit tests for the earning list functionality in the Mining module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEarningListWithoutParameters", "primary_tested": ["Mining.earningList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the earning list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testEarningList", "primary_tested": ["Mining.earningList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the earning list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java", "testclass_name": "TestCreateMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateMarginListenKey", "description": "Test suite for creating a margin listen key using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "MOCK_RESPONSE", "type": "static final String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateListenKey", "primary_tested": ["SpotClient.createMarginListenKey()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "MOCK_RESPONSE", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of a margin listen key using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/fiat/TestPayments.java", "testclass_name": "TestPayments", "dependencies": ["package unit.spot.fiat;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPayments", "description": "Unit tests for the payments functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPaymentsWithoutParameters", "primary_tested": ["Fiat.payments(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the payments functionality of the Fiat class without parameters, expecting a BinanceConnectorException."}, {"name": "testPayments", "primary_tested": ["Fiat.payments(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the payments functionality of the Fiat class with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java", "testclass_name": "TestIndexPlanRebalanceInfo", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIndexPlanRebalanceInfo", "description": "Unit tests for the index plan rebalance info functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIndexPlanRebalanceInfo", "primary_tested": ["AutoInvest.indexPlanRebalanceInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index plan rebalance info functionality using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/staking/TestSubEthStaking.java", "testclass_name": "TestSubEthStaking", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubEthStaking", "description": "Unit tests for the ETH staking functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "final double"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testSubEthStakingWithoutParameters", "primary_tested": ["Staking.subEthStaking(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSubEthStaking", "primary_tested": ["Staking.subEthStaking(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ETH staking functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/fiat/TestOrders.java", "testclass_name": "TestOrders", "dependencies": ["package unit.spot.fiat;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOrders", "description": "Unit tests for the orders functionality of the Fiat service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOrdersWithoutParameters", "primary_tested": ["Fiat.orders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the orders functionality of the Fiat service without parameters, expecting a BinanceConnectorException."}, {"name": "testOrders", "primary_tested": ["Fiat.orders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the orders functionality of the Fiat service with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java", "testclass_name": "TestWrapEthStakingWbeth", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestWrapEthStakingWbeth", "description": "Unit tests for the wrapEthStakingWbeth functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWrapEthStakingWbethWithoutParameters", "primary_tested": ["Staking.wrapEthStakingWbeth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the wrapEthStakingWbeth functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testWrapEthStakingWbeth", "primary_tested": ["Staking.wrapEthStakingWbeth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the wrapEthStakingWbeth functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java", "testclass_name": "TestAllSourceAndTargetAssets", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAllSourceAndTargetAssets", "description": "Unit test for testing the retrieval of all source and target assets in the auto-invest feature.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAllSourceAndTargetAssets", "primary_tested": ["AutoInvest.allSourceAndTargetAssets(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of all source and target assets in the auto-invest feature."}]}, {"file_path": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java", "testclass_name": "TestRedeemEthStaking", "dependencies": ["package unit.spot.staking;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemEthStaking", "description": "Unit tests for redeeming ETH staking using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemEthStakingWithoutParameters", "primary_tested": ["Staking.redeemEthStaking(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of ETH staking without providing parameters, expecting a BinanceConnectorException."}, {"name": "testRedeemEthStaking", "primary_tested": ["Staking.redeemEthStaking(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of ETH staking with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java", "testclass_name": "TestPlanSubsHistory", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPlanSubsHistory", "description": "Integration test for the plan subscription history functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPlanSubsHistory", "primary_tested": ["AutoInvest.planSubsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "integration", "fixtures_used": ["init"], "description": "Tests the plan subscription history functionality of the AutoInvest service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java", "testclass_name": "TestExtendMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestExtendMarginListenKey", "description": "Tests for extending margin listen key functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendMarginListenKeyWithoutParameters", "primary_tested": ["UserData.extendMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the extend margin listen key functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testExtendMarginListenKey", "primary_tested": ["UserData.extendMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the extend margin listen key functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java", "testclass_name": "TestCloseMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCloseMarginListenKey", "description": "Unit tests for closing margin listen key functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseMarginListenKeyWithoutParameters", "primary_tested": ["UserData.closeMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of closing margin listen key without providing parameters, expecting a BinanceConnectorException."}, {"name": "testCloseMarginListenKey", "primary_tested": ["UserData.closeMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful closing of margin listen key with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestExtendListenKey.java", "testclass_name": "TestExtendListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestExtendListenKey", "description": "Unit tests for extending the listen key functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendListenKeyWithoutParameters", "primary_tested": ["UserData.extendListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending the listen key without providing parameters, expecting a BinanceConnectorException."}, {"name": "testExtendListenKey", "primary_tested": ["UserData.extendListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful extension of the listen key with the correct parameters."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java", "testclass_name": "TestCloseIsolatedMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCloseIsolatedMarginListenKey", "description": "Unit tests for closing isolated margin listen key functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseIsolatedListenKeyWithoutParameters", "primary_tested": ["UserData.closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when closing isolated margin listen key without parameters."}, {"name": "testCloseIsolatedListenKey", "primary_tested": ["UserData.closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful closing of isolated margin listen key with parameters."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java", "testclass_name": "TestExtendIsolatedMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestExtendIsolatedMarginListenKey", "description": "Unit tests for extending isolated margin listen key functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendIsolatedListenKeyWithoutParameters", "primary_tested": ["UserData.extendIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending isolated margin listen key without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testExtendIsolatedListenKey", "primary_tested": ["UserData.extendIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful extension of isolated margin listen key with the correct parameters."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java", "testclass_name": "TestHoldingPlan", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHoldingPlan", "description": "Unit tests for the holding plan functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHoldingPlan", "primary_tested": ["AutoInvest.holdingPlan(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the holding plan functionality of the AutoInvest service within the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestDustLog.java", "testclass_name": "TestDustLog", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDustLog", "description": "Unit test for the dustLog functionality in the Wallet service of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDustLog", "primary_tested": ["Wallet.dustLog(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the dustLog functionality of the Wallet service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestCoinInfo.java", "testclass_name": "TestCoinInfo", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCoinInfo", "description": "Integration test for retrieving coin information using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCoinInfo", "primary_tested": ["Wallet.coinInfo(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "integration", "fixtures_used": ["init"], "description": "Tests the retrieval of coin information using the Binance Spot Client."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestWalletBalance.java", "testclass_name": "TestWalletBalance", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestWalletBalance", "description": "Unit tests for wallet balance functionality using MockWebServer.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWalletBalance", "primary_tested": ["Wallet.walletBalance(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the wallet balance functionality by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCloseListenKey.java", "testclass_name": "TestCloseListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCloseListenKey", "description": "Unit tests for closing listen key functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseListenKeyWithoutParameters", "primary_tested": ["UserData.closeListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of closing a listen key without providing parameters, expecting a BinanceConnectorException."}, {"name": "testCloseListenKey", "primary_tested": ["UserData.closeListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful closing of a listen key with the correct parameters."}]}, {"file_path": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java", "testclass_name": "TestCreateIsolatedMarginListenKey", "dependencies": ["package unit.spot.userdata;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateIsolatedMarginListenKey", "description": "Tests for creating isolated margin listen keys using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "MOCK_RESPONSE", "type": "static final String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateIsolatedListenKeyWithoutParameters", "primary_tested": ["UserData.createIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "MOCK_RESPONSE", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of an isolated margin listen key without parameters, expecting a BinanceConnectorException."}, {"name": "testCreateIsolatedListenKey", "primary_tested": ["UserData.createIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "MOCK_RESPONSE", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of an isolated margin listen key with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestGetUserAsset.java", "testclass_name": "TestGetUserAsset", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetUserAsset", "description": "Unit test for the getUserAsset method in the Wallet service of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetUserAsset", "primary_tested": ["Wallet.getUserAsset(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getUserAsset functionality of the Wallet service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestAssetDividend.java", "testclass_name": "TestAssetDividend", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetDividend", "description": "Test for the asset dividend functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetDividend", "primary_tested": ["Wallet.assetDividend(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset dividend functionality of the Wallet in the Binance Spot Client."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java", "testclass_name": "TestEnableFastWithdraw", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestEnableFastWithdraw", "description": "Test for enabling fast withdraw functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEnableFastWithdraw", "primary_tested": ["Wallet.enableFastWithdraw(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of enabling fast withdraw using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestAssetDetail.java", "testclass_name": "TestAssetDetail", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetDetail", "description": "Test suite for the asset detail functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetDetail", "primary_tested": ["Wallet.assetDetail(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset detail functionality of the Wallet created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java", "testclass_name": "TestDisableFastWithdraw", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDisableFastWithdraw", "description": "Unit test for disabling fast withdraw functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDisableFastWithdraw", "primary_tested": ["Wallet.disableFastWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of disabling fast withdraw in the Wallet service of the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java", "testclass_name": "TestSourceAssetList", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSourceAssetList", "description": "Unit tests for the source asset list functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSourceAssetListWithoutParameters", "primary_tested": ["AutoInvest.sourceAssetList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the source asset list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSourceAssetList", "primary_tested": ["AutoInvest.sourceAssetList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the source asset list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestSystemStatus.java", "testclass_name": "TestSystemStatus", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSystemStatus", "description": "Test suite for the system status functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSystemStatus", "primary_tested": ["Wallet.systemStatus()"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the system status functionality of the Wallet created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java", "testclass_name": "TestWithdrawHistory", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestWithdrawHistory", "description": "Unit tests for the withdrawal history functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWithdrawHistory", "primary_tested": ["Wallet.withdrawHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdrawal history functionality of the Wallet class in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java", "testclass_name": "TestBnbConvertibleAssets", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBnbConvertibleAssets", "description": "Test suite for BNB convertible assets functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBnbConvertibleAssets", "primary_tested": ["Wallet.bnbConvertableAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of converting BNB assets using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestApiPermission.java", "testclass_name": "TestApiPermission", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestApiPermission", "description": "Test suite for checking API permissions using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testApiPermission", "primary_tested": ["Wallet.apiPermission(Map<String,Object>)"], "associated_methods": ["MockWebServer.setDispatcher(Dispatcher)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the API permission functionality of the Wallet service using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java", "testclass_name": "TestApplyOneClickArrivalDeposit", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestApplyOneClickArrivalDeposit", "description": "Unit test for applying one-click arrival deposit functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testApplyOneClickArrivalDeposit", "primary_tested": ["Wallet.applyOneClickArrivalDeposit(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-click arrival deposit functionality of the Wallet service."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java", "testclass_name": "TestRedeemIndexPlan", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemIndexPlan", "description": "Unit tests for redeeming index plans using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "indexId", "type": "static final long"}, {"name": "redemptionPercentage", "type": "static final Integer"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemIndexPlanWithoutParameters", "primary_tested": ["AutoInvest.redeemIndexPlan(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of an index plan without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testRedeemIndexPlan", "primary_tested": ["AutoInvest.redeemIndexPlan(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "indexId", "type": "variable"}, {"name": "redemptionPercentage", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of an index plan with necessary parameters."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java", "testclass_name": "TestChangePlanStatus", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestChangePlanStatus", "description": "Unit tests for changing the status of an auto-invest plan using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "planId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testChangePlanStatusWithoutParameters", "primary_tested": ["AutoInvest.changePlanStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of changing the plan status without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testChangePlanStatus", "primary_tested": ["AutoInvest.changePlanStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "planId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful change of the plan status with the necessary parameters provided."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java", "testclass_name": "TestGetBusdAutoConvertions", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetBusdAutoConvertions", "description": "Unit test for testing the BUSD auto-conversions functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetBusdAutoConvertions", "primary_tested": ["Wallet.getBusdAutoConvertions()"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD auto-conversions functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestTradeFee.java", "testclass_name": "TestTradeFee", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTradeFee", "description": "Unit test for the trade fee functionality of the Wallet service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradeFee", "primary_tested": ["Wallet.tradeFee(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trade fee functionality of the Wallet service by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java", "testclass_name": "TestApiTradingStatus", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestApiTradingStatus", "description": "Test for the API trading status endpoint in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testApiTradingStatus", "primary_tested": ["Wallet.apiTradingStatus(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the API trading status functionality of the Wallet service in the Binance connector client."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java", "testclass_name": "TestIndexPlanRedeemHistory", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIndexPlanRedeemHistory", "description": "Unit tests for the index plan redeem history functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "requestId", "type": "static final long"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testOnetimeTransactionStatusWithoutParameters", "primary_tested": ["AutoInvest.indexPlanRedeemHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the index plan redeem history functionality when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testIndexPlanRedeemHistory", "primary_tested": ["AutoInvest.indexPlanRedeemHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "requestId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index plan redeem history functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java", "testclass_name": "TestIndexInfo", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestIndexInfo", "description": "Unit tests for the index info functionality of the AutoInvest feature in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "indexId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIndexInfoWithoutParameters", "primary_tested": ["AutoInvest.indexInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index info functionality of the AutoInvest feature without parameters, expecting a BinanceConnectorException."}, {"name": "testIndexInfo", "primary_tested": ["AutoInvest.indexInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "indexId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index info functionality of the AutoInvest feature with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestFundingWallet.java", "testclass_name": "TestFundingWallet", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFundingWallet", "description": "Integration test for the funding wallet functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFundingWallet", "primary_tested": ["Wallet.fundingWallet(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "integration", "fixtures_used": ["init"], "description": "Tests the funding wallet functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java", "testclass_name": "TestTargetAssetRoiList", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTargetAssetRoiList", "description": "Unit tests for the target asset ROI list functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTargetAssetRoiListWithoutParameters", "primary_tested": ["AutoInvest.targetAssetRoiList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset ROI list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTargetAssetRoiList", "primary_tested": ["AutoInvest.targetAssetRoiList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset ROI list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java", "testclass_name": "TestUserIndexPlans", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestUserIndexPlans", "description": "Unit tests for the user index plans functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "indexId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUserIndexPlansWithoutParameters", "primary_tested": ["AutoInvest.userIndexPlans(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the user index plans functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testUserIndexPlans", "primary_tested": ["AutoInvest.userIndexPlans(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "indexId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the user index plans functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java", "testclass_name": "TestOnetimeTransactionStatus", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOnetimeTransactionStatus", "description": "Unit tests for the one-time transaction status functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "transactionId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOnetimeTransactionStatusWithoutParameters", "primary_tested": ["AutoInvest.oneTimeTransactionStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-time transaction status functionality of the SpotClient without providing parameters, expecting a BinanceConnectorException."}, {"name": "testOnetimeTransactionStatus", "primary_tested": ["AutoInvest.oneTimeTransactionStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "transactionId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-time transaction status functionality of the SpotClient with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestPlansList.java", "testclass_name": "TestPlansList", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPlansList", "description": "Unit tests for the plansList functionality of the AutoInvest service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPlansListWithoutParameters", "primary_tested": ["AutoInvest.plansList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the plansList functionality of the AutoInvest service without parameters, expecting a BinanceConnectorException."}, {"name": "testPlansList", "primary_tested": ["AutoInvest.plansList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the plansList functionality of the AutoInvest service with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/nft/TestGetAsset.java", "testclass_name": "TestGetAsset", "dependencies": ["package unit.spot.nft;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetAsset", "description": "Unit tests for the NFT asset retrieval functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetAsset", "primary_tested": ["NFT.getAsset(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of NFT assets using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java", "testclass_name": "TestSubmitOneTimeTransaction", "dependencies": ["package unit.spot.autoinvest;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubmitOneTimeTransaction", "description": "Unit tests for the one-time transaction submission functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subscriptionAmount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubmitOneTimeTransactionWithoutParameters", "primary_tested": ["AutoInvest.submitOneTimeTransaction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the submission of a one-time transaction without parameters, expecting a BinanceConnectorException."}, {"name": "testSubmitOneTimeTransaction", "primary_tested": ["AutoInvest.submitOneTimeTransaction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subscriptionAmount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful submission of a one-time transaction with parameters."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestDepositAddresses.java", "testclass_name": "TestDepositAddresses", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDepositAddresses", "description": "Tests for deposit addresses functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositAddressesWithoutParameters", "primary_tested": ["Wallet.depositAddresses(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit addresses functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDepositAddresses", "primary_tested": ["Wallet.depositAddresses(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit addresses functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java", "testclass_name": "TestAccountSnapshot", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAccountSnapshot", "description": "Unit tests for the account snapshot functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountSnapshotWithoutType", "primary_tested": ["Wallet.accountSnapshot(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account snapshot functionality without specifying the type, expecting a BinanceConnectorException."}, {"name": "testAccountSnapshot", "primary_tested": ["Wallet.accountSnapshot(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account snapshot functionality with the type set to 'SPOT', expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestRateLimitOrder.java", "testclass_name": "TestRateLimitOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRateLimitOrder", "description": "Unit tests for the rate limit order functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "recvWindow", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRateLimitOrder", "primary_tested": ["Trade.rateLimitOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the rate limit order functionality of the SpotClient without specifying a recvWindow."}, {"name": "testRateLimitOrderWithRecvWindow", "primary_tested": ["Trade.rateLimitOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the rate limit order functionality of the SpotClient with a specified recvWindow."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestDustTransfer.java", "testclass_name": "TestDustTransfer", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDustTransfer", "description": "Unit tests for the dust transfer functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDustTransferWithoutCoin", "primary_tested": ["Wallet.dustTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the dust transfer functionality of the Wallet without providing a coin, expecting a BinanceConnectorException."}, {"name": "testDustTransfer", "primary_tested": ["Wallet.dustTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "ArrayList", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the dust transfer functionality of the Wallet with provided assets, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java", "testclass_name": "TestFlexibleLoanAssets", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanAssets", "description": "Unit tests for the flexible loan assets functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanAssets", "primary_tested": ["CryptoLoans.flexibleLoanAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan assets functionality of the CryptoLoans service in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestDelegationHistory.java", "testclass_name": "TestDelegationHistory", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDelegationHistory", "description": "Unit tests for the delegation history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDelegationHistoryWithoutParameters", "primary_tested": ["Wallet.delegationHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delegation history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDelegationHistory", "primary_tested": ["Wallet.delegationHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delegation history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/nft/TestTransactionsHistory.java", "testclass_name": "TestTransactionsHistory", "dependencies": ["package unit.spot.nft;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTransactionsHistory", "description": "Unit tests for the NFT transactions history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderType", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTransactionsHistoryWithoutParameters", "primary_tested": ["NFT.transactionsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the NFT transactions history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTransactionsHistory", "primary_tested": ["NFT.transactionsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderType", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the NFT transactions history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java", "testclass_name": "TestGetOpenOcoOrders", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOpenOcoOrders", "description": "Unit tests for getting open OCO orders with parameters using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "recvWindow", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOcoOrdersWithParams", "primary_tested": ["Trade.getOpenOCOOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of getting open OCO orders with parameters using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/trade/TestCancelReplace.java", "testclass_name": "TestCancelReplace", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelReplace", "description": "Unit tests for the cancelReplace functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelReplaceWithoutParameters", "primary_tested": ["Trade.cancelReplace(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cancelReplace functionality of the SpotClient without parameters, expecting a BinanceConnectorException."}, {"name": "testCancelReplace", "primary_tested": ["Trade.cancelReplace(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cancelReplace functionality of the SpotClient with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestBusdConvert.java", "testclass_name": "TestBusdConvert", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.math.BigDecimal;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBusdConvert", "description": "Unit tests for the BUSD convert functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "BigDecimal"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testBusdConverWithoutMandatoryParam", "primary_tested": ["Wallet.busdConvert(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert functionality without a mandatory parameter, expecting a BinanceConnectorException."}, {"name": "testBusdConvert", "primary_tested": ["Wallet.busdConvert(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert functionality with all mandatory parameters provided."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java", "testclass_name": "TestFlexibleLoanRepayHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanRepayHistory", "description": "Test suite for the flexible loan repayment history functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepayGetFlexibleLoanRepaymentHistory", "primary_tested": ["CryptoLoans.flexibleLoanRepayHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of flexible loan repayment history using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java", "testclass_name": "TestFlexibleLoanCollateralAssets", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanCollateralAssets", "description": "Unit tests for fetching flexible loan collateral assets data using the Binance SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testGetFlexibleLoanCollateralAssetsData", "primary_tested": ["CryptoLoans.flexibleLoanCollateralAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of fetching flexible loan collateral assets data using the Binance SpotClient."}]}, {"file_path": "src/test/java/unit/spot/trade/TestMyTrades.java", "testclass_name": "TestMyTrades", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestMyTrades", "description": "Unit tests for the myTrades functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "orderId", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMyTradesWithoutSymbol", "primary_tested": ["Trade.myTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the myTrades functionality of the SpotClient without providing a symbol, expecting a BinanceConnectorException."}, {"name": "testMyTrades", "primary_tested": ["Trade.myTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the myTrades functionality of the SpotClient with a valid symbol and other parameters."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java", "testclass_name": "TestFlexibleLoanOngoingOrders", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanOngoingOrders", "description": "Test for the flexible loan ongoing orders functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanOngoingOrders", "primary_tested": ["CryptoLoans.flexibleLoanOngoingOrders(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan ongoing orders functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestSorAllocations.java", "testclass_name": "TestSorAllocations", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSorAllocations", "description": "Unit tests for the sorAllocations method in the Trade class of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSorAllocationsWithoutParameters", "primary_tested": ["Trade.sorAllocations(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorAllocations method without parameters, expecting a BinanceConnectorException."}, {"name": "testSorAllocations", "primary_tested": ["Trade.sorAllocations(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorAllocations method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestGetOpenOrders.java", "testclass_name": "TestGetOpenOrders", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOpenOrders", "description": "Unit tests for the getOpenOrders method of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "recvWindow", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOrdersWithoutParams", "primary_tested": ["Trade.getOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOrders method of the SpotClientImpl without parameters."}, {"name": "testGetOpenOrdersWithParams", "primary_tested": ["Trade.getOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOrders method of the SpotClientImpl with parameters."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java", "testclass_name": "TestFlexibleLoanLtvAdjustHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanLtvAdjustHistory", "description": "Test for the flexible loan LTV adjustment history functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanLtvAdjustHistory", "primary_tested": ["CryptoLoans.flexibleLoanLtvAdjustHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan LTV adjustment history functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestTestSorOrder.java", "testclass_name": "TestTestSorOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTestSorOrder", "description": "Unit tests for testing the SOR order functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestSorOrderWithoutParameters", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SOR order functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTestSorOrder", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SOR order functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java", "testclass_name": "TestFlexibleLoanBorrowHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanBorrowHistory", "description": "Test suite for the flexible loan borrow history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanBorrowHistory", "primary_tested": ["CryptoLoans.flexibleLoanBorrowHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow history functionality of the CryptoLoans created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/trade/TestNewOrderTest.java", "testclass_name": "TestNewOrderTest", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestNewOrderTest", "description": "Unit tests for testing new order functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testNewOrderWithoutParameters", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the testNewOrder method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testNewOrderTest", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testNewOrder method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java", "testclass_name": "TestLoanIncome", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanIncome", "description": "Unit tests for the loan income functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanIncomeWithoutParameters", "primary_tested": ["CryptoLoans.loanIncome(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan income functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testLoanIncome", "primary_tested": ["CryptoLoans.loanIncome(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan income functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestAccount.java", "testclass_name": "TestAccount", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAccount", "description": "Unit tests for the account functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "recvWindow", "type": "final int"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testAccount", "primary_tested": ["Trade.account(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account functionality of the SpotClientImpl class without specifying a recvWindow."}, {"name": "testAccountWithRecvWindow", "primary_tested": ["Trade.account(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account functionality of the SpotClientImpl class with a specified recvWindow."}]}, {"file_path": "src/test/java/unit/spot/trade/TestCommission.java", "testclass_name": "TestCommission", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCommission", "description": "Unit tests for the commission functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCommissionWithoutParameters", "primary_tested": ["Trade.commission(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the commission functionality of the Trade class without parameters, expecting a BinanceConnectorException."}, {"name": "testCommission", "primary_tested": ["Trade.commission(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the commission functionality of the Trade class with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestPreventedMatches.java", "testclass_name": "TestPreventedMatches", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPreventedMatches", "description": "Unit tests for the prevented matches functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPreventedMatchesWithoutParameters", "primary_tested": ["Trade.preventedMatches(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the prevented matches functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testPreventedMatches", "primary_tested": ["Trade.preventedMatches(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the prevented matches functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestSorOrder.java", "testclass_name": "TestSorOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSorOrder", "description": "Unit tests for the SOR (Smart Order Routing) order functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSorOrderWithoutParameters", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SOR order functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSorOrder", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SOR order functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java", "testclass_name": "TestCancelOcoOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelOcoOrder", "description": "Unit tests for canceling OCO orders using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderListId", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOCOWithoutSymbol", "primary_tested": ["Trade.cancelOCO(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cancellation of an OCO order without providing a symbol, expecting a BinanceConnectorException."}, {"name": "testCancelOCO", "primary_tested": ["Trade.cancelOCO(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderListId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of an OCO order with a provided symbol and orderListId."}]}, {"file_path": "src/test/java/unit/spot/trade/TestOcoOrder.java", "testclass_name": "TestOcoOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOcoOrder", "description": "Unit tests for OCO order functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "price", "type": "int"}, {"name": "quantity", "type": "double"}, {"name": "stopPrice", "type": "int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOcoOrderWithoutParameters", "primary_tested": ["Trade.ocoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the OCO order functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testOcoOrder", "primary_tested": ["Trade.ocoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "price", "type": "variable"}, {"name": "quantity", "type": "variable"}, {"name": "stopPrice", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the OCO order functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestCollateralAccount.java", "testclass_name": "TestCollateralAccount", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralAccount", "description": "Unit tests for the collateral account functionality in the VIP loans module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAccount", "primary_tested": ["VIPLoans.collateralAccount(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral account functionality in the VIP loans module."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "testclass_name": "TestCloudMiningHistory", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCloudMiningHistory", "description": "Unit tests for the cloud mining history functionality of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "size", "type": "Integer"}, {"name": "startTime", "type": "Long"}, {"name": "endTime", "type": "Long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloudMiningHistoryWithWrongParamType", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality with wrong parameter types, expecting a BinanceConnectorException."}, {"name": "testCloudMiningHistoryWithoutMandatoryParam", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}, {"name": "startTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality without a mandatory parameter, expecting a BinanceConnectorException."}, {"name": "testCloudMiningHistory", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality with correct parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestNewOrder.java", "testclass_name": "TestNewOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestNewOrder", "description": "Unit tests for the new order functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "quantity", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testNewOrderWithoutParameters", "primary_tested": ["Trade.newOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the new order functionality of the SpotClient without parameters, expecting a BinanceConnectorException."}, {"name": "testNewOrder", "primary_tested": ["Trade.newOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "quantity", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the new order functionality of the SpotClient with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java", "testclass_name": "TestCollateralRepayRate", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralRepayRate", "description": "Unit tests for the collateral repay rate functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "repayAmount", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralRepayRateWithoutParameters", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testCollateralRepayRate", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "repayAmount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java", "testclass_name": "TestFlexibleLoanRepay", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanRepay", "description": "Unit tests for the flexible loan repayment functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "repayAmount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanRepayWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan repayment functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanRepay", "primary_tested": ["CryptoLoans.flexibleLoanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "repayAmount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan repayment functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java", "testclass_name": "TestLoanBorrowHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanBorrowHistory", "description": "Unit tests for the loan borrow history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanBorrowHistoryWithoutParameters", "primary_tested": ["CryptoLoans.loanBorrowHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow history functionality without parameters."}, {"name": "testLoanBorrowHistory", "primary_tested": ["CryptoLoans.loanBorrowHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow history functionality with specific parameters."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestOrderStatus.java", "testclass_name": "TestOrderStatus", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOrderStatus", "description": "Test suite for checking the order status functionality in VIP loans.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOrderStatus", "primary_tested": ["VIPLoans.orderStatus(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the order status functionality of the VIP loans created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java", "testclass_name": "TestLoanAdjustLTVHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanAdjustLTVHistory", "description": "Unit tests for the loan adjust LTV history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAdjustLTVHistoryWithoutParameters", "primary_tested": ["CryptoLoans.loanAdjustLTVHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan adjust LTV history functionality without parameters."}, {"name": "testLoanAdjustLTVHistory", "primary_tested": ["CryptoLoans.loanAdjustLTVHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan adjust LTV history functionality with specific parameters."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java", "testclass_name": "TestFlexibleLoanAdjustLtv", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanAdjustLtv", "description": "Tests for the flexible loan adjust LTV functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "adjustmentAmount", "type": "final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanAdjustLtvWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanAdjustLtv(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan adjust LTV functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanAdjustLtv", "primary_tested": ["CryptoLoans.flexibleLoanAdjustLtv(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "adjustmentAmount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan adjust LTV functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestLoanableAssets.java", "testclass_name": "TestLoanableAssets", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanableAssets", "description": "Unit tests for the loanable assets functionality in the VIP loans module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanableAssets", "primary_tested": ["VIPLoans.loanableAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanable assets functionality of the VIP loans module."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java", "testclass_name": "TestLoanBorrow", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanBorrow", "description": "Unit tests for the loan borrowing functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "loanAmount", "type": "static final double"}, {"name": "loanTerm", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanBorrowWithoutParameters", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrowing functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testLoanBorrow", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "loanAmount", "type": "variable"}, {"name": "loanTerm", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrowing functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestGetOrders.java", "testclass_name": "TestGetOrders", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOrders", "description": "Unit tests for the getOrders functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "orderId", "type": "static final int"}, {"name": "origClientOrderId", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOrdersWithoutSymbol", "primary_tested": ["Trade.getOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrders functionality without a symbol, expecting a BinanceConnectorException."}, {"name": "testGetOrders", "primary_tested": ["Trade.getOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "orderId", "type": "variable"}, {"name": "origClientOrderId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrders functionality with a symbol and other parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java", "testclass_name": "TestLoanAssetsData", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanAssetsData", "description": "Unit tests for the loan assets data functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAssetsDataWithoutParameters", "primary_tested": ["CryptoLoans.loanAssetsData(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan assets data functionality of the CryptoLoans without parameters."}, {"name": "testLoanAssetsData", "primary_tested": ["CryptoLoans.loanAssetsData(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan assets data functionality of the CryptoLoans with parameters."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java", "testclass_name": "TestFlexibleLoanBorrow", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleLoanBorrow", "description": "Tests for the flexible loan borrow functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanBorrowWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanBorrow", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java", "testclass_name": "TestLoanRepay", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanRepay", "description": "Tests for the loan repayment functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanRepayWithoutParameters", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repayment functionality without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testLoanRepay", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repayment functionality with necessary parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "testclass_name": "TestBusdConvertHistory", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBusdConvertHistory", "description": "Unit tests for the BUSD convert history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "size", "type": "Integer"}, {"name": "startTime", "type": "Long"}, {"name": "endTime", "type": "Long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBusdConvertWithWrongParamType", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality with wrong parameter types, expecting a BinanceConnectorException."}, {"name": "testBusdConvertWithoutMandatoryParam", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality without a mandatory parameter, expecting a BinanceConnectorException."}, {"name": "testBusdConvertHistory", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "size", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality with all mandatory parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java", "testclass_name": "TestLoanRepayHistory", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanRepayHistory", "description": "Unit tests for the loan repay history functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanRepayHistoryWithoutParameters", "primary_tested": ["CryptoLoans.loanRepayHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repay history functionality without parameters."}, {"name": "testLoanRepayHistory", "primary_tested": ["CryptoLoans.loanRepayHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repay history functionality with specific parameters."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java", "testclass_name": "TestBorrowInterestRate", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBorrowInterestRate", "description": "Unit tests for the borrow interest rate functionality of the VIP loans in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowInterestRateWithoutParameters", "primary_tested": ["VIPLoans.borrowInterestRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the borrow interest rate functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testBorrowInterestRate", "primary_tested": ["VIPLoans.borrowInterestRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the borrow interest rate functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/trade/TestGetOcoOrders.java", "testclass_name": "TestGetOcoOrders", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOcoOrders", "description": "Unit tests for the getOCOOrders method in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "fromId", "type": "static final int"}, {"name": "limit", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOcoOrdersWithoutParams", "primary_tested": ["SpotClientImpl.getOCOOrders(Map<String,Object>)"], "associated_methods": ["SpotClientImpl.createTrade()"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOCOOrders method without parameters."}, {"name": "testGetOcoOrdersWithParams", "primary_tested": ["SpotClientImpl.getOCOOrders(Map<String,Object>)"], "associated_methods": ["SpotClientImpl.createTrade()"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "fromId", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOCOOrders method with parameters."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java", "testclass_name": "TestLoanOngoingOrders", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanOngoingOrders", "description": "Unit tests for the ongoing loan orders functionality in the CryptoLoans service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanOngoingOrdersWithoutParameters", "primary_tested": ["CryptoLoans.loanOngoingOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan ongoing orders functionality without parameters."}, {"name": "testLoanOngoingOrders", "primary_tested": ["CryptoLoans.loanOngoingOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan ongoing orders functionality with specific parameters."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestWithdraw.java", "testclass_name": "TestWithdraw", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestWithdraw", "description": "Unit tests for the withdrawal functionality of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWithdrawWithoutCoin", "primary_tested": ["Wallet.withdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdrawal functionality without specifying the coin, expecting a BinanceConnectorException."}, {"name": "testWithdrawWithoutAmount", "primary_tested": ["Wallet.withdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdrawal functionality without specifying the amount, expecting a BinanceConnectorException."}, {"name": "testWithdrawWithoutAddress", "primary_tested": ["Wallet.withdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdrawal functionality without specifying the address, expecting a BinanceConnectorException."}, {"name": "testWithdraw", "primary_tested": ["Wallet.withdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful withdrawal functionality with all required parameters specified."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java", "testclass_name": "TestCollateralAssetsData", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralAssetsData", "description": "Unit tests for collateral assets data retrieval using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAssetsDataWithoutParameters", "primary_tested": ["CryptoLoans.collateralAssetsData(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of collateral assets data without parameters using the SpotClient."}, {"name": "testCollateralAssetsData", "primary_tested": ["CryptoLoans.collateralAssetsData(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of collateral assets data with parameters using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java", "testclass_name": "TestLoanAdjustLTV", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLoanAdjustLTV", "description": "Unit tests for the loan adjust LTV functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAdjustLTVWithoutParameters", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan adjust LTV functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testLoanAdjustLTV", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan adjust LTV functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestCollateralAsset.java", "testclass_name": "TestCollateralAsset", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralAsset", "description": "Test suite for the collateral asset functionality in the VIP loans module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAsset", "primary_tested": ["VIPLoans.collateralAsset(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral asset functionality of the VIP loans module."}]}, {"file_path": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "testclass_name": "TestCancelOpenOrders", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceClientException;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCancelOpenOrders", "description": "Unit tests for canceling open orders using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOpenOrdersWithoutSymbol", "primary_tested": ["Trade.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when canceling open orders without providing a symbol, expecting a BinanceConnectorException."}, {"name": "testCancelOpenOrdersWhenNoOpenOrders", "primary_tested": ["Trade.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceClientException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_CLIENT_ERROR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when canceling open orders when there are no open orders, expecting a BinanceClientException."}, {"name": "testCancelOpenOrders", "primary_tested": ["Trade.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of open orders."}]}, {"file_path": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java", "testclass_name": "TestCustomizeMarginCall", "dependencies": ["package unit.spot.cryptoloans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCustomizeMarginCall", "description": "Unit tests for customizing margin call in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}, {"name": "marginCall", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCustomizeMarginCallWithoutParameters", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the customize margin call method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testCustomizeMarginCall", "primary_tested": ["CryptoLoans.customizeMarginCall(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}, {"name": "marginCall", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful customization of margin call with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java", "testclass_name": "TestRepaymentHistory", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRepaymentHistory", "description": "Unit tests for the repayment history functionality of VIP loans using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepaymentHistory", "primary_tested": ["VIPLoans.repaymentHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the repayment history functionality of the VIP loans created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/trade/TestGetOrder.java", "testclass_name": "TestGetOrder", "dependencies": ["package unit.spot.trade;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceClientException;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestGetOrder", "description": "Unit tests for the getOrder functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "final int"}, {"name": "origClientOrderId", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOrderWithoutSymbol", "primary_tested": ["Trade.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrder functionality without a symbol, expecting a BinanceConnectorException."}, {"name": "testGetOrderWithoutOrderId", "primary_tested": ["Trade.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceClientException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrder functionality without an orderId, expecting a BinanceClientException."}, {"name": "testGetOrder", "primary_tested": ["Trade.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}, {"name": "origClientOrderId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrder functionality with all required parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestOngoingOrders.java", "testclass_name": "TestOngoingOrders", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestOngoingOrders", "description": "Unit tests for the ongoing orders functionality in the VIP loans service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOngoingOrders", "primary_tested": ["VIPLoans.ongoingOrders(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ongoing orders functionality of the VIP loans service."}]}, {"file_path": "src/test/java/unit/spot/market/TestPing.java", "testclass_name": "TestPing", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestPing", "description": "Unit tests for the ping functionality of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPing", "primary_tested": ["Market.ping()"], "associated_methods": ["MockWebServer.setDispatcher(Dispatcher)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ping functionality of the Market created by the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/rebate/TestTaxQuery.java", "testclass_name": "TestTaxQuery", "dependencies": ["package unit.spot.rebate;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTaxQuery", "description": "Unit tests for querying tax information using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTaxQuery", "primary_tested": ["Rebate.taxQuery(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tax query functionality using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/market/TestTime.java", "testclass_name": "TestTime", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTime", "description": "Unit test for testing the time endpoint of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTime", "primary_tested": ["Market.time()"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "Dispatcher", "MockWebServer", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the time functionality of the Market endpoint using a mock web server."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestBorrow.java", "testclass_name": "TestBorrow", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBorrow", "description": "Unit tests for the VIP loan borrowing functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "loanAccountId", "type": "static final long"}, {"name": "loanAmount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowWithoutParameters", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the borrowing functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testBorrow", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "loanAccountId", "type": "variable"}, {"name": "loanAmount", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the borrowing functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/viploans/TestRenew.java", "testclass_name": "TestRenew", "dependencies": ["package unit.spot.viploans;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRenew", "description": "Unit tests for the VIP loan renewal functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "orderId", "type": "static final long"}, {"name": "loanTerm", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRenewWithoutParameters", "primary_tested": ["VIPLoans.renew(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "SpotClient", "SpotClientImpl", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the renewal functionality of VIP loans without providing parameters, expecting a BinanceConnectorException."}, {"name": "testRenew", "primary_tested": ["VIPLoans.renew(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "orderId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the renewal functionality of VIP loans with provided parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestAvgPrice.java", "testclass_name": "TestAvgPrice", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAvgPrice", "description": "Unit tests for the average price functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAvgPriceWithoutSymbol", "primary_tested": ["Market.averagePrice(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the average price functionality without a symbol, expecting a BinanceConnectorException."}, {"name": "testAvgPrice", "primary_tested": ["Market.averagePrice(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the average price functionality with a symbol, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java", "testclass_name": "TestRsaPublicKey", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRsaPublicKey", "description": "Unit tests for verifying the RSA public key retrieval functionality in the GiftCard service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testVerify", "primary_tested": ["GiftCard.rsaPublicKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of the RSA public key from the GiftCard service."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java", "testclass_name": "TestLockedProductList", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedProductList", "description": "Unit tests for the Simple Earn Locked Product List functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSimpleEarnLockedProductList", "primary_tested": ["SimpleEarn.lockedProductList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the Simple Earn Locked Product List functionality by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java", "testclass_name": "TestFlexibleProductPosition", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleProductPosition", "description": "Unit tests for the flexible product position functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleProductPosition", "primary_tested": ["SimpleEarn.flexibleProductPosition(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible product position functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java", "testclass_name": "TestSimpleAccount", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSimpleAccount", "description": "Unit tests for the SimpleAccount functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSimpleAccount", "primary_tested": ["SimpleEarn.simpleAccount(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the simpleAccount functionality of the SimpleEarn created by the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java", "testclass_name": "TestFlexibleRedemptionRecord", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleRedemptionRecord", "description": "Unit tests for the flexible redemption record functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleRedemptionRecord", "primary_tested": ["SimpleEarn.flexibleRedemptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible redemption record functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java", "testclass_name": "TestCollateralRecord", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCollateralRecord", "description": "Unit tests for the collateral record functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralRecord", "primary_tested": ["SimpleEarn.collateralRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral record functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java", "testclass_name": "TestFlexibleSubscriptionRecord", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleSubscriptionRecord", "description": "Unit tests for the flexible subscription record functionality in the SimpleEarn module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionRecord", "primary_tested": ["SimpleEarn.flexibleSubscriptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription record functionality of the SimpleEarn module."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java", "testclass_name": "TestLockedRewardsHistory", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedRewardsHistory", "description": "Unit test for testing the locked rewards history functionality of the SimpleEarn module in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedRewardsHistory", "primary_tested": ["SimpleEarn.lockedRewardsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked rewards history functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java", "testclass_name": "TestSubscribeFlexibleProduct", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubscribeFlexibleProduct", "description": "Unit tests for subscribing to a flexible product using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeFlexibleProduct", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a flexible product using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java", "testclass_name": "TestFlexibleProductList", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleProductList", "description": "Unit tests for the flexible product list functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleProductList", "primary_tested": ["SimpleEarn.flexibleProductList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible product list functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java", "testclass_name": "TestAssetQuantityPrecision", "dependencies": ["package unit.spot.convert;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAssetQuantityPrecision", "description": "Unit tests for the asset quantity precision functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "recvWindow", "type": "long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetQuantityPrecisionWithoutParameters", "primary_tested": ["Convert.assetQuantityPrecision(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset quantity precision functionality without parameters."}, {"name": "testAssetQuantityPrecisionWithParameter", "primary_tested": ["Convert.assetQuantityPrecision(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset quantity precision functionality with a parameter."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java", "testclass_name": "TestLockedSubscriptionRecord", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedSubscriptionRecord", "description": "Unit tests for the locked subscription record functionality in the SimpleEarn module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionRecord", "primary_tested": ["SimpleEarn.lockedSubscriptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription record functionality of the SimpleEarn module."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestRedeemCode.java", "testclass_name": "TestRedeemCode", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemCode", "description": "Unit tests for redeeming gift card codes using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemCodeWithoutParameters", "primary_tested": ["GiftCard.redeemCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when redeeming a gift card code without providing parameters."}, {"name": "testRedeemCode", "primary_tested": ["GiftCard.redeemCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of a gift card code with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/market/TestDepth.java", "testclass_name": "TestDepth", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDepth", "description": "Unit tests for the depth functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "limit", "type": "int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepthWithoutSymbol", "primary_tested": ["Market.depth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the depth functionality without a symbol, expecting a BinanceConnectorException."}, {"name": "testDepth", "primary_tested": ["Market.depth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the depth functionality with a symbol (BNBUSDT), expecting a successful response."}, {"name": "testDepthWithFixedLimit", "primary_tested": ["Market.depth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the depth functionality with a symbol (BNBUSDT) and a fixed limit, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java", "testclass_name": "TestCreateDualTokensCode", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateDualTokensCode", "description": "Unit tests for creating dual tokens code using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "baseTokenAmount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateDualTokensCodeWithoutParameters", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of dual tokens code without parameters, expecting a BinanceConnectorException."}, {"name": "testCreateDualTokensCode", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "baseTokenAmount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of dual tokens code with specified parameters."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java", "testclass_name": "TestLockedRedemptionRecord", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedRedemptionRecord", "description": "Unit test for the locked redemption record functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedRedemptionRecord", "primary_tested": ["SimpleEarn.lockedRedemptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked redemption record functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestTokensLimit.java", "testclass_name": "TestTokensLimit", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTokensLimit", "description": "Unit tests for the tokens limit functionality in the GiftCard service of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTokensLimitWithoutParameters", "primary_tested": ["GiftCard.tokensLimit(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tokens limit functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTokensLimit", "primary_tested": ["GiftCard.tokensLimit(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tokens limit functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestCreateCode.java", "testclass_name": "TestCreateCode", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestCreateCode", "description": "Unit tests for the createCode method of the GiftCard service in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateCodeWithoutParameters", "primary_tested": ["GiftCard.createCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the createCode method of the GiftCard service without parameters, expecting a BinanceConnectorException."}, {"name": "testCreateCode", "primary_tested": ["GiftCard.createCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the createCode method of the GiftCard service with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/convert/TestQuoteInquiry.java", "testclass_name": "TestQuoteInquiry", "dependencies": ["package unit.spot.convert;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestQuoteInquiry", "description": "Unit tests for the quote inquiry functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "final double"}, {"name": "recvWindow", "type": "final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testQuoteInquiryWithoutParameters", "primary_tested": ["Convert.quoteInquiry(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the quote inquiry functionality of the SpotClientImpl without providing parameters, expecting a BinanceConnectorException."}, {"name": "testQuoteInquiryWithParametes", "primary_tested": ["Convert.quoteInquiry(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}, {"name": "recvWindow", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the quote inquiry functionality of the SpotClientImpl with provided parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/convert/TestAcceptQuote.java", "testclass_name": "TestAcceptQuote", "dependencies": ["package unit.spot.convert;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAcceptQuote", "description": "Unit tests for the acceptQuote functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAcceptQuoteWithoutParameters", "primary_tested": ["Convert.acceptQuote(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the acceptQuote method without parameters, expecting a BinanceConnectorException."}, {"name": "testAcceptQuoteWithParametes", "primary_tested": ["Convert.acceptQuote(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the acceptQuote method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/convert/TestTradeFlow.java", "testclass_name": "TestTradeFlow", "dependencies": ["package unit.spot.convert;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTradeFlow", "description": "Unit tests for the trade flow functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradeFlowWithoutParameters", "primary_tested": ["Convert.tradeFlow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trade flow functionality of the Convert class without parameters, expecting a BinanceConnectorException."}, {"name": "testTradeFlow", "primary_tested": ["Convert.tradeFlow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trade flow functionality of the Convert class with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java", "testclass_name": "TestLockedProductPosition", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedProductPosition", "description": "Unit tests for the locked product position functionality in the SimpleEarn module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedProductPosition", "primary_tested": ["SimpleEarn.lockedProductPosition(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked product position functionality of the SimpleEarn module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java", "testclass_name": "TestFuturesTransferHistory", "dependencies": ["package unit.spot.futures;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesTransferHistory", "description": "Tests for the futures transfer history functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransferHistoryWithoutParameters", "primary_tested": ["Futures.futuresTransferHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesTransferHistory", "primary_tested": ["Futures.futuresTransferHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java", "testclass_name": "TestSubscribeLockedProduct", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubscribeLockedProduct", "description": "Unit tests for subscribing to locked products using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeLockedProductWithoutParameters", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when subscribing to a locked product without providing necessary parameters."}, {"name": "testSubscribeLockedProduct", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a locked product with necessary parameters provided."}]}, {"file_path": "src/test/java/unit/spot/giftcard/TestVerify.java", "testclass_name": "TestVerify", "dependencies": ["package unit.spot.giftcard;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestVerify", "description": "Unit tests for verifying gift card functionality using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testVerifyWithoutParameters", "primary_tested": ["GiftCard.verify(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the verification functionality of the GiftCard without parameters, expecting a BinanceConnectorException."}, {"name": "testVerify", "primary_tested": ["GiftCard.verify(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the verification functionality of the GiftCard with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java", "testclass_name": "TestSetFlexibleAutoSubscribe", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSetFlexibleAutoSubscribe", "description": "Unit tests for setting flexible auto-subscribe functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetFlexibleAutoSubscribeWithoutParameters", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the setFlexibleAutoSubscribe method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testSetFlexibleAutoSubscribe", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful setting of flexible auto-subscribe with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java", "testclass_name": "TestFuturesOrderBookHistory", "dependencies": ["package unit.spot.futures;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesOrderBookHistory", "description": "Tests for the Futures Order Book History functionality using a mock web server.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final Long"}, {"name": "endTime", "type": "static final Long"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestFuturesOrderBookHistoryWithoutParameters", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the Futures Order Book History functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testTestFuturesOrderBookHistory", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the Futures Order Book History functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java", "testclass_name": "TestRedeemLockedProduct", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemLockedProduct", "description": "Unit tests for redeeming locked products using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemLockedProductWithoutParameters", "primary_tested": ["SimpleEarn.redeemLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when redeeming a locked product without required parameters."}, {"name": "testRedeemLockedProduct", "primary_tested": ["SimpleEarn.redeemLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of a locked product with the required parameters."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java", "testclass_name": "TestFlexibleRewardsHistory", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleRewardsHistory", "description": "Tests for the flexible rewards history functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleRewardsHistoryWithoutParameters", "primary_tested": ["SimpleEarn.flexibleRewardsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible rewards history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleRewardsHistory", "primary_tested": ["SimpleEarn.flexibleRewardsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible rewards history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java", "testclass_name": "TestLockedPersonalLeftQuota", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedPersonalLeftQuota", "description": "Unit tests for the locked personal left quota functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedPersonalLeftQuotaWithoutParameters", "primary_tested": ["SimpleEarn.lockedPersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the locked personal left quota method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testLockedPersonalLeftQuota", "primary_tested": ["SimpleEarn.lockedPersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked personal left quota method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java", "testclass_name": "TestRedeemFlexibleProduct", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemFlexibleProduct", "description": "Unit tests for redeeming flexible products using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemFlexibleProductWithoutParameters", "primary_tested": ["SimpleEarn.redeemFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when redeeming a flexible product without required parameters."}, {"name": "testRedeemFlexibleProduct", "primary_tested": ["SimpleEarn.redeemFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of a flexible product with the required parameters."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestBlvtInfo.java", "testclass_name": "TestBlvtInfo", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBlvtInfo", "description": "Unit tests for BLVT (Bitcoin Leveraged Token) info retrieval using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBlvtInfo", "primary_tested": ["Blvt.blvtInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of BLVT (Bitcoin Leveraged Token) info using the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java", "testclass_name": "TestFlexibleSubscriptionPreview", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexibleSubscriptionPreview", "description": "Unit tests for the flexible subscription preview functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionPreviewWithoutParameters", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleSubscriptionPreview", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java", "testclass_name": "TestLockedSubscriptionPreview", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestLockedSubscriptionPreview", "description": "Unit tests for the locked subscription preview functionality of the SimpleEarn module in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionPreviewWithoutParameters", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription preview functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testLockedSubscriptionPreview", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription preview functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java", "testclass_name": "TestSubscriptionRecord", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubscriptionRecord", "description": "Unit tests for the subscription record functionality of the BLVT (Basket Leveraged Token) service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscriptionRecord", "primary_tested": ["Blvt.subscriptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription record functionality of the BLVT service."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestUserLimit.java", "testclass_name": "TestUserLimit", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestUserLimit", "description": "Unit tests for the user limit functionality in the BLVT module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUserLimit", "primary_tested": ["Blvt.userLimit(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the user limit functionality of the BLVT module in the Binance connector client."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestRedeemRecord.java", "testclass_name": "TestRedeemRecord", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeemRecord", "description": "Unit tests for redeem record functionality in the BLVT module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemRecord", "primary_tested": ["Blvt.redeemRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redeem record functionality of the BLVT module in the SpotClient."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java", "testclass_name": "TestSetLockedAutoSubscribe", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSetLockedAutoSubscribe", "description": "Unit tests for setting locked auto-subscribe functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetLockedAutoSubscribeWithoutParameters", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the setLockedAutoSubscribe method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testSetLockedAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful setting of locked auto-subscribe with provided parameters."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java", "testclass_name": "TestFlexiblePersonalLeftQuota", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFlexiblePersonalLeftQuota", "description": "Unit tests for the flexible personal left quota functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexiblePersonalLeftQuotaWithoutParameters", "primary_tested": ["SimpleEarn.flexiblePersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible personal left quota functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexiblePersonalLeftQuota", "primary_tested": ["SimpleEarn.flexiblePersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible personal left quota functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestKlines.java", "testclass_name": "TestKlines", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestKlines", "description": "Unit tests for the klines functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "limit", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testKlinesWithoutSymbol", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without a symbol parameter, expecting a BinanceConnectorException."}, {"name": "testKlinesWithoutInterval", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without an interval parameter, expecting a BinanceConnectorException."}, {"name": "testKlines", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality with both symbol and interval parameters, expecting a successful response."}, {"name": "testKlinesWithParameters", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality with additional parameters (limit, startTime, endTime), expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/simpleearn/TestRateHistory.java", "testclass_name": "TestRateHistory", "dependencies": ["package unit.spot.simpleearn;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRateHistory", "description": "Unit tests for the rate history functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRateHistoryWithoutParameters", "primary_tested": ["SimpleEarn.rateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the rate history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testRateHistory", "primary_tested": ["SimpleEarn.rateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the rate history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestUIKlines.java", "testclass_name": "TestUIKlines", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestUIKlines", "description": "Unit tests for the UIKlines endpoint of the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "limit", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUIKlinesWithoutSymbol", "primary_tested": ["Market.uiKlines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the UIKlines endpoint without a symbol parameter, expecting a BinanceConnectorException."}, {"name": "testUIKlinesWithoutInterval", "primary_tested": ["Market.uiKlines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the UIKlines endpoint without an interval parameter, expecting a BinanceConnectorException."}, {"name": "testUIKlines", "primary_tested": ["Market.uiKlines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the UIKlines endpoint with both symbol and interval parameters, expecting a successful response."}, {"name": "testUIKlinesWithParameters", "primary_tested": ["Market.uiKlines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the UIKlines endpoint with additional parameters (limit, startTime, endTime), expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestTickerPrice.java", "testclass_name": "TestTickerPrice", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTickerPrice", "description": "Unit tests for the Ticker Price functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTickerPriceWithoutSymbol", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker price functionality without a symbol parameter."}, {"name": "testTickerPriceWithSymbol", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker price functionality with a symbol parameter."}, {"name": "testTickerPriceWithMultipleSymbol", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "ArrayList"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker price functionality with multiple symbol parameters."}, {"name": "testTicker24HWithInvalidType", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker price functionality with an invalid type for symbols parameter, expecting a BinanceConnectorException."}, {"name": "testTicker24HWithDoubleParameter", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker price functionality with double parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java", "testclass_name": "TestListUserOrderHistory", "dependencies": ["package unit.spot.c2c;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestListUserOrderHistory", "description": "Unit tests for the listUserOrderHistory method in the C2C module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testListUserOrderHistoryWithoutParameters", "primary_tested": ["C2C.listUserOrderHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the listUserOrderHistory method without parameters, expecting a BinanceConnectorException."}, {"name": "testListUserOrderHistory", "primary_tested": ["C2C.listUserOrderHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the listUserOrderHistory method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "testclass_name": "TestTradingDayTicker", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTradingDayTicker", "description": "Unit tests for the trading day ticker functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradingDayTicker", "primary_tested": ["Market.tradingDayTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trading day ticker functionality with a single symbol."}, {"name": "testTradingDayTickerWithMultipleSymbol", "primary_tested": ["Market.tradingDayTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trading day ticker functionality with multiple symbols."}, {"name": "testTradingDayTickerWithoutParameters", "primary_tested": ["Market.tradingDayTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trading day ticker functionality without parameters, expecting an exception."}, {"name": "testTradingDayTickerWithInvalidType", "primary_tested": ["Market.tradingDayTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trading day ticker functionality with an invalid type, expecting an exception."}, {"name": "testTradingDayTickerWithDoubleParameter", "primary_tested": ["Market.tradingDayTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trading day ticker functionality with double parameters, expecting an exception."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestRedeem.java", "testclass_name": "TestRedeem", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestRedeem", "description": "Unit tests for the redeem functionality of the BLVT (Basket Leveraged Token) in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemWithoutParameters", "primary_tested": ["Blvt.redeem(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "Dispatcher", "MockWebServer"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redeem functionality of the BLVT without providing parameters, expecting a BinanceConnectorException."}, {"name": "testRedeem", "primary_tested": ["Blvt.redeem(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "Dispatcher", "MockWebServer"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redeem functionality of the BLVT with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestBookTicker.java", "testclass_name": "TestBookTicker", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestBookTicker", "description": "Unit tests for the book ticker functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBookTickerWithoutSymbol", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the book ticker functionality without a symbol parameter."}, {"name": "testBookTickerWithSymbol", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the book ticker functionality with a symbol parameter."}, {"name": "testBookTickerWithMultipleSymbol", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "ArrayList"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the book ticker functionality with multiple symbol parameters."}, {"name": "testTicker24HWithInvalidType", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the book ticker functionality with an invalid type for symbols parameter, expecting an exception."}, {"name": "testTicker24HWithDoubleParameter", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the book ticker functionality with double parameters, expecting an exception."}]}, {"file_path": "src/test/java/unit/spot/market/TestAggTrades.java", "testclass_name": "TestAggTrades", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestAggTrades", "description": "Unit tests for the aggregation trades functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "startTime", "type": "static final long"}, {"name": "endTime", "type": "static final long"}, {"name": "limit", "type": "static final int"}, {"name": "fromId", "type": "static final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAggTradesWithoutSymbol", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the aggTrades method when no symbol is provided, expecting a BinanceConnectorException."}, {"name": "testAggTrades", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggTrades method with a valid symbol parameter."}, {"name": "testTradesWithLimit", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "limit", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggTrades method with a valid symbol and limit parameter."}, {"name": "testTradesWithFromId", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "fromId", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggTrades method with a valid symbol and fromId parameter."}, {"name": "testTradesWithTimestamp", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "startTime", "type": "variable"}, {"name": "endTime", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggTrades method with a valid symbol, startTime, and endTime parameters."}]}, {"file_path": "src/test/java/unit/spot/blvt/TestSubscribe.java", "testclass_name": "TestSubscribe", "dependencies": ["package unit.spot.blvt;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSubscribe", "description": "Unit tests for the BLVT subscription functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cost", "type": "final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeWithoutParameters", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BLVT subscription functionality without providing parameters, expecting a BinanceConnectorException."}, {"name": "testSubscribe", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cost", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BLVT subscription functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestTicker24H.java", "testclass_name": "TestTicker24H", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTicker24H", "description": "Unit tests for the 24-hour ticker functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testTicker24HWithoutSymbol", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality without a symbol parameter."}, {"name": "testTicker24HWithSymbol", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with a symbol parameter."}, {"name": "testTicker24HWithMultipleSymbol", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "Map", "LinkedHashMap", "ArrayList"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with multiple symbol parameters."}, {"name": "testTicker24HWithInvalidType", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with an invalid type parameter, expecting an exception."}, {"name": "testTicker24HWithDoubleParameter", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with double parameters, expecting an exception."}]}, {"file_path": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "testclass_name": "TestHistoricalTrades", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHistoricalTrades", "description": "Unit tests for historical trades functionality using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "limit", "type": "final int"}, {"name": "fromId", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradesWithoutSymbol", "primary_tested": ["Market.historicalTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the historical trades functionality without a symbol, expecting a BinanceConnectorException."}, {"name": "testHistoricalTradesWithoutMockData", "primary_tested": ["Market.historicalTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the historical trades functionality without mock data, expecting a BinanceConnectorException."}, {"name": "testHistoricalTrades", "primary_tested": ["Market.historicalTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the historical trades functionality with a symbol, expecting a successful response."}, {"name": "testTradesWithParameters", "primary_tested": ["Market.historicalTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "limit", "type": "variable"}, {"name": "fromId", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the historical trades functionality with parameters (symbol, limit, fromId), expecting a successful response."}]}, {"file_path": "src/test/java/unit/spot/market/TestTicker.java", "testclass_name": "TestTicker", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestTicker", "description": "Unit tests for the Ticker functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTicker", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with a single symbol."}, {"name": "testTickerWithMultipleSymbol", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with multiple symbols."}, {"name": "testTickerWithoutParameters", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality without any parameters, expecting an exception."}, {"name": "testTickerWithInvalidType", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with an invalid type, expecting an exception."}, {"name": "testTickerWithDoubleParameter", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with double parameters, expecting an exception."}]}, {"file_path": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "testclass_name": "TestHttpProxy", "dependencies": ["package unit.spot.proxy;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.net.InetSocketAddress;", "import java.net.Proxy;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestHttpProxy", "description": "Unit tests for HTTP proxy functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "proxyPort", "type": "static final Integer"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testHttpProxyWithRefusedConnection", "primary_tested": ["SpotClientImpl.createMarket()"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the SpotClientImpl when the proxy connection is refused."}, {"name": "testHttpProxyWithUnknownHost", "primary_tested": ["SpotClientImpl.createMarket()"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the SpotClientImpl when the proxy host is unknown."}, {"name": "testNullProxyToWithProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from no proxy to using a proxy in the SpotClientImpl."}, {"name": "testNullProxyToNoProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "ProxyAuth", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from no proxy to using Proxy.NO_PROXY in the SpotClientImpl."}, {"name": "testWithProxyToNullProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)", "SpotClientImpl.unsetProxy()"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from using a proxy to no proxy in the SpotClientImpl."}, {"name": "testWithProxyToNoProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from using a proxy to Proxy.NO_PROXY in the SpotClientImpl."}, {"name": "testNoProxyToNullProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)", "SpotClientImpl.unsetProxy()"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "ProxyAuth", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from Proxy.NO_PROXY to no proxy in the SpotClientImpl."}, {"name": "testNoProxyToWithProxy", "primary_tested": ["SpotClientImpl.createMarket()"], "associated_methods": ["SpotClientImpl.setProxy(ProxyAuth)"], "external_dependencies": {"modules": ["SpotClientImpl", "Proxy", "InetSocketAddress", "ProxyAuth", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "Dispatcher"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "proxyPort", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transition from Proxy.NO_PROXY to using a proxy in the SpotClientImpl."}]}, {"file_path": "src/test/java/unit/spot/market/TestExchangeInfo.java", "testclass_name": "TestExchangeInfo", "dependencies": ["package unit.spot.market;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestExchangeInfo", "description": "Unit tests for the exchange information functionality of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExchangeInfo", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with default parameters."}, {"name": "testExchangeInfoWithOneSymbol", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with one symbol parameter."}, {"name": "testExchangeInfoWithMultipleSymbol", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with multiple symbol parameters."}, {"name": "testExchangeInfoWithOnePermission", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with one permission parameter."}, {"name": "testExchangeInfoWithMultiplePermissions", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with multiple permission parameters."}, {"name": "testExchangeInfoWithInvalidType", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with invalid type for symbols parameter, expecting an exception."}, {"name": "testExchangeInfoPermissionsWithInvalidType", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with invalid type for permissions parameter, expecting an exception."}, {"name": "testExchangeInfoWithDoubleParameter", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with both symbols and symbol parameters, expecting an exception."}, {"name": "testExchangeInfoWithSymbolAndPermissionsParameters", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchange information functionality with both symbol and permissions parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "testclass_name": "ParameterChecker_checkRequiredParameterTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkRequiredParameterTest", "description": "Unit tests for the ParameterChecker.checkRequiredParameter method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckRequiredParameter_ParameterPresent", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method does not throw an exception when the required parameter is present."}, {"name": "testCheckRequiredParameter_ParameterMissing", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method throws a BinanceConnectorException when the required parameter is missing."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "testclass_name": "ParameterChecker_checkParameterTypeTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkParameterTypeTest", "description": "Unit tests for the ParameterChecker.checkParameterType method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCheckParameterTypeValid", "primary_tested": ["ParameterChecker.checkParameterType(String,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the checkParameterType method with a valid string parameter."}, {"name": "testCheckParameterTypeInvalidType", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the checkParameterType method with an invalid type (int instead of String), expecting a BinanceConnectorException."}, {"name": "testCheckParameterTypeEmptyString", "primary_tested": ["ParameterChecker.checkParameterType(String,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the checkParameterType method with an empty string, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "testclass_name": "ParameterChecker_processIdTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_processIdTest", "description": "Unit tests for the ParameterChecker.processId method, covering various input scenarios.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testProcessId_ValidInteger", "primary_tested": ["ParameterChecker.processId(int,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with a valid integer input."}, {"name": "testProcessId_ValidString", "primary_tested": ["ParameterChecker.processId(String,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with a valid string input."}, {"name": "testProcessId_NullId", "primary_tested": ["ParameterChecker.processId(null,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with a null input."}, {"name": "testProcessId_EmptyString", "primary_tested": ["ParameterChecker.processId(String,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with an empty string input."}, {"name": "testProcessId_InvalidType", "primary_tested": ["ParameterChecker.processId(Object,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the processId method with an invalid type input, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java", "testclass_name": "VIPLoans_borrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_borrowTest", "description": "Unit tests for the VIPLoans borrow functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowSuccess", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "VIPLoans"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful borrowing functionality of the VIPLoans."}, {"name": "testBorrowMissingRequiredParameter", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "VIPLoans", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the VIPLoans borrow functionality."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java", "testclass_name": "UserData_closeIsolatedMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_closeIsolatedMarginListenKeyTest", "description": "Tests for closing isolated margin listen key functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseIsolatedMarginListenKeyWithoutParameters", "primary_tested": ["UserData.closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when closing isolated margin listen key without parameters."}, {"name": "testCloseIsolatedMarginListenKey", "primary_tested": ["UserData.closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful closing of isolated margin listen key with parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "testclass_name": "ParameterChecker_checkOnlyOneOfParametersTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import static org.junit.Assert.*;"], "name": "ParameterChecker_checkOnlyOneOfParametersTest", "description": "Unit tests for the ParameterChecker.checkOnlyOneOfParameters method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckOnlyOneOfParameters_SingleParameterPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no exception is thrown when only one parameter is present."}, {"name": "testCheckOnlyOneOfParameters_MultipleParametersPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an exception is thrown when multiple parameters are present."}, {"name": "testCheckOnlyOneOfParameters_NoParametersPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no exception is thrown when no parameters are present."}, {"name": "testCheckOnlyOneOfParameters_NullParams", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no exception is thrown when the parameters object is null."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_lockedSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedSubscriptionPreviewTest", "description": "Tests for the locked subscription preview functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionPreview", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription preview functionality with required parameters."}, {"name": "testLockedSubscriptionPreviewWithoutRequiredParameters", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "SimpleEarn"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the locked subscription preview functionality when required parameters are missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java", "testclass_name": "Trade_newOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_newOrderTest", "description": "Unit tests for the newOrder method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testNewOrderSuccess", "primary_tested": ["Trade.newOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of a new order."}, {"name": "testNewOrderMissingParameter", "primary_tested": ["Trade.newOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a missing parameter in the new order request, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java", "testclass_name": "Wallet_delegationHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_delegationHistoryTest", "description": "Tests for the delegation history functionality in the Wallet module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDelegationHistory", "primary_tested": ["Wallet.delegationHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delegation history functionality with all required parameters provided."}, {"name": "testDelegationHistoryMissingParameter", "primary_tested": ["Wallet.delegationHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delegation history functionality when a required parameter (endTime) is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java", "testclass_name": "CryptoLoans_loanRepayTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanRepayTest", "description": "Unit tests for the loan repayment functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanRepayWithoutParameters", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repayment functionality without providing necessary parameters, expecting a BinanceConnectorException."}, {"name": "testLoanRepayWithValidParameters", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repayment functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "testclass_name": "ParameterChecker_checkOneOfParametersRequiredTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import java.util.Arrays;"], "name": "ParameterChecker_checkOneOfParametersRequiredTest", "description": "Unit tests for the ParameterChecker.checkOneOfParametersRequired method, which checks if at least one of the specified parameters is present in a JSONObject.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckOneOfParametersRequired_AllParametersMissing", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["JSONObject", "BinanceConnectorException", "ParameterChecker", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that a BinanceConnectorException is thrown when none of the required parameters are present in the JSONObject."}, {"name": "testCheckOneOfParametersRequired_OneParameterPresent", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "description": "Tests that no exception is thrown when at least one of the required parameters is present in the JSONObject."}, {"name": "testCheckOneOfParametersRequired_NullParams", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["BinanceConnectorException", "ParameterChecker", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that a BinanceConnectorException is thrown when the provided JSONObject is null."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java", "testclass_name": "Mining_statsticsListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_statsticsListTest", "description": "Tests for the Mining statistics list functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testStatsticsListWithoutParameters", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "BinanceConnectorException", "Mining", "Map", "LinkedHashMap", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the statsticsList method when called without parameters, expecting a BinanceConnectorException."}, {"name": "testStatsticsListWithValidParameters", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Mining", "Map", "LinkedHashMap", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the statsticsList method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java", "testclass_name": "Futures_futuresOrderBookHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Futures_futuresOrderBookHistoryTest", "description": "Unit tests for the Futures class's futuresOrderBookHistory method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futures", "type": "Futures"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesOrderBookHistory", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Futures", "LinkedHashMap", "Dispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futures", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futuresOrderBookHistory method with all required parameters."}, {"name": "testFuturesOrderBookHistoryMissingParameter", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futuresOrderBookHistory method when a required parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java", "testclass_name": "Trade_ocoOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_ocoOrderTest", "description": "Unit tests for the OCO order functionality in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOcoOrderSuccess", "primary_tested": ["Trade.ocoOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Trade", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of an OCO order."}, {"name": "testOcoOrderMissingRequiredParameter", "primary_tested": ["Trade.ocoOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a BinanceConnectorException when a required parameter is missing for an OCO order."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java", "testclass_name": "Trade_testNewOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_testNewOrderTest", "description": "Tests for the Trade class's new order functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestNewOrderSuccess", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Trade", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of a new order with the Trade class."}, {"name": "testTestNewOrderMissingParameters", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing parameters when creating a new order with the Trade class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "testclass_name": "CryptoLoans_loanAdjustLTVTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanAdjustLTVTest", "description": "Unit tests for the loanAdjustLTV method in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAdjustLTVWithoutParameters", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTV method without parameters, expecting a BinanceConnectorException."}, {"name": "testLoanAdjustLTVWithValidParameters", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTV method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java", "testclass_name": "Mining_earningListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_earningListTest", "description": "Tests for the earning list functionality in the Mining module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEarningListWithoutParameters", "primary_tested": ["Mining.earningList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the earning list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testEarningListWithParameters", "primary_tested": ["Mining.earningList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the earning list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java", "testclass_name": "TestEd25519SignatureGenerator", "dependencies": ["package unit.signature;", "import static org.junit.Assert.assertEquals;", "import java.io.FileNotFoundException;", "import java.io.IOException;", "import org.junit.Test;", "import com.binance.connector.client.utils.signaturegenerator.Ed25519SignatureGenerator;"], "name": "TestEd25519SignatureGenerator", "description": "Unit tests for the Ed25519SignatureGenerator class, specifically focusing on the unprotected signing functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnprotectedSigning", "primary_tested": ["Ed25519SignatureGenerator.getSignature(String)"], "external_dependencies": {"modules": ["Ed25519SignatureGenerator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unprotected signing functionality of the Ed25519SignatureGenerator by comparing the generated signature with an expected signature."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "testclass_name": "Mining_hashrateResaleRequestTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ParameterChecker;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_hashrateResaleRequestTest", "description": "Unit tests for the hashrate resale request functionality in the Mining class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "mining", "type": "Mining"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleRequestSuccess", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Mining", "MockData", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful execution of the hashrate resale request with all required parameters."}, {"name": "testHashrateResaleRequestMissingParameter", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "external_dependencies": {"modules": ["Mining", "BinanceConnectorException"], "class_members": [{"name": "mining", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a missing required parameter in the hashrate resale request, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "testclass_name": "SubAccount_subAccountToSubAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_subAccountToSubAccountTest", "description": "Tests for the subAccountToSubAccount method in the SubAccount class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubAccountToSubAccountWithoutParameters", "primary_tested": ["SubAccount.subAccountToSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "SubAccount", "LinkedHashMap", "Map", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "subAccount", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subAccountToSubAccount method without parameters, expecting a BinanceConnectorException."}, {"name": "testSubAccountToSubAccountWithValidParameters", "primary_tested": ["SubAccount.subAccountToSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "LinkedHashMap", "Map", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "subAccount", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subAccountToSubAccount method with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java", "testclass_name": "SubAccount_getIpRestrictionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_getIpRestrictionTest", "description": "Tests for the IP restriction functionality of the SubAccount API in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetIpRestriction", "primary_tested": ["SubAccount.getIpRestriction(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the IP restriction retrieval functionality for a sub-account with valid parameters."}, {"name": "testGetIpRestrictionWithoutParameters", "primary_tested": ["SubAccount.getIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockData"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the IP restriction retrieval functionality when no parameters are provided, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestDepositHistory.java", "testclass_name": "TestDepositHistory", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestDepositHistory", "description": "Tests for the deposit history functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositHistWithoutParameters", "primary_tested": ["SubAccount.depositHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit history functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testDepositHist", "primary_tested": ["SubAccount.depositHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "UrlBuilder", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit history functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java", "testclass_name": "SubAccount_marginTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_marginTransferTest", "description": "Unit tests for the margin transfer functionality of the SubAccount class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testMarginTransferWithoutParameters", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality of the SubAccount class without providing any parameters, expecting a BinanceConnectorException."}, {"name": "testMarginTransferWithValidParameters", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality of the SubAccount class with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java", "testclass_name": "Mining_bonusListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_bonusListTest", "description": "Tests for the bonus list functionality in the Mining module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBonusListWithoutParameters", "primary_tested": ["Mining.bonusList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bonus list functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testBonusListWithParameters", "primary_tested": ["Mining.bonusList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bonus list functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/TestJSONParser.java", "testclass_name": "TestJSONParser", "dependencies": ["package unit;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONException;", "import org.junit.Test;", "import com.binance.connector.client.utils.JSONParser;"], "name": "TestJSONParser", "description": "Unit tests for JSONParser utility methods.", "class_members": {"variables": [{"name": "mockJson", "type": "final String"}, {"name": "value2", "type": "final int"}]}, "test_cases": [{"name": "testGetJSONStringValue", "primary_tested": ["JSONParser.getJSONStringValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests the retrieval of a string value from a JSON string using JSONParser."}, {"name": "testGetJSONIntValue", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}, {"name": "value2", "type": "variable"}]}, "category": "unit", "description": "Tests the retrieval of an integer value from a JSON string using JSONParser."}, {"name": "testGetJSONStringValueThrowException", "primary_tested": ["JSONParser.getJSONStringValue(String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONException"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests that JSONParser throws a JSONException when attempting to retrieve a string value using an invalid key."}, {"name": "testGetJSONIntValueThrowException", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONException"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests that JSONParser throws a JSONException when attempting to retrieve an integer value using an invalid key."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "testclass_name": "Futures_futuresTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Futures_futuresTransferTest", "description": "Unit tests for the futures transfer functionality in the Futures class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futures", "type": "Futures"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransferSuccess", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Futures", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futures", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful execution of the futures transfer functionality."}, {"name": "testFuturesTransferMissingRequiredParameter", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the futures transfer functionality."}, {"name": "testFuturesTransferInvalidParameterType", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid parameter types in the futures transfer functionality."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "testclass_name": "SubAccount_managedSubWithdrawTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubWithdrawTest", "description": "Tests for the managed sub-account withdrawal functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubWithdrawWithoutParameters", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubWithdrawWithValidParameters", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "testclass_name": "CryptoLoans_flexibleLoanBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanBorrowTest", "description": "Unit tests for the flexible loan borrow functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanBorrowWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanBorrowWithValidParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java", "testclass_name": "Blvt_subscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Blvt_subscribeTest", "description": "Unit tests for the Blvt subscribe functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "blvt", "type": "Blvt"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeSuccess", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Blvt", "HmacSignatureGenerator", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a BLVT with valid parameters."}, {"name": "testSubscribeMissingTokenName", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "LinkedHashMap", "Blvt"], "class_members": [{"name": "blvt", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a BLVT with a missing tokenName parameter, expecting a BinanceConnectorException."}, {"name": "testSubscribeMissingCost", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "LinkedHashMap", "Blvt"], "class_members": [{"name": "blvt", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a BLVT with a missing cost parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java", "testclass_name": "AutoInvest_targetAssetRoiListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_targetAssetRoiListTest", "description": "Tests for the target asset ROI list functionality in the AutoInvest module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTargetAssetRoiList", "primary_tested": ["AutoInvest.targetAssetRoiList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset ROI list functionality with valid parameters."}, {"name": "testTargetAssetRoiListMissingParameters", "primary_tested": ["AutoInvest.targetAssetRoiList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset ROI list functionality when required parameters are missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "testclass_name": "SubAccount_universalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_universalTransferTest", "description": "Unit tests for the universal transfer functionality of the SubAccount class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}, {"name": "requestHandler", "type": "RequestHandler"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUniversalTransferSuccess", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SubAccount", "RequestHandler", "HmacSignatureGenerator", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subAccount", "type": "variable"}, {"name": "requestHandler", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful universal transfer functionality of the SubAccount class."}, {"name": "testUniversalTransferMissingRequiredParameter", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "LinkedHashMap", "Map", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the universal transfer functionality of the SubAccount class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java", "testclass_name": "SimpleEarn_subscribeLockedProductTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_subscribeLockedProductTest", "description": "Unit tests for subscribing to locked products in SimpleEarn.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeLockedProductSuccess", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SimpleEarn", "LinkedHashMap", "Dispatcher", "MockData", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a locked product in SimpleEarn."}, {"name": "testSubscribeLockedProductMissingProjectId", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when subscribing to a locked product in SimpleEarn with a missing projectId."}, {"name": "testSubscribeLockedProductMissingAmount", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when subscribing to a locked product in SimpleEarn with a missing amount."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "testclass_name": "CryptoLoans_flexibleLoanRepayTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanRepayTest", "description": "Unit tests for the flexible loan repay functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanRepayWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan repay functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanRepayWithValidParameters", "primary_tested": ["CryptoLoans.flexibleLoanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan repay functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendIsolatedMarginListenKeyTest.java", "testclass_name": "UserData_extendIsolatedMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_extendIsolatedMarginListenKeyTest", "description": "Unit tests for extending isolated margin listen key functionality in UserData class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "userData", "type": "UserData"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendIsolatedMarginListenKey", "primary_tested": ["UserData.extendIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "UserData", "LinkedHashMap", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "userData", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of extending isolated margin listen key with valid parameters."}, {"name": "testExtendIsolatedMarginListenKeyWithoutParameters", "primary_tested": ["UserData.extendIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["UserData", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "userData", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending isolated margin listen key without providing necessary parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleSubscriptionPreviewTest", "description": "Unit tests for the flexible subscription preview functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionPreview", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality with valid parameters."}, {"name": "testFlexibleSubscriptionPreviewMissingProductId", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality when the productId parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFlexibleSubscriptionPreviewMissingAmount", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality when the amount parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "testclass_name": "SimpleEarn_setLockedAutoSubscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_setLockedAutoSubscribeTest", "description": "Test suite for the setLockedAutoSubscribe method in the SimpleEarn module of the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetLockedAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the setLockedAutoSubscribe method with valid parameters."}, {"name": "testSetLockedAutoSubscribeMissingPositionId", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the setLockedAutoSubscribe method when the positionId parameter is missing, expecting a BinanceConnectorException."}, {"name": "testSetLockedAutoSubscribeMissingAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the setLockedAutoSubscribe method when the autoSubscribe parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "testclass_name": "SubAccount_enableLeverageTokenTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_enableLeverageTokenTest", "description": "Tests for enabling leverage token for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableLeverageToken", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of enabling leverage token for a sub-account with valid parameters."}, {"name": "testEnableLeverageTokenMissingEmail", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when the 'email' parameter is missing while enabling leverage token for a sub-account."}, {"name": "testEnableLeverageTokenMissingEnableBlvt", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when the 'enableBlvt' parameter is missing while enabling leverage token for a sub-account."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "testclass_name": "Wallet_cloudMiningHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_cloudMiningHistoryTest", "description": "Tests for the cloud mining history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloudMiningHistory", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality with valid parameters."}, {"name": "testCloudMiningHistoryMissingStartTime", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality when the startTime parameter is missing, expecting a BinanceConnectorException."}, {"name": "testCloudMiningHistoryMissingEndTime", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality when the endTime parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferHistoryTest.java", "testclass_name": "Futures_futuresTransferHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Futures_futuresTransferHistoryTest", "description": "Unit tests for the futures transfer history functionality in the Futures class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futures", "type": "Futures"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransferHistory", "primary_tested": ["Futures.futuresTransferHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Futures", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futures", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer history functionality with valid parameters."}, {"name": "testFuturesTransferHistoryMissingAsset", "primary_tested": ["Futures.futuresTransferHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer history functionality when the 'asset' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesTransferHistoryMissingStartTime", "primary_tested": ["Futures.futuresTransferHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer history functionality when the 'startTime' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java", "testclass_name": "Market_ticker24HTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_ticker24HTest", "description": "Tests for the 24-hour ticker functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTicker24HWithSymbol", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with a single symbol."}, {"name": "testTicker24HWithSymbols", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with multiple symbols."}, {"name": "testTicker24HWithDoubleParameter", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when both 'symbol' and 'symbols' parameters are provided."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java", "testclass_name": "Wallet_universalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_universalTransferTest", "description": "Tests for the universal transfer functionality in the Wallet class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "wallet", "type": "Wallet"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUniversalTransferSuccess", "primary_tested": ["Wallet.universalTransfer(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Wallet", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "wallet", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful universal transfer functionality in the Wallet class."}, {"name": "testUniversalTransferMissingRequiredParameter", "primary_tested": ["Wallet.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Wallet", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "wallet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the universal transfer functionality in the Wallet class."}]}, {"file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java", "testclass_name": "TestFuturesAccountV2", "dependencies": ["package unit.spot.subaccount;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestFuturesAccountV2", "description": "Unit tests for the futures account functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futuresType", "type": "final int"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountWithoutParameters", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesAccount", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futuresType", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/unit/signature/TestRsaSignatureGenerator.java", "testclass_name": "TestRsaSignatureGenerator", "dependencies": ["package unit.signature;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;", "import com.binance.connector.client.utils.signaturegenerator.RsaSignatureGenerator;"], "name": "TestRsaSignatureGenerator", "description": "Unit tests for the RsaSignatureGenerator class, focusing on signature generation with both unprotected and protected private keys.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnprotectedSigning", "primary_tested": ["RsaSignatureGenerator.getSignature(String)"], "external_dependencies": {"modules": ["RsaSignatureGenerator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a signature using an unprotected private key."}, {"name": "testProtectedSigning", "primary_tested": ["RsaSignatureGenerator.getSignature(String)"], "external_dependencies": {"modules": ["RsaSignatureGenerator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a signature using a protected private key with a password."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_detailMinerListTest.java", "testclass_name": "Mining_detailMinerListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_detailMinerListTest", "description": "Unit tests for the detailMinerList method in the Mining class, focusing on various scenarios including successful execution and missing required parameters.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "mining", "type": "Mining"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testDetailMinerListSuccess", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Mining"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful execution of the detailMinerList method with all required parameters provided."}, {"name": "testDetailMinerListMissingAlgo", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "Mining"], "class_members": [{"name": "mining", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the detailMinerList method when the 'algo' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testDetailMinerListMissingUserName", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "Mining"], "class_members": [{"name": "mining", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the detailMinerList method when the 'userName' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testDetailMinerListMissingWorkerName", "primary_tested": ["Mining.detailMinerList(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "Mining"], "class_members": [{"name": "mining", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the detailMinerList method when the 'workerName' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/TestResponseHandler.java", "testclass_name": "TestResponseHandler", "dependencies": ["package unit;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import static org.junit.Assert.assertTrue;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceClientException;", "import com.binance.connector.client.exceptions.BinanceServerException;", "import com.binance.connector.client.utils.ResponseHandler;", "import okhttp3.Request;", "import okhttp3.mockwebserver.MockResponse;", "import okhttp3.mockwebserver.MockWebServer;"], "name": "TestResponseHandler", "description": "Unit tests for the ResponseHandler class, focusing on handling different HTTP responses and error scenarios.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "request", "type": "Request"}, {"name": "VALID_RESPONSE", "type": "static final String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHandleResponse", "primary_tested": ["ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"], "external_dependencies": {"modules": ["MockWebServer", "Request", "ResponseHandler"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "request", "type": "variable"}, {"name": "VALID_RESPONSE", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a valid HTTP response by the ResponseHandler."}, {"name": "testWith400JSONErrorMsg", "primary_tested": ["ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"], "external_dependencies": {"modules": ["MockWebServer", "Request", "ResponseHandler", "BinanceClientException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "request", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a 400 HTTP error response with a JSON error message by the ResponseHandler."}, {"name": "testWith400ErrorMsg", "primary_tested": ["ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"], "external_dependencies": {"modules": ["MockWebServer", "Request", "ResponseHandler", "BinanceClientException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "request", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a 400 HTTP error response with a plain text error message by the ResponseHandler."}, {"name": "testWith500ErrorMsg", "primary_tested": ["ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"], "external_dependencies": {"modules": ["MockWebServer", "Request", "ResponseHandler", "BinanceServerException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "request", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a 500 HTTP error response by the ResponseHandler."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java", "testclass_name": "GiftCard_createDualTokensCodeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "GiftCard_createDualTokensCodeTest", "description": "Unit tests for the GiftCard createDualTokensCode method, focusing on various scenarios including success and missing parameters.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "giftCard", "type": "GiftCard"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateDualTokensCodeSuccess", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "GiftCard", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "giftCard", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of dual tokens code with all required parameters provided."}, {"name": "testCreateDualTokensCodeMissingBaseToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["GiftCard", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the baseToken parameter is missing, expecting a BinanceConnectorException."}, {"name": "testCreateDualTokensCodeMissingFaceToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["GiftCard", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the faceToken parameter is missing, expecting a BinanceConnectorException."}, {"name": "testCreateDualTokensCodeMissingBaseTokenAmount", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["GiftCard", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the baseTokenAmount parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java", "testclass_name": "TestSwitchBusdAutoConversion", "dependencies": ["package unit.spot.wallet;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "TestSwitchBusdAutoConversion", "description": "Unit tests for the switchBusdAutoConversion functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSwitchBusdAutoConversionWithoutParameters", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the switchBusdAutoConversion method without parameters, expecting a BinanceConnectorException."}, {"name": "testSwitchBusdAutoConversion", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the switchBusdAutoConversion method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "testclass_name": "Market_klinesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_klinesTest", "description": "Unit tests for the klines functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testKlinesWithoutSymbol", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without a symbol parameter, expecting a BinanceConnectorException."}, {"name": "testKlinesWithoutInterval", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without an interval parameter, expecting a BinanceConnectorException."}, {"name": "testKlines", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality with both symbol and interval parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "testclass_name": "SubAccount_futuresAccountV2Test", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresAccountV2Test", "description": "Tests for the futures account V2 functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountV2", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality with valid parameters."}, {"name": "testFuturesAccountV2MissingEmail", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality when the email parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesAccountV2MissingFuturesType", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality when the futuresType parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "testclass_name": "TestWebSocketApiRequestHandler", "dependencies": ["package unit.websocketapi;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONObject;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.websocketapi.WebSocketApiRequestHandler;", "import unit.MockData;"], "name": "TestWebSocketApiRequestHandler", "description": "Unit tests for the WebSocketApiRequestHandler class, focusing on exception handling and mandatory parameter checks.", "class_members": {"variables": [{"name": "params", "type": "JSONObject"}, {"name": "invalidReqId", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRequestWithoutWebSocketConnection", "primary_tested": ["WebSocketApiRequestHandler.WebSocketApiRequestHandler(WebSocketConnection,String,SignatureGenerator)"], "external_dependencies": {"modules": ["BinanceConnectorException", "WebSocketApiRequestHandler", "MockData"], "class_members": [{"name": "params", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.HMAC_SIGNATURE_GENERATOR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the constructor of WebSocketApiRequestHandler when no WebSocket connection is provided, expecting a BinanceConnectorException."}, {"name": "testPublicRequestWithoutMandatoryParams", "primary_tested": ["WebSocketApiRequestHandler.publicRequest(String,JSONObject)"], "external_dependencies": {"modules": ["BinanceConnectorException", "WebSocketApiRequestHandler", "MockData"], "class_members": [{"name": "params", "type": "variable"}], "project_specific_resources": ["MockData.WS_CONNECTION", "MockData.API_KEY", "MockData.HMAC_SIGNATURE_GENERATOR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the publicRequest method of WebSocketApiRequestHandler when mandatory parameters are missing, expecting a BinanceConnectorException."}, {"name": "testApiRequestWithoutMandatoryParams", "primary_tested": ["WebSocketApiRequestHandler.apiRequest(String,JSONObject)"], "external_dependencies": {"modules": ["BinanceConnectorException", "WebSocketApiRequestHandler", "MockData"], "class_members": [{"name": "params", "type": "variable"}], "project_specific_resources": ["MockData.WS_CONNECTION", "MockData.API_KEY", "MockData.HMAC_SIGNATURE_GENERATOR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the apiRequest method of WebSocketApiRequestHandler when mandatory parameters are missing or when the API key is null, expecting a BinanceConnectorException."}, {"name": "testSignedRequestWithoutMandatoryParams", "primary_tested": ["WebSocketApiRequestHandler.signedRequest(String,JSONObject)"], "external_dependencies": {"modules": ["BinanceConnectorException", "WebSocketApiRequestHandler", "MockData"], "class_members": [{"name": "params", "type": "variable"}], "project_specific_resources": ["MockData.WS_CONNECTION", "MockData.API_KEY", "MockData.HMAC_SIGNATURE_GENERATOR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the signedRequest method of WebSocketApiRequestHandler when mandatory parameters are missing or when the API key or signature generator is null, expecting a BinanceConnectorException."}, {"name": "testRequestWithInvalidRequestId", "primary_tested": ["WebSocketApiRequestHandler.publicRequest(String,JSONObject)"], "external_dependencies": {"modules": ["BinanceConnectorException", "WebSocketApiRequestHandler", "MockData"], "class_members": [{"name": "params", "type": "variable"}, {"name": "invalidReqId", "type": "variable"}], "project_specific_resources": ["MockData.WS_CONNECTION", "MockData.API_KEY", "MockData.HMAC_SIGNATURE_GENERATOR"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the publicRequest method of WebSocketApiRequestHandler when an invalid requestId is provided, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java", "testclass_name": "Trade_testSorOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_testSorOrderTest", "description": "Unit tests for the sorOrder and testSorOrder methods of the Trade class in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSorOrder", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorOrder method with valid parameters."}, {"name": "testSorOrderWithoutParameters", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorOrder method without parameters, expecting a BinanceConnectorException."}, {"name": "testTestSorOrder", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testSorOrder method with valid parameters."}, {"name": "testTestSorOrderWithoutParameters", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testSorOrder method without parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/unit/TestUrlBuilder.java", "testclass_name": "TestUrlBuilder", "dependencies": ["package unit;", "import static org.junit.Assert.assertEquals;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Locale;", "import java.util.Map;", "import org.junit.Test;", "import com.binance.connector.client.utils.UrlBuilder;"], "name": "TestUrlBuilder", "description": "Unit tests for the UrlBuilder utility class, focusing on URL construction and query parameter joining.", "class_members": {"variables": [{"name": "baseUrl", "type": "final String"}, {"name": "urlPath", "type": "final String"}, {"name": "doubleValue", "type": "final double"}, {"name": "extensiveDecimalsDouble", "type": "final double"}, {"name": "highDouble", "type": "final double"}, {"name": "intValue", "type": "final int"}, {"name": "mockParameters", "type": "final Map<String, Object>"}, {"name": "mockDoubleParameters", "type": "final Map<String, Object>"}, {"name": "mockStreams", "type": "final ArrayList<String>"}]}, "test_cases": [{"name": "testBuildFullUrl", "primary_tested": ["UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "urlPath", "type": "variable"}, {"name": "mockParameters", "type": "variable"}]}, "category": "unit", "description": "Tests the construction of a full URL with parameters."}, {"name": "testBuildFullUrlWithoutParams", "primary_tested": ["UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "urlPath", "type": "variable"}]}, "category": "unit", "description": "Tests the construction of a full URL without parameters."}, {"name": "testJoinQueryParameters", "primary_tested": ["UrlBuilder.joinQueryParameters(Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "mockParameters", "type": "variable"}]}, "category": "unit", "description": "Tests the joining of query parameters into a single string."}, {"name": "testJoinLargeQueryParameters", "primary_tested": ["UrlBuilder.joinQueryParameters(Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "mockParameters", "type": "variable"}, {"name": "extensiveDecimalsDouble", "type": "variable"}, {"name": "highDouble", "type": "variable"}]}, "category": "unit", "description": "Tests the joining of a large set of query parameters into a single string."}, {"name": "testJoinQueryParametersWithoutParams", "primary_tested": ["UrlBuilder.joinQueryParameters(Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"]}, "category": "unit", "description": "Tests the joining of query parameters when no parameters are provided."}, {"name": "testJoinQueryParametersWithEmptyParams", "primary_tested": ["UrlBuilder.joinQueryParameters(Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"]}, "category": "unit", "description": "Tests the joining of query parameters when empty parameters are provided."}, {"name": "testJoinQueryParametersWithLocaleIT", "primary_tested": ["UrlBuilder.joinQueryParameters(Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder", "Locale"], "class_members": [{"name": "mockDoubleParameters", "type": "variable"}]}, "category": "unit", "description": "Tests the joining of query parameters with a specific Locale (IT) to ensure double values are formatted correctly."}, {"name": "testBuildStreamUrl", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "mockStreams", "type": "variable"}]}, "category": "unit", "description": "Tests the construction of a stream URL with parameters."}, {"name": "testBuildStreamUrlWitoutParams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the construction of a stream URL without parameters."}, {"name": "testBuildStreamUrlWithEmptyParams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the construction of a stream URL with empty parameters."}]}, {"file_path": "src/test/java/unit/TestRequestBuilder.java", "testclass_name": "TestRequestBuilder", "dependencies": ["package unit;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestBuilder;", "import okhttp3.Request;"], "name": "TestRequestBuilder", "description": "Unit tests for the RequestBuilder class, focusing on various HTTP methods and WebSocket requests.", "class_members": {"variables": [{"name": "fullUrl", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "testPublicPostMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the public POST method request building functionality."}, {"name": "testPublicGetMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the public GET method request building functionality."}, {"name": "testPublicPutMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the public PUT method request building functionality."}, {"name": "testPublicDeleteMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the public DELETE method request building functionality."}, {"name": "testPublicInvalidMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid HTTP method in the public request building functionality."}, {"name": "testPublicInvalidUrl", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid URL in the public request building functionality."}, {"name": "testApiKeyPostMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the API key POST method request building functionality."}, {"name": "testApiKeyGetMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the API key GET method request building functionality."}, {"name": "testApiKeyPutMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the API key PUT method request building functionality."}, {"name": "testApiKeyDeleteMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the API key DELETE method request building functionality."}, {"name": "testApiKeyInvalidMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid HTTP method in the API key request building functionality."}, {"name": "testApiKeyInvalidUrl", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException", "MockData"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid URL in the API key request building functionality."}, {"name": "testWebSocketUrl", "primary_tested": ["RequestBuilder.buildWebSocketRequest(String)"], "external_dependencies": {"modules": ["RequestBuilder", "Request"], "class_members": [{"name": "fullUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the WebSocket request building functionality."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "testclass_name": "JSONParser_sortJSONObjectTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import static org.junit.Assert.assertEquals;"], "name": "JSONParser_sortJSONObjectTest", "description": "Unit test for the JSONParser.sortJSONObject method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSortJSONObject", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser", "LinkedHashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "testclass_name": "JSONParser_getJSONIntValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONException;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_getJSONIntValueTest", "description": "Unit tests for the JSONParser.getJSONIntValue method.", "test_cases": [{"name": "testGetJSONIntValue_Success", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests the successful retrieval of an integer value from a JSON string."}, {"name": "testGetJSONIntValue_Failure", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests the failure scenario where a non-integer value is expected to throw a JSONException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "testclass_name": "JSONParser_addKeyValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_addKeyValueTest", "description": "Unit tests for the addKeyValue method in the JSONParser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddKeyValue_NullParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with null parameters."}, {"name": "testAddKeyValue_NonNullParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with non-null parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONStringValueTest.java", "testclass_name": "JSONParser_getJSONStringValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONException;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_getJSONStringValueTest", "description": "Unit tests for the JSONParser.getJSONStringValue method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetJSONStringValue_Success", "primary_tested": ["JSONParser.getJSONStringValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests the successful retrieval of a JSON string value."}, {"name": "testGetJSONStringValue_Failure", "primary_tested": ["JSONParser.getJSONStringValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests the failure scenario where an invalid key is used to retrieve a JSON string value, expecting a JSONException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "testclass_name": "RequestBuilder_buildPublicRequestTest", "dependencies": ["package com.binance.connector.client.utils;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import okhttp3.Request;", "import org.junit.Test;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;"], "name": "RequestBuilder_buildPublicRequestTest", "description": "Unit tests for the buildPublicRequest method in the RequestBuilder class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBuildPublicRequest_GET", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"]}, "category": "unit", "description": "Tests the buildPublicRequest method with a GET request, ensuring the URL and method are correctly set."}, {"name": "testBuildPublicRequest_InvalidMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the buildPublicRequest method with an invalid HTTP method, expecting a BinanceConnectorException to be thrown."}, {"name": "testBuildPublicRequest_InvalidUrl", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the buildPublicRequest method with an invalid URL, expecting a BinanceConnectorException to be thrown."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "testclass_name": "JSONParser_pullValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_pullValueTest", "description": "Unit tests for the JSONParser.pullValue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPullValue_WithExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with an existing key in the JSONObject."}, {"name": "testPullValue_WithNonExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with a non-existing key in the JSONObject."}, {"name": "testPullValue_WithNullParameters", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with null parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "testclass_name": "UrlBuilder_buildFullUrlTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Before;", "import org.junit.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.Assert.assertEquals;"], "name": "UrlBuilder_buildFullUrlTest", "description": "Unit tests for the buildFullUrl method in the UrlBuilder class.", "class_members": {"variables": [{"name": "baseUrl", "type": "String"}, {"name": "urlPath", "type": "String"}, {"name": "parameters", "type": "Map<String, Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBuildFullUrlWithoutParameters", "primary_tested": ["UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "urlPath", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the buildFullUrl method without parameters."}, {"name": "testBuildFullUrlWithParameters", "primary_tested": ["UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"], "associated_methods": ["Map.put(String,Object)"], "external_dependencies": {"modules": ["UrlBuilder", "Map"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "urlPath", "type": "variable"}, {"name": "parameters", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the buildFullUrl method with parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator_getSignatureTest.java", "testclass_name": "Ed25519SignatureGenerator_getSignatureTest", "dependencies": ["package com.binance.connector.client.utils.signaturegenerator;", "import org.junit.Before;", "import org.junit.Test;", "import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;", "import org.bouncycastle.crypto.signers.Ed25519Signer;", "import org.bouncycastle.crypto.util.PrivateKeyFactory;", "import org.bouncycastle.jce.provider.BouncyCastleProvider;", "import org.bouncycastle.util.io.pem.PemObject;", "import org.bouncycastle.util.io.pem.PemReader;", "import java.io.FileReader;", "import java.io.IOException;", "import java.nio.charset.StandardCharsets;", "import java.security.Security;", "import java.util.Base64;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "Ed25519SignatureGenerator_getSignatureTest", "description": "Unit tests for the getSignature method of the Ed25519SignatureGenerator class.", "class_members": {"variables": [{"name": "generator", "type": "Ed25519SignatureGenerator"}, {"name": "mockPrivateKey", "type": "Ed25519PrivateKeyParameters"}], "methods": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetSignature", "primary_tested": ["Ed25519SignatureGenerator.getSignature(String)"], "associated_methods": ["Ed25519Signer.init(boolean,Ed25519PrivateKeyParameters)", "Ed25519Signer.update(byte[],int,int)", "Ed25519Signer.generateSignature()"], "external_dependencies": {"modules": ["Ed25519SignatureGenerator", "Ed25519PrivateKeyParameters", "Ed25519Signer", "Base64", "StandardCharsets"], "class_members": [{"name": "generator", "type": "variable"}, {"name": "mockPrivateKey", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getSignature method of the Ed25519SignatureGenerator class by verifying the generated signature."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "testclass_name": "UrlBuilder_joinStreamUrlsTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_joinStreamUrlsTest", "description": "Unit tests for the joinStreamUrls method in the UrlBuilder class.", "class_members": {"variables": [{"name": "sb", "type": "StringBuilder"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testJoinStreamUrlsWithValidStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinStreamUrls method with a list of valid streams."}, {"name": "testJoinStreamUrlsWithEmptyStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinStreamUrls method with an empty list of streams."}, {"name": "testJoinStreamUrlsWithNullStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinStreamUrls method with a null list of streams."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "testclass_name": "UrlBuilder_joinQueryParametersTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.HashMap;", "import java.util.Map;"], "name": "UrlBuilder_joinQueryParametersTest", "description": "Unit tests for the joinQueryParameters method in the UrlBuilder class.", "class_members": {"variables": [{"name": "sb", "type": "StringBuilder"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testJoinQueryParametersWithEmptyMap", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder", "HashMap", "Map"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinQueryParameters method with an empty map."}, {"name": "testJoinQueryParametersWithNonEmptyMap", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder", "HashMap", "Map"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinQueryParameters method with a non-empty map."}, {"name": "testJoinQueryParametersWithNullMap", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map<String,Object>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "sb", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the joinQueryParameters method with a null map."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "testclass_name": "UrlBuilder_buildStreamUrlTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_buildStreamUrlTest", "description": "Unit tests for the buildStreamUrl method in the UrlBuilder class.", "class_members": {"variables": [{"name": "baseUrl", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBuildStreamUrlWithStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the buildStreamUrl method with a list of streams."}, {"name": "testBuildStreamUrlWithoutStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the buildStreamUrl method without any streams."}, {"name": "testBuildStreamUrlWithNullStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the buildStreamUrl method with null streams."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildTimestampTest.java", "testclass_name": "UrlBuilder_buildTimestampTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.assertTrue;"], "name": "UrlBuilder_buildTimestampTest", "description": "Unit test for the buildTimestamp method in the UrlBuilder class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBuildTimestamp", "primary_tested": ["UrlBuilder.buildTimestamp()"], "external_dependencies": {"modules": ["UrlBuilder"]}, "category": "unit", "description": "Tests that the buildTimestamp method returns a timestamp string that matches the pattern of digits."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createTradeTest.java", "testclass_name": "SpotClientImpl_createTradeTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.enums.DefaultUrls;", "import com.binance.connector.client.impl.spot.Trade;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createTradeTest", "description": "Unit tests for the creation of Trade objects in the SpotClientImpl class.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateTrade", "primary_tested": ["SpotClientImpl.createTrade()"], "external_dependencies": {"modules": ["SpotClientImpl", "Trade"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Trade object using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPayTest.java", "testclass_name": "SpotClientImpl_createPayTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Pay;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createPayTest", "description": "Unit tests for creating a Pay instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreatePay", "primary_tested": ["SpotClientImpl.createPay()"], "external_dependencies": {"modules": ["SpotClientImpl", "Pay"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Pay instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSpotAlgoTest.java", "testclass_name": "SpotClientImpl_createSpotAlgoTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.SpotAlgo;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createSpotAlgoTest", "description": "Test suite for creating SpotAlgo instances using SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateSpotAlgo", "primary_tested": ["SpotClientImpl.createSpotAlgo()"], "external_dependencies": {"modules": ["SpotClientImpl", "SpotAlgo"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a SpotAlgo instance using SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFiatTest.java", "testclass_name": "SpotClientImpl_createFiatTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Fiat;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createFiatTest", "description": "Unit tests for creating a Fiat instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateFiat", "primary_tested": ["SpotClientImpl.createFiat()"], "external_dependencies": {"modules": ["SpotClientImpl", "Fiat"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Fiat instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPortfolioMarginTest.java", "testclass_name": "SpotClientImpl_createPortfolioMarginTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.PortfolioMargin;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createPortfolioMarginTest", "description": "Test suite for creating a Portfolio Margin using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreatePortfolioMargin", "primary_tested": ["SpotClientImpl.createPortfolioMargin()"], "external_dependencies": {"modules": ["SpotClientImpl", "PortfolioMargin"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Portfolio Margin using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createVIPLoansTest.java", "testclass_name": "SpotClientImpl_createVIPLoansTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import com.binance.connector.client.impl.spot.VIPLoans;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "SpotClientImpl_createVIPLoansTest", "description": "Test suite for creating VIP loans using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateVIPLoans", "primary_tested": ["SpotClientImpl.createVIPLoans()"], "external_dependencies": {"modules": ["SpotClientImpl", "VIPLoans"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of VIP loans using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createCryptoLoansTest.java", "testclass_name": "SpotClientImpl_createCryptoLoansTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.CryptoLoans;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createCryptoLoansTest", "description": "Test suite for creating CryptoLoans using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateCryptoLoans", "primary_tested": ["SpotClientImpl.createCryptoLoans()"], "external_dependencies": {"modules": ["SpotClientImpl", "CryptoLoans"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of CryptoLoans using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMarginTest.java", "testclass_name": "SpotClientImpl_createMarginTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Margin;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createMarginTest", "description": "Unit tests for creating a Margin instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateMargin", "primary_tested": ["SpotClientImpl.createMargin()"], "external_dependencies": {"modules": ["SpotClientImpl", "Margin"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Margin instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFuturesTest.java", "testclass_name": "SpotClientImpl_createFuturesTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Futures;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createFuturesTest", "description": "Unit tests for creating Futures using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateFutures", "primary_tested": ["SpotClientImpl.createFutures()"], "external_dependencies": {"modules": ["SpotClientImpl", "Futures"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of Futures using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createWalletTest.java", "testclass_name": "SpotClientImpl_createWalletTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import com.binance.connector.client.impl.spot.Wallet;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createWalletTest", "description": "Unit tests for creating a Wallet using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateWallet", "primary_tested": ["SpotClientImpl.createWallet()"], "external_dependencies": {"modules": ["SpotClientImpl", "Wallet"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Wallet using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createStakingTest.java", "testclass_name": "SpotClientImpl_createStakingTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import com.binance.connector.client.impl.spot.Staking;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createStakingTest", "description": "Unit tests for creating a Staking instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateStaking", "primary_tested": ["SpotClientImpl.createStaking()"], "external_dependencies": {"modules": ["SpotClientImpl", "Staking"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Staking instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createRebateTest.java", "testclass_name": "SpotClientImpl_createRebateTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Rebate;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createRebateTest", "description": "Unit tests for creating Rebate using SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateRebate", "primary_tested": ["SpotClientImpl.createRebate()"], "external_dependencies": {"modules": ["SpotClientImpl", "Rebate"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of Rebate using SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createGiftCardTest.java", "testclass_name": "SpotClientImpl_createGiftCardTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.GiftCard;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "SpotClientImpl_createGiftCardTest", "description": "Unit tests for creating a gift card using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateGiftCard", "primary_tested": ["SpotClientImpl.createGiftCard()"], "external_dependencies": {"modules": ["SpotClientImpl", "GiftCard"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a gift card using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createNFTTest.java", "testclass_name": "SpotClientImpl_createNFTTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.enums.DefaultUrls;", "import com.binance.connector.client.impl.spot.NFT;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "SpotClientImpl_createNFTTest", "description": "Unit tests for creating NFT using SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateNFT", "primary_tested": ["SpotClientImpl.createNFT()"], "external_dependencies": {"modules": ["SpotClientImpl", "NFT"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an NFT using SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMiningTest.java", "testclass_name": "SpotClientImpl_createMiningTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Mining;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createMiningTest", "description": "Test suite for creating Mining instance using SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateMining", "primary_tested": ["SpotClientImpl.createMining()"], "external_dependencies": {"modules": ["SpotClientImpl", "Mining"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Mining instance using SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSimpleEarnTest.java", "testclass_name": "SpotClientImpl_createSimpleEarnTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.SimpleEarn;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createSimpleEarnTest", "description": "Unit test for creating a SimpleEarn instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateSimpleEarn", "primary_tested": ["SpotClientImpl.createSimpleEarn()"], "external_dependencies": {"modules": ["SpotClientImpl", "SimpleEarn"], "class_members": [{"name": "spotClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a SimpleEarn instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionRecordTest.java", "testclass_name": "SimpleEarn_lockedSubscriptionRecordTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedSubscriptionRecordTest", "description": "Test for the locked subscription record functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionRecord", "primary_tested": ["SimpleEarn.lockedSubscriptionRecord(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription record functionality of the SimpleEarn module."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralAssetsDataTest.java", "testclass_name": "CryptoLoans_collateralAssetsDataTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_collateralAssetsDataTest", "description": "Unit tests for the collateral assets data functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAssetsData", "primary_tested": ["CryptoLoans.collateralAssetsData(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "CryptoLoans", "LinkedHashMap", "Map", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral assets data retrieval functionality of the CryptoLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_tradeFeeTest.java", "testclass_name": "Wallet_tradeFeeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_tradeFeeTest", "description": "Test suite for the tradeFee method in the Wallet service of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradeFee", "primary_tested": ["Wallet.tradeFee(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tradeFee method of the Wallet service in the SpotClientImpl, ensuring it returns the expected mock response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVHistoryTest.java", "testclass_name": "CryptoLoans_loanAdjustLTVHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanAdjustLTVHistoryTest", "description": "Unit tests for the loanAdjustLTVHistory method in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAdjustLTVHistory", "primary_tested": ["CryptoLoans.loanAdjustLTVHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "CryptoLoans", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTVHistory method of the CryptoLoans class by verifying the response from the mock server."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowHistoryTest.java", "testclass_name": "CryptoLoans_loanBorrowHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanBorrowHistoryTest", "description": "Unit tests for the loan borrow history functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanBorrowHistory", "primary_tested": ["CryptoLoans.loanBorrowHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "CryptoLoans"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow history functionality of the CryptoLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethUnwrapHistoryTest.java", "testclass_name": "Staking_ethStakingWbethUnwrapHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingWbethUnwrapHistoryTest", "description": "Test for the ethStakingWbethUnwrapHistory method in the Staking service of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethUnwrapHistory", "primary_tested": ["Staking.ethStakingWbethUnwrapHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingWbethUnwrapHistory method of the Staking service in the SpotClientImpl class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_assetLeverageTest.java", "testclass_name": "PortfolioMargin_assetLeverageTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "PortfolioMargin_assetLeverageTest", "description": "Unit tests for the asset leverage functionality in the PortfolioMargin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "portfolioMargin", "type": "PortfolioMargin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetLeverage", "primary_tested": ["PortfolioMargin.assetLeverage()"], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "PortfolioMargin", "HmacSignatureGenerator", "ProxyAuth", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "portfolioMargin", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the asset leverage functionality of the PortfolioMargin class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_userLimitTest.java", "testclass_name": "Blvt_userLimitTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Blvt_userLimitTest", "description": "Unit tests for the user limit functionality of the Blvt class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "blvt", "type": "Blvt"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUserLimit", "primary_tested": ["Blvt.userLimit(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "HmacSignatureGenerator", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the user limit functionality of the Blvt class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_transferHistoryTest.java", "testclass_name": "Margin_transferHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_transferHistoryTest", "description": "Test suite for the transfer history functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testTransferHistory", "primary_tested": ["Margin.transferHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Margin", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the transfer history functionality of the Margin class."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTest.java", "testclass_name": "ParameterChecker_checkParameterTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkParameterTest", "description": "Unit tests for the ParameterChecker.checkParameter method, which validates parameters in a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckParameter_ValidParameter", "primary_tested": ["ParameterChecker.checkParameter(Map<String,Object>,String,Class<T>)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkParameter method with a valid parameter in the map."}, {"name": "testCheckParameter_MissingParameter", "primary_tested": ["ParameterChecker.checkParameter(Map<String,Object>,String,Class<T>)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkParameter method when a required parameter is missing, expecting a BinanceConnectorException."}, {"name": "testCheckParameter_WrongType", "primary_tested": ["ParameterChecker.checkParameter(Map<String,Object>,String,Class<T>)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkParameter method when a parameter has the wrong type, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAssetTest.java", "testclass_name": "VIPLoans_collateralAssetTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_collateralAssetTest", "description": "Test suite for the VIPLoans collateral asset functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAsset", "primary_tested": ["VIPLoans.collateralAsset(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "VIPLoans", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral asset functionality of the VIPLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductPositionTest.java", "testclass_name": "SimpleEarn_flexibleProductPositionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleProductPositionTest", "description": "Test suite for the flexible product position functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "simpleEarn", "type": "SimpleEarn"}, {"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFlexibleProductPosition", "primary_tested": ["SimpleEarn.flexibleProductPosition(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "simpleEarn", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the flexible product position functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_bnbConvertableAssetsTest.java", "testclass_name": "Wallet_bnbConvertableAssetsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_bnbConvertableAssetsTest", "description": "Test for the BNB convertable assets functionality in the Wallet module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBnbConvertableAssets", "primary_tested": ["Wallet.bnbConvertableAssets(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of converting BNB assets in the Wallet module of the SpotClient."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleRedemptionRecordTest.java", "testclass_name": "SimpleEarn_flexibleRedemptionRecordTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleRedemptionRecordTest", "description": "Test for the flexible redemption record functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleRedemptionRecord", "primary_tested": ["SimpleEarn.flexibleRedemptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible redemption record functionality of the SimpleEarn module."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingSubHistoryTest.java", "testclass_name": "Staking_ethStakingSubHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingSubHistoryTest", "description": "Unit tests for the ethStakingSubHistory method in the Staking class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "staking", "type": "Staking"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingSubHistory", "primary_tested": ["Staking.ethStakingSubHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "HmacSignatureGenerator", "ProxyAuth", "Staking"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "staking", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingSubHistory method of the Staking class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustLogTest.java", "testclass_name": "Wallet_dustLogTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_dustLogTest", "description": "Test suite for the dustLog functionality in the Wallet module of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDustLog", "primary_tested": ["Wallet.dustLog(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the dustLog functionality of the Wallet module in the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_enableFastWithdrawTest.java", "testclass_name": "Wallet_enableFastWithdrawTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_enableFastWithdrawTest", "description": "Test for enabling fast withdraw functionality in the Wallet service of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEnableFastWithdraw", "primary_tested": ["Wallet.enableFastWithdraw(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of enabling fast withdraw in the Wallet service."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createC2CTest.java", "testclass_name": "SpotClientImpl_createC2CTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.C2C;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createC2CTest", "description": "Unit tests for creating C2C client in SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateC2C", "primary_tested": ["SpotClientImpl.createC2C()"], "external_dependencies": {"modules": ["C2C", "SpotClientImpl", "HmacSignatureGenerator", "SignatureGenerator"], "class_members": [{"name": "spotClient", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "apiKey", "type": "variable"}, {"name": "signatureGenerator", "type": "variable"}, {"name": "showLimitUsage", "type": "variable"}, {"name": "proxy", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a C2C client using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOCOOrdersTest.java", "testclass_name": "Trade_getOpenOCOOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_getOpenOCOOrdersTest", "description": "Unit tests for the getOpenOCOOrders method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOCOOrders", "primary_tested": ["Trade.getOpenOCOOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "RequestHandler", "HmacSignatureGenerator", "ProxyAuth", "Dispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOCOOrders method in the Trade class, ensuring it returns the expected response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createConvertTest.java", "testclass_name": "SpotClientImpl_createConvertTest", "dependencies": ["package com.binance.connector.client.impl;", "import com.binance.connector.client.impl.spot.Convert;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.assertNotNull;"], "name": "SpotClientImpl_createConvertTest", "description": "Unit tests for creating a Convert instance using the SpotClientImpl.", "class_members": {"variables": [{"name": "spotClient", "type": "SpotClientImpl"}, {"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateConvert", "primary_tested": ["SpotClientImpl.createConvert()"], "external_dependencies": {"modules": ["Convert", "SpotClientImpl", "HmacSignatureGenerator", "SignatureGenerator"], "class_members": [{"name": "spotClient", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "apiKey", "type": "variable"}, {"name": "signatureGenerator", "type": "variable"}, {"name": "showLimitUsage", "type": "variable"}, {"name": "proxy", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Convert instance using the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendListenKeyTest.java", "testclass_name": "UserData_extendListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_extendListenKeyTest", "description": "Unit tests for extending the listen key in UserData class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "userData", "type": "UserData"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendListenKeyWithoutParameters", "primary_tested": ["UserData.extendListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "UserData"], "class_members": [{"name": "userData", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending the listen key without providing parameters, expecting a BinanceConnectorException."}, {"name": "testExtendListenKeyWithValidParameters", "primary_tested": ["UserData.extendListenKey(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["UserData", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "userData", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending the listen key with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_cancelOrderTest.java", "testclass_name": "SpotAlgo_cancelOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SpotAlgo_cancelOrderTest", "description": "Tests for the cancellation of spot algo orders.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "spotAlgo", "type": "SpotAlgo"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOrderSuccess", "primary_tested": ["SpotAlgo.cancelOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SpotAlgo", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "spotAlgo", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of a spot algo order."}, {"name": "testCancelOrderMissingAlgoId", "primary_tested": ["SpotAlgo.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotAlgo", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "spotAlgo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to cancel a spot algo order without providing the required 'algoId'."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_queryUniversalTransferTest.java", "testclass_name": "SubAccount_queryUniversalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_queryUniversalTransferTest", "description": "Unit tests for querying universal transfers in the SubAccount class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testQueryUniversalTransfer", "primary_tested": ["SubAccount.queryUniversalTransfer(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SubAccount", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the queryUniversalTransfer method of the SubAccount class with valid parameters."}, {"name": "testQueryUniversalTransferWithoutParameters", "primary_tested": ["SubAccount.queryUniversalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the queryUniversalTransfer method of the SubAccount class without parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_plansListTest.java", "testclass_name": "AutoInvest_plansListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_plansListTest", "description": "Tests for the AutoInvest plans list functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "autoInvest", "type": "AutoInvest"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPlansListSuccess", "primary_tested": ["AutoInvest.plansList(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "AutoInvest", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "autoInvest", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of plans list with a valid plan type."}, {"name": "testPlansListMissingPlanType", "primary_tested": ["AutoInvest.plansList(Map<String,Object>)"], "external_dependencies": {"modules": ["AutoInvest", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "autoInvest", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when the plan type is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableFuturesTest.java", "testclass_name": "SubAccount_enableFuturesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_enableFuturesTest", "description": "Tests for enabling futures functionality for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEnableFuturesWithoutEmail", "primary_tested": ["SubAccount.enableFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when enabling futures without providing an email."}, {"name": "testEnableFuturesWithValidEmail", "primary_tested": ["SubAccount.enableFutures(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of futures with a valid email."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_renewTest.java", "testclass_name": "VIPLoans_renewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_renewTest", "description": "Unit tests for the VIPLoans renew functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRenewSuccess", "primary_tested": ["VIPLoans.renew(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "VIPLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful renewal of a VIP loan."}, {"name": "testRenewMissingOrderId", "primary_tested": ["VIPLoans.renew(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to renew a VIP loan without providing an order ID, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanIncomeTest.java", "testclass_name": "CryptoLoans_loanIncomeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanIncomeTest", "description": "Unit tests for the loan income functionality of the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanIncomeWithValidParameters", "primary_tested": ["CryptoLoans.loanIncome(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "CryptoLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan income functionality with valid parameters."}, {"name": "testLoanIncomeWithoutAssetParameter", "primary_tested": ["CryptoLoans.loanIncome(Map<String,Object>)"], "external_dependencies": {"modules": ["CryptoLoans", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "cryptoLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan income functionality without the required asset parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustTransferTest.java", "testclass_name": "Wallet_dustTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_dustTransferTest", "description": "Unit tests for the dust transfer functionality in the Wallet class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "wallet", "type": "Wallet"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDustTransferSuccess", "primary_tested": ["Wallet.dustTransfer(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Wallet", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "wallet", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful dust transfer functionality of the Wallet."}, {"name": "testDustTransferInvalidParameter", "primary_tested": ["Wallet.dustTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Wallet", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "wallet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid parameters in the dust transfer functionality of the Wallet."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repaymentHistoryTest.java", "testclass_name": "VIPLoans_repaymentHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_repaymentHistoryTest", "description": "Test suite for the repayment history functionality of VIP loans.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepaymentHistory", "primary_tested": ["VIPLoans.repaymentHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "RequestHandler", "HmacSignatureGenerator", "Dispatcher", "LinkedHashMap", "Map", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the repayment history functionality of VIP loans by verifying the response from the mock server."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Convert_acceptQuoteTest.java", "testclass_name": "Convert_acceptQuoteTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Convert_acceptQuoteTest", "description": "Unit tests for the acceptQuote method in the Convert class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "convert", "type": "Convert"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testAcceptQuoteWithoutParameters", "primary_tested": ["Convert.acceptQuote(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "convert", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the acceptQuote method without parameters, expecting a BinanceConnectorException."}, {"name": "testAcceptQuoteWithParameters", "primary_tested": ["Convert.acceptQuote(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "convert", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the acceptQuote method with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_assetsTest.java", "testclass_name": "SubAccount_assetsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_assetsTest", "description": "Tests for the SubAccount assets functionality in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAssetsWithoutParameters", "primary_tested": ["SubAccount.assets(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SubAccount assets functionality without providing any parameters, expecting a BinanceConnectorException."}, {"name": "testAssetsWithValidParameters", "primary_tested": ["SubAccount.assets(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the SubAccount assets functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingQuotaTest.java", "testclass_name": "Staking_ethStakingQuotaTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingQuotaTest", "description": "Test for the ethStakingQuota method in the Staking service of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingQuota", "primary_tested": ["Staking.ethStakingQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingQuota method of the Staking service in the SpotClientImpl class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethRewardHistoryTest.java", "testclass_name": "Staking_ethStakingWbethRewardHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingWbethRewardHistoryTest", "description": "Test for the ethStakingWbethRewardHistory method in the Staking service of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethRewardHistory", "primary_tested": ["Staking.ethStakingWbethRewardHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingWbethRewardHistory method of the Staking service in the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_algorithmTest.java", "testclass_name": "Mining_algorithmTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_algorithmTest", "description": "Unit tests for the Mining algorithm functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "mining", "type": "Mining"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAlgorithm", "primary_tested": ["Mining.algorithm(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Mining", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the algorithm method of the Mining class with default parameters."}, {"name": "testAlgorithmWithParameters", "primary_tested": ["Mining.algorithm(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Mining", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the algorithm method of the Mining class with specific parameters."}, {"name": "testAlgorithmWithInvalidParameters", "primary_tested": ["Mining.algorithm(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "Mining"], "class_members": [{"name": "mining", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the algorithm method of the Mining class with invalid parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_blvtInfoTest.java", "testclass_name": "Blvt_blvtInfoTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Blvt_blvtInfoTest", "description": "Unit tests for the Blvt class's blvtInfo method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "blvt", "type": "Blvt"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBlvtInfoSuccess", "primary_tested": ["Blvt.blvtInfo(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Blvt", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of BLVT info with valid parameters."}, {"name": "testBlvtInfoWithoutParameters", "primary_tested": ["Blvt.blvtInfo(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Blvt", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of BLVT info without providing any parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanCollateralAssetsTest.java", "testclass_name": "CryptoLoans_flexibleLoanCollateralAssetsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanCollateralAssetsTest", "description": "Test for the flexible loan collateral assets functionality in the CryptoLoans service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanCollateralAssets", "primary_tested": ["CryptoLoans.flexibleLoanCollateralAssets(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan collateral assets functionality of the CryptoLoans service."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_forceLiquidationRecTest.java", "testclass_name": "Margin_forceLiquidationRecTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_forceLiquidationRecTest", "description": "Test for the force liquidation record functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testForceLiquidationRec", "primary_tested": ["Margin.forceLiquidationRec(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Margin", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the force liquidation record functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_simpleAccountTest.java", "testclass_name": "SimpleEarn_simpleAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_simpleAccountTest", "description": "Test suite for the SimpleEarn simpleAccount functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSimpleAccount", "primary_tested": ["SimpleEarn.simpleAccount(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the simpleAccount functionality of the SimpleEarn module."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_withdrawHistoryTest.java", "testclass_name": "Wallet_withdrawHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_withdrawHistoryTest", "description": "Unit tests for the withdraw history functionality of the Wallet class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "wallet", "type": "Wallet"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWithdrawHistory", "primary_tested": ["Wallet.withdrawHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Wallet", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "wallet", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdraw history functionality of the Wallet class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_repayFuturesTest.java", "testclass_name": "PortfolioMargin_repayFuturesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "PortfolioMargin_repayFuturesTest", "description": "Unit tests for the PortfolioMargin repayFutures functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "portfolioMargin", "type": "PortfolioMargin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRepayFutures", "primary_tested": ["PortfolioMargin.repayFutures(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "PortfolioMargin", "HmacSignatureGenerator", "ProxyAuth", "Dispatcher", "Map", "LinkedHashMap", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "portfolioMargin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the repayFutures functionality of the PortfolioMargin class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionRecordTest.java", "testclass_name": "SimpleEarn_flexibleSubscriptionRecordTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleSubscriptionRecordTest", "description": "Test suite for the flexible subscription record functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionRecord", "primary_tested": ["SimpleEarn.flexibleSubscriptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription record functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_delistScheduleTest.java", "testclass_name": "Margin_delistScheduleTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_delistScheduleTest", "description": "Test suite for the delist schedule functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testDelistSchedule", "primary_tested": ["Margin.delistSchedule(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Margin", "RequestHandler", "HmacSignatureGenerator"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the delist schedule functionality of the Margin class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayHistoryTest.java", "testclass_name": "CryptoLoans_loanRepayHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanRepayHistoryTest", "description": "Unit tests for the loan repayment history functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanRepayHistory", "primary_tested": ["CryptoLoans.loanRepayHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "CryptoLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan repayment history functionality of the CryptoLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanOngoingOrdersTest.java", "testclass_name": "CryptoLoans_loanOngoingOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanOngoingOrdersTest", "description": "Test suite for the ongoing loan orders functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanOngoingOrders", "primary_tested": ["CryptoLoans.loanOngoingOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "CryptoLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ongoing loan orders functionality of the CryptoLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedRewardsHistoryTest.java", "testclass_name": "SimpleEarn_lockedRewardsHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedRewardsHistoryTest", "description": "Unit tests for the locked rewards history functionality of the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedRewardsHistory", "primary_tested": ["SimpleEarn.lockedRewardsHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked rewards history functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedMarginDataTest.java", "testclass_name": "Margin_isolatedMarginDataTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_isolatedMarginDataTest", "description": "Test suite for isolated margin data functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedMarginData", "primary_tested": ["Margin.isolatedMarginData(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated margin data functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanLtvAdjustHistoryTest.java", "testclass_name": "CryptoLoans_flexibleLoanLtvAdjustHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanLtvAdjustHistoryTest", "description": "Test for the flexible loan LTV adjustment history functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanLtvAdjustHistory", "primary_tested": ["CryptoLoans.flexibleLoanLtvAdjustHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan LTV adjustment history functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethWrapHistoryTest.java", "testclass_name": "Staking_ethStakingWbethWrapHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingWbethWrapHistoryTest", "description": "Test for the ethStakingWbethWrapHistory method in the Staking service of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingWbethWrapHistory", "primary_tested": ["Staking.ethStakingWbethWrapHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingWbethWrapHistory method of the Staking service in the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_fundingWalletTest.java", "testclass_name": "Wallet_fundingWalletTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_fundingWalletTest", "description": "Unit tests for the funding wallet functionality in the Wallet class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "wallet", "type": "Wallet"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFundingWallet", "primary_tested": ["Wallet.fundingWallet(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "MockWebServerDispatcher", "HttpMethod", "Wallet"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "wallet", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the funding wallet functionality of the Wallet class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_createVirtualSubAccountTest.java", "testclass_name": "SubAccount_createVirtualSubAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_createVirtualSubAccountTest", "description": "Tests for the creation of virtual sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testCreateVirtualSubAccountSuccess", "primary_tested": ["SubAccount.createVirtualSubAccount(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Dispatcher", "HttpMethod", "SubAccount", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of a virtual sub-account with the provided parameters."}, {"name": "testCreateVirtualSubAccountMissingParameter", "primary_tested": ["SubAccount.createVirtualSubAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "SubAccount"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a missing parameter in the creation of a virtual sub-account, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_leverageBracketTest.java", "testclass_name": "Margin_leverageBracketTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_leverageBracketTest", "description": "Test suite for the leverage bracket functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testLeverageBracket", "primary_tested": ["Margin.leverageBracket()"], "associated_methods": [], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "RequestHandler", "Margin"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the leverage bracket functionality of the Margin class by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_coinInfoTest.java", "testclass_name": "Wallet_coinInfoTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_coinInfoTest", "description": "Test suite for the coinInfo method in the Wallet service of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCoinInfo", "primary_tested": ["Wallet.coinInfo(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the coinInfo method of the Wallet service in the SpotClientImpl, ensuring it returns the expected mock response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOpenOrdersTest.java", "testclass_name": "Trade_cancelOpenOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_cancelOpenOrdersTest", "description": "Tests for the cancelOpenOrders functionality in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOpenOrdersSuccess", "primary_tested": ["Trade.cancelOpenOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of open orders with a valid symbol."}, {"name": "testCancelOpenOrdersWithoutSymbol", "primary_tested": ["Trade.cancelOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to cancel open orders without providing a symbol, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_indexPlanRebalanceInfoTest.java", "testclass_name": "AutoInvest_indexPlanRebalanceInfoTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_indexPlanRebalanceInfoTest", "description": "Tests for the index plan rebalance info functionality in the AutoInvest module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testIndexPlanRebalanceInfo", "primary_tested": ["AutoInvest.indexPlanRebalanceInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index plan rebalance info functionality with default parameters."}, {"name": "testIndexPlanRebalanceInfoWithParameters", "primary_tested": ["AutoInvest.indexPlanRebalanceInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index plan rebalance info functionality with specific parameters."}, {"name": "testIndexPlanRebalanceInfoWithoutParameters", "primary_tested": ["AutoInvest.indexPlanRebalanceInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the index plan rebalance info functionality without any parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Fiat_paymentsTest.java", "testclass_name": "Fiat_paymentsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Fiat_paymentsTest", "description": "Unit tests for the Fiat payments functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "fiatClient", "type": "Fiat"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPayments", "primary_tested": ["Fiat.payments(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Fiat", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "fiatClient", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the payments functionality of the Fiat client with a valid transaction type."}, {"name": "testPaymentsMissingTransactionType", "primary_tested": ["Fiat.payments(Map<String,Object>)"], "external_dependencies": {"modules": ["Fiat", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "fiatClient", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the payments functionality of the Fiat client when the transaction type is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_maxBorrowTest.java", "testclass_name": "Margin_maxBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_maxBorrowTest", "description": "Unit tests for the maxBorrow functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMaxBorrow", "primary_tested": ["Margin.maxBorrow(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Margin", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the maxBorrow functionality of the Margin class with a valid asset parameter."}, {"name": "testMaxBorrowMissingAsset", "primary_tested": ["Margin.maxBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["Margin", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "margin", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the maxBorrow functionality of the Margin class when the asset parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrderTest.java", "testclass_name": "Trade_getOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_getOrderTest", "description": "Unit tests for the getOrder method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOrderSuccess", "primary_tested": ["Trade.getOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Trade", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of an order by verifying the response from the mock server."}, {"name": "testGetOrderMissingSymbol", "primary_tested": ["Trade.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the getOrder method when the 'symbol' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOCOTest.java", "testclass_name": "Trade_cancelOCOTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_cancelOCOTest", "description": "Tests for canceling OCO orders in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOCOWithoutParameters", "primary_tested": ["Trade.cancelOCO(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of cancelOCO method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testCancelOCOSuccess", "primary_tested": ["Trade.cancelOCO(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of an OCO order with the required parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_capitalFlowTest.java", "testclass_name": "Margin_capitalFlowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_capitalFlowTest", "description": "Test suite for the capital flow functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCapitalFlow", "primary_tested": ["Margin.capitalFlow(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "RequestHandler", "HmacSignatureGenerator", "Dispatcher", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the capital flow functionality of the Margin class by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductPositionTest.java", "testclass_name": "SimpleEarn_lockedProductPositionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedProductPositionTest", "description": "Test suite for the locked product position functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedProductPosition", "primary_tested": ["SimpleEarn.lockedProductPosition(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked product position functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOrderTest.java", "testclass_name": "Trade_cancelOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_cancelOrderTest", "description": "Tests for the cancelOrder method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCancelOrderSuccess", "primary_tested": ["Trade.cancelOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful cancellation of an order by verifying the response."}, {"name": "testCancelOrderWithoutSymbol", "primary_tested": ["Trade.cancelOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the cancelOrder method when the symbol parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_tradesTest.java", "testclass_name": "Market_tradesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_tradesTest", "description": "Tests for the trades endpoint in the Binance Spot Client API.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTradesWithoutSymbol", "primary_tested": ["Market.trades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trades endpoint without a symbol, expecting a BinanceConnectorException."}, {"name": "testTradesWithSymbol", "primary_tested": ["Market.trades(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the trades endpoint with a symbol, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductListTest.java", "testclass_name": "SimpleEarn_lockedProductListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedProductListTest", "description": "Unit tests for the locked product list functionality of the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedProductList", "primary_tested": ["SimpleEarn.lockedProductList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "ProxyAuth", "SimpleEarn"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked product list functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiPermissionTest.java", "testclass_name": "Wallet_apiPermissionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_apiPermissionTest", "description": "Test for the API permission functionality in the Wallet API of the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testApiPermission", "primary_tested": ["Wallet.apiPermission(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.PREFIX", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the API permission functionality of the Wallet API by verifying the response from the mock server."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedAccountTest.java", "testclass_name": "Margin_isolatedAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_isolatedAccountTest", "description": "Test suite for the isolated account functionality in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testIsolatedAccount", "primary_tested": ["Margin.isolatedAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Margin"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the isolated account functionality of the Margin class by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscriptionRecordTest.java", "testclass_name": "Blvt_subscriptionRecordTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Blvt_subscriptionRecordTest", "description": "Unit tests for the Blvt subscription record functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "blvt", "type": "Blvt"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscriptionRecordSuccess", "primary_tested": ["Blvt.subscriptionRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Blvt", "HmacSignatureGenerator", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription record retrieval for the Blvt class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountTest.java", "testclass_name": "SubAccount_futuresAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresAccountTest", "description": "Tests for the futures account functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountWithoutEmail", "primary_tested": ["SubAccount.futuresAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality without providing an email, expecting a BinanceConnectorException."}, {"name": "testFuturesAccountWithEmail", "primary_tested": ["SubAccount.futuresAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account functionality by providing an email and expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_createIsolatedMarginListenKeyTest.java", "testclass_name": "UserData_createIsolatedMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_createIsolatedMarginListenKeyTest", "description": "Unit tests for the creation of isolated margin listen keys in the UserData class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "userData", "type": "UserData"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateIsolatedMarginListenKeyWithoutSymbol", "primary_tested": ["UserData.createIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "UserData"], "class_members": [{"name": "userData", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of an isolated margin listen key without providing a symbol, expecting a BinanceConnectorException."}, {"name": "testCreateIsolatedMarginListenKeyWithSymbol", "primary_tested": ["UserData.createIsolatedMarginListenKey(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["UserData", "MockWebServer", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "userData", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of an isolated margin listen key with a provided symbol, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getSubOrdersTest.java", "testclass_name": "SpotAlgo_getSubOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SpotAlgo_getSubOrdersTest", "description": "Unit tests for the getSubOrders method in the SpotAlgo class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "client", "type": "SpotClient"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetSubOrders", "primary_tested": ["SpotAlgo.getSubOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "client", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getSubOrders method with a valid algoId."}, {"name": "testGetSubOrdersWithoutAlgoId", "primary_tested": ["SpotAlgo.getSubOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException"], "class_members": [{"name": "client", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getSubOrders method without providing an algoId, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_tokensLimitTest.java", "testclass_name": "GiftCard_tokensLimitTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "GiftCard_tokensLimitTest", "description": "Tests for the tokens limit functionality of the GiftCard class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "giftCard", "type": "GiftCard"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTokensLimitSuccess", "primary_tested": ["GiftCard.tokensLimit(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "GiftCard", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "giftCard", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of tokens limit with a valid base token."}, {"name": "testTokensLimitWithoutBaseToken", "primary_tested": ["GiftCard.tokensLimit(Map<String,Object>)"], "external_dependencies": {"modules": ["GiftCard", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to retrieve tokens limit without providing a base token, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorAllocationsTest.java", "testclass_name": "Trade_sorAllocationsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_sorAllocationsTest", "description": "Tests for the sorAllocations method in the Trade API of the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSorAllocations", "primary_tested": ["Trade.sorAllocations(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorAllocations method with a valid symbol parameter."}, {"name": "testSorAllocationsMissingSymbol", "primary_tested": ["Trade.sorAllocations(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sorAllocations method when the symbol parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getHistoricalOrdersTest.java", "testclass_name": "SpotAlgo_getHistoricalOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SpotAlgo_getHistoricalOrdersTest", "description": "Unit test for the getHistoricalOrders method in the SpotAlgo class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetHistoricalOrders", "primary_tested": ["SpotAlgo.getHistoricalOrders(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getHistoricalOrders functionality of the SpotAlgo class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/NFT_withdrawHistoryTest.java", "testclass_name": "NFT_withdrawHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "NFT_withdrawHistoryTest", "description": "Unit tests for the NFT withdraw history functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "nft", "type": "NFT"}]}, "fixtures": ["init"], "test_cases": [{"name": "testWithdrawHistory", "primary_tested": ["NFT.withdrawHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "HmacSignatureGenerator", "NFT"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "nft", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the withdraw history functionality of the NFT class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_queryUniversalTransferTest.java", "testclass_name": "Wallet_queryUniversalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_queryUniversalTransferTest", "description": "Tests for the universal transfer query functionality in the Wallet class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "wallet", "type": "Wallet"}]}, "fixtures": ["init"], "test_cases": [{"name": "testQueryUniversalTransferSuccess", "primary_tested": ["Wallet.queryUniversalTransfer(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "Dispatcher", "Wallet"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "wallet", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful query of a universal transfer with the required parameters."}, {"name": "testQueryUniversalTransferMissingType", "primary_tested": ["Wallet.queryUniversalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Wallet", "BinanceConnectorException"], "class_members": [{"name": "wallet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a BinanceConnectorException when the 'type' parameter is missing."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleListTest.java", "testclass_name": "Mining_hashrateResaleListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_hashrateResaleListTest", "description": "Tests for the hashrate resale list functionality in the Mining class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "mining", "type": "Mining"}]}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleListSuccess", "primary_tested": ["Mining.hashrateResaleList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Mining", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of hashrate resale list with specified parameters."}, {"name": "testHashrateResaleListWithoutParameters", "primary_tested": ["Mining.hashrateResaleList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Mining", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the retrieval of hashrate resale list without any parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_redeemLockedProductTest.java", "testclass_name": "SimpleEarn_redeemLockedProductTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_redeemLockedProductTest", "description": "Tests for redeeming locked products in the SimpleEarn service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemLockedProductSuccess", "primary_tested": ["SimpleEarn.redeemLockedProduct(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SimpleEarn", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of a locked product in the SimpleEarn service."}, {"name": "testRedeemLockedProductWithoutPositionId", "primary_tested": ["SimpleEarn.redeemLockedProduct(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SimpleEarn", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the SimpleEarn service when attempting to redeem a locked product without providing a position ID, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrdersTest.java", "testclass_name": "Trade_getOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_getOrdersTest", "description": "Unit tests for the getOrders method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOrdersSuccess", "primary_tested": ["Trade.getOrders(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of orders with a valid symbol parameter."}, {"name": "testGetOrdersWithoutSymbol", "primary_tested": ["Trade.getOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the getOrders method when called without the required symbol parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_interestRateHistoryTest.java", "testclass_name": "Margin_interestRateHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_interestRateHistoryTest", "description": "Tests for the interest rate history functionality in the Margin module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testInterestRateHistory", "primary_tested": ["Margin.interestRateHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest rate history functionality with a valid asset parameter."}, {"name": "testInterestRateHistoryMissingAsset", "primary_tested": ["Margin.interestRateHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockData", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest rate history functionality when the 'asset' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_depthTest.java", "testclass_name": "Market_depthTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_depthTest", "description": "Unit tests for the depth functionality of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepthWithoutSymbol", "primary_tested": ["Market.depth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the depth functionality of the Market class without providing a symbol, expecting a BinanceConnectorException."}, {"name": "testDepthWithSymbol", "primary_tested": ["Market.depth(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the depth functionality of the Market class with a provided symbol, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_collateralRecordTest.java", "testclass_name": "SimpleEarn_collateralRecordTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_collateralRecordTest", "description": "Test suite for the collateral record functionality of the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralRecord", "primary_tested": ["SimpleEarn.collateralRecord(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "RequestHandler", "ProxyAuth", "HmacSignatureGenerator", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral record functionality of the SimpleEarn class by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOcoOpenOrdersTest.java", "testclass_name": "Margin_getOcoOpenOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_getOcoOpenOrdersTest", "description": "Test suite for the Margin class's getOcoOpenOrders method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOcoOpenOrders", "primary_tested": ["Margin.getOcoOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Margin"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOcoOpenOrders method of the Margin class by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetListTest.java", "testclass_name": "AutoInvest_targetAssetListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_targetAssetListTest", "description": "Test for the target asset list functionality in the AutoInvest module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTargetAssetList", "primary_tested": ["AutoInvest.targetAssetList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the target asset list functionality of the AutoInvest module in the SpotClient."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRedeemHistoryTest.java", "testclass_name": "Staking_ethStakingRedeemHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingRedeemHistoryTest", "description": "Test for the redemption history functionality of ETH staking in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingRedeemHistory", "primary_tested": ["Staking.ethStakingRedeemHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption history functionality of ETH staking in the SpotClientImpl class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_redeemCodeTest.java", "testclass_name": "GiftCard_redeemCodeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "GiftCard_redeemCodeTest", "description": "Unit tests for redeeming gift card codes using the GiftCard class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "giftCard", "type": "GiftCard"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemCodeSuccess", "primary_tested": ["GiftCard.redeemCode(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "GiftCard", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "giftCard", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful redemption of a gift card code."}, {"name": "testRedeemCodeWithoutCode", "primary_tested": ["GiftCard.redeemCode(Map<String,Object>)"], "external_dependencies": {"modules": ["GiftCard", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to redeem a gift card code without providing a code, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_accountStatusTest.java", "testclass_name": "Wallet_accountStatusTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_accountStatusTest", "description": "Test for the account status functionality in the Wallet module of the SpotClientImpl.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountStatus", "primary_tested": ["Wallet.accountStatus(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account status functionality of the Wallet module in the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_ongoingOrdersTest.java", "testclass_name": "VIPLoans_ongoingOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_ongoingOrdersTest", "description": "Test suite for the ongoing orders functionality of VIPLoans.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOngoingOrders", "primary_tested": ["VIPLoans.ongoingOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Map", "Dispatcher", "HttpMethod", "RequestHandler", "HmacSignatureGenerator", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ongoing orders functionality of the VIPLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_coinNameTest.java", "testclass_name": "Mining_coinNameTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.exceptions.BinanceServerException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_coinNameTest", "description": "Unit tests for the coinName method in the Mining class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "mining", "type": "Mining"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCoinName", "primary_tested": ["Mining.coinName(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Mining", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the coinName method without parameters."}, {"name": "testCoinNameWithParameters", "primary_tested": ["Mining.coinName(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Mining", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the coinName method with parameters."}, {"name": "testCoinNameException", "primary_tested": ["Mining.coinName(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Mining", "HttpMethod", "LinkedHashMap", "Dispatcher", "BinanceServerException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "mining", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the coinName method to handle exceptions."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_timeTest.java", "testclass_name": "Market_timeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_timeTest", "description": "Unit tests for the Market class time method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "market", "type": "Market"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTime", "primary_tested": ["Market.time()"], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Market", "ProxyAuth"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "market", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the time method of the Market class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountSummaryTest.java", "testclass_name": "SubAccount_futuresAccountSummaryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresAccountSummaryTest", "description": "Test for the futures account summary functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountSummary", "primary_tested": ["SubAccount.futuresAccountSummary(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account summary functionality of the SubAccount service by verifying the response from the mock server."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_interestHistoryTest.java", "testclass_name": "PortfolioMargin_interestHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "PortfolioMargin_interestHistoryTest", "description": "Unit tests for the interest history functionality of the PortfolioMargin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "portfolioMargin", "type": "PortfolioMargin"}]}, "fixtures": ["init"], "test_cases": [{"name": "testInterestHistory", "primary_tested": ["PortfolioMargin.interestHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "PortfolioMargin", "HmacSignatureGenerator", "ProxyAuth", "MockData", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "portfolioMargin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the interest history functionality of the PortfolioMargin class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowInterestRateTest.java", "testclass_name": "VIPLoans_borrowInterestRateTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_borrowInterestRateTest", "description": "Test suite for the VIPLoans borrow interest rate functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowInterestRate", "primary_tested": ["VIPLoans.borrowInterestRate(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "VIPLoans", "HmacSignatureGenerator", "ProxyAuth", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the borrow interest rate functionality of the VIPLoans class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDetailsTest.java", "testclass_name": "SubAccount_managedSubDetailsTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubDetailsTest", "description": "Tests for the managed sub-account details functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubDetailsWithoutParameters", "primary_tested": ["SubAccount.managedSubDetails(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account details functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testManagedSubDetailsWithParameters", "primary_tested": ["SubAccount.managedSubDetails(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account details functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeMarginListenKeyTest.java", "testclass_name": "UserData_closeMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_closeMarginListenKeyTest", "description": "Tests for closing margin listen key functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseMarginListenKeyWithoutParameters", "primary_tested": ["UserData.closeMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of closing a margin listen key without providing parameters, expecting a BinanceConnectorException."}, {"name": "testCloseMarginListenKeyWithValidParameters", "primary_tested": ["UserData.closeMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful closing of a margin listen key with valid parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_tradeCoeffTest.java", "testclass_name": "Margin_tradeCoeffTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_tradeCoeffTest", "description": "Test suite for the tradeCoeff method in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testTradeCoeff", "primary_tested": ["Margin.tradeCoeff(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Margin", "RequestHandler", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tradeCoeff method of the Margin class by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_availableInventoryTest.java", "testclass_name": "Margin_availableInventoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_availableInventoryTest", "description": "Test for the available inventory functionality in the Margin module of the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAvailableInventory", "primary_tested": ["Margin.availableInventory(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String, String, String, HttpMethod, int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the available inventory functionality of the Margin module in the SpotClient."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_applyOneClickArrivalDepositTest.java", "testclass_name": "Wallet_applyOneClickArrivalDepositTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_applyOneClickArrivalDepositTest", "description": "Test for applying one-click arrival deposit functionality in the Wallet service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testApplyOneClickArrivalDeposit", "primary_tested": ["Wallet.applyOneClickArrivalDeposit(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-click arrival deposit functionality of the Wallet service."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOrderTest.java", "testclass_name": "Margin_getOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_getOrderTest", "description": "Tests for the getOrder method in the Margin API of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOrderWithoutSymbol", "primary_tested": ["Margin.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrder method without a symbol, expecting a BinanceConnectorException."}, {"name": "testGetOrderWithSymbol", "primary_tested": ["Margin.getOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOrder method with a symbol, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductListTest.java", "testclass_name": "SimpleEarn_flexibleProductListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleProductListTest", "description": "Unit tests for the flexible product list functionality of the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleProductList", "primary_tested": ["SimpleEarn.flexibleProductList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible product list functionality of the SimpleEarn class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendMarginListenKeyTest.java", "testclass_name": "UserData_extendMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_extendMarginListenKeyTest", "description": "Tests for extending margin listen key functionality in the UserData class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "userData", "type": "UserData"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExtendMarginListenKey", "primary_tested": ["UserData.extendMarginListenKey(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "UserData", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "userData", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of extending a margin listen key with valid parameters."}, {"name": "testExtendMarginListenKeyWithoutParameters", "primary_tested": ["UserData.extendMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["UserData", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "userData", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of extending a margin listen key without providing necessary parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getOpenOrdersTest.java", "testclass_name": "SpotAlgo_getOpenOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SpotAlgo_getOpenOrdersTest", "description": "Unit tests for the getOpenOrders method of the SpotAlgo class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "spotAlgo", "type": "SpotAlgo"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOrders", "primary_tested": ["SpotAlgo.getOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "SpotAlgo", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "spotAlgo", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOrders functionality of the SpotAlgo class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_preventedMatchesTest.java", "testclass_name": "Trade_preventedMatchesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_preventedMatchesTest", "description": "Unit tests for the preventedMatches method in the Trade class, focusing on scenarios with and without a symbol parameter.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testPreventedMatchesWithoutSymbol", "primary_tested": ["Trade.preventedMatches(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Map", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the preventedMatches method without a symbol parameter, expecting a BinanceConnectorException."}, {"name": "testPreventedMatchesWithSymbol", "primary_tested": ["Trade.preventedMatches(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Map", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the preventedMatches method with a symbol parameter, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginAccountTest.java", "testclass_name": "SubAccount_marginAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_marginAccountTest", "description": "Unit tests for the margin account functionality of the SubAccount class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMarginAccountWithoutEmail", "primary_tested": ["SubAccount.marginAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin account functionality without providing an email, expecting a BinanceConnectorException."}, {"name": "testMarginAccountWithValidEmail", "primary_tested": ["SubAccount.marginAccount(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin account functionality with a valid email, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_adjustCrossMarginMaxLeverageTest.java", "testclass_name": "Margin_adjustCrossMarginMaxLeverageTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_adjustCrossMarginMaxLeverageTest", "description": "Tests for adjusting cross margin maximum leverage in the Margin class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "margin", "type": "Margin"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testAdjustCrossMarginMaxLeverageSuccess", "primary_tested": ["Margin.adjustCrossMarginMaxLeverage(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Dispatcher", "HttpMethod", "Margin", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "margin", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful adjustment of cross margin maximum leverage."}, {"name": "testAdjustCrossMarginMaxLeverageMissingParameter", "primary_tested": ["Margin.adjustCrossMarginMaxLeverage(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "Margin"], "class_members": [{"name": "margin", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing parameters when adjusting cross margin maximum leverage."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_crossMarginDataTest.java", "testclass_name": "Margin_crossMarginDataTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_crossMarginDataTest", "description": "Test suite for cross margin data functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCrossMarginData", "primary_tested": ["Margin.crossMarginData(Map<String, Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cross margin data functionality of the Margin created by the SpotClientImpl."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayHistoryTest.java", "testclass_name": "CryptoLoans_flexibleLoanRepayHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanRepayHistoryTest", "description": "Test for the flexible loan repay history functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanRepayHistory", "primary_tested": ["CryptoLoans.flexibleLoanRepayHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan repay history functionality by setting up a mock web server and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedPersonalLeftQuotaTest.java", "testclass_name": "SimpleEarn_lockedPersonalLeftQuotaTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedPersonalLeftQuotaTest", "description": "Tests for the locked personal left quota functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedPersonalLeftQuotaSuccess", "primary_tested": ["SimpleEarn.lockedPersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of locked personal left quota with a valid projectId."}, {"name": "testLockedPersonalLeftQuotaWithoutProjectId", "primary_tested": ["SimpleEarn.lockedPersonalLeftQuota(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "SimpleEarn", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the locked personal left quota method when called without a projectId, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRateHistoryTest.java", "testclass_name": "Staking_ethStakingRateHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Staking_ethStakingRateHistoryTest", "description": "Test for the ethStakingRateHistory method in the Staking service of the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEthStakingRateHistory", "primary_tested": ["Staking.ethStakingRateHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ethStakingRateHistory method of the Staking service in the SpotClientImpl class."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiTradingStatusTest.java", "testclass_name": "Wallet_apiTradingStatusTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_apiTradingStatusTest", "description": "Test for the API trading status functionality in the Wallet class.", "class_members": {"variables": [{"name": "wallet", "type": "Wallet"}, {"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testApiTradingStatus", "primary_tested": ["Wallet.apiTradingStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["Wallet", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "RequestHandler", "HmacSignatureGenerator", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "wallet", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the API trading status functionality of the Wallet class by mocking the web server response and verifying the result."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/NFT_depositHistoryTest.java", "testclass_name": "NFT_depositHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "NFT_depositHistoryTest", "description": "Unit tests for the deposit history functionality of the NFT client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "nftClient", "type": "NFT"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositHistory", "primary_tested": ["NFT.depositHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "NFT", "HmacSignatureGenerator", "MockData", "MockWebServerDispatcher", "HttpMethod", "Map", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "nftClient", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit history functionality of the NFT client."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAccountTest.java", "testclass_name": "VIPLoans_collateralAccountTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_collateralAccountTest", "description": "Unit tests for the collateral account functionality in the VIPLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralAccount", "primary_tested": ["VIPLoans.collateralAccount(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "RequestHandler", "HmacSignatureGenerator", "VIPLoans"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral account functionality of the VIPLoans class by mocking a web server response and verifying the result."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_myTradesTest.java", "testclass_name": "Trade_myTradesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_myTradesTest", "description": "Unit tests for the Trade class's myTrades method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMyTradesSuccess", "primary_tested": ["Trade.myTrades(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful retrieval of trades with a valid symbol."}, {"name": "testMyTradesWithoutSymbol", "primary_tested": ["Trade.myTrades(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the myTrades method when called without a symbol, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOrdersTest.java", "testclass_name": "Trade_getOpenOrdersTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_getOpenOrdersTest", "description": "Unit tests for the getOpenOrders method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetOpenOrders", "primary_tested": ["Trade.getOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOrders method with parameters."}, {"name": "testGetOpenOrdersWithoutParameters", "primary_tested": ["Trade.getOpenOrders(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Trade"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the getOpenOrders method without parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableMarginTest.java", "testclass_name": "SubAccount_enableMarginTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_enableMarginTest", "description": "Tests for enabling margin for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableMarginWithoutEmail", "primary_tested": ["SubAccount.enableMargin(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockData", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when enabling margin without providing an email."}, {"name": "testEnableMarginWithEmail", "primary_tested": ["SubAccount.enableMargin(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "HttpMethod", "MockData", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of margin for a sub-account with an email provided."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_oneTimeTransactionStatusTest.java", "testclass_name": "AutoInvest_oneTimeTransactionStatusTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_oneTimeTransactionStatusTest", "description": "Tests for the one-time transaction status functionality in the AutoInvest module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testOneTimeTransactionStatus", "primary_tested": ["AutoInvest.oneTimeTransactionStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-time transaction status functionality with a valid transaction ID."}, {"name": "testOneTimeTransactionStatusWithoutTransactionId", "primary_tested": ["AutoInvest.oneTimeTransactionStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the one-time transaction status functionality without a transaction ID, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountEarningTest.java", "testclass_name": "Mining_accountEarningTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_accountEarningTest", "description": "Tests for the account earning functionality in the Mining class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAccountEarningWithValidParameters", "primary_tested": ["Mining.accountEarning(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Mining", "HmacSignatureGenerator", "MockData", "MockWebServerDispatcher", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account earning functionality with valid parameters."}, {"name": "testAccountEarningWithoutAlgoParameter", "primary_tested": ["Mining.accountEarning(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "Mining", "HmacSignatureGenerator", "MockData", "MockWebServerDispatcher", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the account earning functionality without the 'algo' parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_customizeMarginCallTest.java", "testclass_name": "CryptoLoans_customizeMarginCallTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_customizeMarginCallTest", "description": "Unit tests for the customize margin call functionality in the CryptoLoans class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "cryptoLoans", "type": "CryptoLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCustomizeMarginCallWithValidParameters", "primary_tested": ["CryptoLoans.customizeMarginCall(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "CryptoLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the customize margin call functionality with valid parameters."}, {"name": "testCustomizeMarginCallWithoutRequiredParameter", "primary_tested": ["CryptoLoans.customizeMarginCall(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "CryptoLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "cryptoLoans", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the customize margin call functionality without the required parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_aggTradesTest.java", "testclass_name": "Market_aggTradesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_aggTradesTest", "description": "Unit tests for the aggregate trades functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAggTradesWithValidParameters", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggregate trades functionality with valid parameters."}, {"name": "testAggTradesWithoutSymbol", "primary_tested": ["Market.aggTrades(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the aggregate trades functionality without the required symbol parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_averagePriceTest.java", "testclass_name": "Market_averagePriceTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_averagePriceTest", "description": "Tests for the average price functionality in the SpotClientImpl class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testAveragePriceWithValidSymbol", "primary_tested": ["Market.averagePrice(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the average price functionality with a valid symbol."}, {"name": "testAveragePriceWithoutSymbol", "primary_tested": ["Market.averagePrice(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the average price functionality without a symbol, expecting a BinanceConnectorException."}]}]