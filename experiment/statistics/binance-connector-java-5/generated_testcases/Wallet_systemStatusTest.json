[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Wallet_systemStatusTest {\n    private Wallet wallet;\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void setUp() {\n        mockWebServer = new MockWebServer();\n        baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        wallet = new Wallet(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n    }\n\n    @Test\n    public void testSystemStatus() {\n        String path = \"/sapi/v1/system/status\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\", HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.systemStatus();\n        assertEquals(\"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\", result);\n    }\n}\n"}]