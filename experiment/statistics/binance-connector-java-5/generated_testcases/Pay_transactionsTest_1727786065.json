[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class Pay_transactionsTest {\n\n    private Pay pay;\n    private RequestHandler mockRequestHandler;\n\n    @Before\n    public void setUp() {\n        String baseUrl = \"https://api.binance.com\";\n        String apiKey = \"testApiKey\";\n        String secretKey = \"testSecretKey\";\n        boolean showLimitUsage = true;\n        ProxyAuth proxy = Mockito.mock(ProxyAuth.class);\n\n        mockRequestHandler = Mockito.mock(RequestHandler.class);\n        pay = new Pay(baseUrl, apiKey, new HmacSignatureGenerator(secretKey), showLimitUsage, proxy);\n    }\n\n    @Test\n    public void testTransactions() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"startTime\", 1609459200000L);\n        parameters.put(\"endTime\", 1609545600000L);\n\n        String expectedResponse = \"{\\\"success\\\":true}\";\n        when(mockRequestHandler.sendSignedRequest(Mockito.anyString(), Mockito.eq(\"/sapi/v1/pay/transactions\"), Mockito.eq(parameters), Mockito.eq(HttpMethod.GET), Mockito.eq(true)))\n                .thenReturn(expectedResponse);\n\n        String actualResponse = pay.transactions(parameters);\n        assertEquals(expectedResponse, actualResponse);\n    }\n}\n"}]