[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\nimport org.bouncycastle.crypto.util.PrivateKeyFactory;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.util.io.pem.PemObject;\nimport org.bouncycastle.util.io.pem.PemReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.Security;\nimport java.util.Base64;\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Ed25519SignatureGenerator_getSignatureTest {\n\n    private Ed25519SignatureGenerator generator;\n    private Ed25519PrivateKeyParameters mockPrivateKey;\n\n    @Before\n    public void setUp() throws IOException {\n        Security.addProvider(new BouncyCastleProvider());\n        mockPrivateKey = mock(Ed25519PrivateKeyParameters.class);\n        generator = spy(new Ed25519SignatureGenerator(\"path/to/privateKey\") {\n            @Override\n            protected Ed25519PrivateKeyParameters initializePrivateKey(String privateKeyPath) {\n                return mockPrivateKey;\n            }\n        });\n    }\n\n    @Test\n    public void testGetSignature() {\n        String data = \"testData\";\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n        Ed25519Signer mockSigner = mock(Ed25519Signer.class);\n        byte[] mockSignatureBytes = \"mockSignature\".getBytes(StandardCharsets.UTF_8);\n        String expectedSignature = Base64.getEncoder().encodeToString(mockSignatureBytes);\n\n        when(mockSigner.generateSignature()).thenReturn(mockSignatureBytes);\n\n        String actualSignature = generator.getSignature(data);\n\n        assertEquals(expectedSignature, actualSignature);\n        verify(mockSigner).init(true, mockPrivateKey);\n        verify(mockSigner).update(dataBytes, 0, dataBytes.length);\n    }\n}\n"}]