[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Margin_transferHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testTransferHistory() {\n        String path = \"/sapi/v1/margin/transfer?asset=BNB&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", 12345678);\n        parameters.put(\"endTime\", 12345679);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.transferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}\n"}]