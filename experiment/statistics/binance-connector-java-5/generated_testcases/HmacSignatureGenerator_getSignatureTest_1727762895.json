[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Hex;\n\npublic class HmacSignatureGenerator_getSignatureTest {\n\n    private HmacSignatureGenerator generator;\n    private String apiSecret;\n\n    @Before\n    public void setUp() {\n        apiSecret = \"testSecret\";\n        generator = new HmacSignatureGenerator(apiSecret);\n    }\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        String data = \"testData\";\n        byte[] expectedHmac = {0x01, 0x02, 0x03}; // Mocked HMAC result\n        String expectedHex = Hex.encodeHexString(expectedHmac);\n\n        Mac mockMac = mock(Mac.class);\n        when(mockMac.doFinal(data.getBytes())).thenReturn(expectedHmac);\n\n        SecretKeySpec mockSecretKeySpec = mock(SecretKeySpec.class);\n        whenNew(SecretKeySpec.class).withArguments(apiSecret.getBytes(), HmacSignatureGenerator.HMAC_SHA256).thenReturn(mockSecretKeySpec);\n\n        Mac mockMacInstance = mock(Mac.class);\n        when(mockMacInstance.getInstance(HmacSignatureGenerator.HMAC_SHA256)).thenReturn(mockMac);\n\n        String result = generator.getSignature(data);\n        assertEquals(expectedHex, result);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        String data = \"testData\";\n\n        Mac mockMac = mock(Mac.class);\n        when(mockMac.doFinal(data.getBytes())).thenThrow(new Exception(\"Mocked exception\"));\n\n        SecretKeySpec mockSecretKeySpec = mock(SecretKeySpec.class);\n        whenNew(SecretKeySpec.class).withArguments(apiSecret.getBytes(), HmacSignatureGenerator.HMAC_SHA256).thenReturn(mockSecretKeySpec);\n\n        Mac mockMacInstance = mock(Mac.class);\n        when(mockMacInstance.getInstance(HmacSignatureGenerator.HMAC_SHA256)).thenReturn(mockMac);\n\n        generator.getSignature(data);\n    }\n}\n"}]