[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport com.binance.connector.client.exceptions.BinanceClientException;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.exceptions.BinanceServerException;\nimport com.binance.connector.client.utils.httpclient.HttpClientSingleton;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.net.ConnectException;\nimport java.net.UnknownHostException;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.*;\n\npublic class ResponseHandler_handleResponseTest {\n\n    private ProxyAuth mockProxy;\n    private OkHttpClient mockClient;\n    private Response mockResponse;\n    private ResponseBody mockResponseBody;\n\n    @Before\n    public void setUp() {\n        mockProxy = new ProxyAuth(); // Create a real instance instead of mocking\n        mockClient = mock(OkHttpClient.class);\n        mockResponse = mock(Response.class);\n        mockResponseBody = mock(ResponseBody.class);\n\n        when(HttpClientSingleton.getHttpClient(any(ProxyAuth.class))).thenReturn(mockClient);\n    }\n\n    @Test\n    public void testHandleResponse_SuccessfulResponse_ShowLimitUsage() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(200);\n        when(mockResponseBody.string()).thenReturn(\"{}\");\n        when(mockResponse.header(\"X-SAPI-USED-IP-WEIGHT-1M\")).thenReturn(\"100\");\n        when(mockResponse.header(\"X-SAPI-USED-UID-WEIGHT-1M\")).thenReturn(\"200\");\n        when(mockResponse.header(\"x-mbx-used-weight\")).thenReturn(\"300\");\n        when(mockResponse.header(\"x-mbx-used-weight-1m\")).thenReturn(\"400\");\n\n        String result = ResponseHandler.handleResponse(mockRequest, true, mockProxy);\n\n        assertEquals(\"{\\\"x-sapi-used-ip-weight-1m\\\":\\\"100\\\",\\\"x-sapi-used-uid-weight-1m\\\":\\\"200\\\",\\\"x-mbx-used-weight\\\":\\\"300\\\",\\\"x-mbx-used-weight-1m\\\":\\\"400\\\",\\\"data\\\":\\\"{}\\\"}\", result);\n    }\n\n    @Test\n    public void testHandleResponse_SuccessfulResponse_NoShowLimitUsage() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(200);\n        when(mockResponseBody.string()).thenReturn(\"{}\");\n\n        String result = ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n\n        assertEquals(\"{}\", result);\n    }\n\n    @Test(expected = BinanceServerException.class)\n    public void testHandleResponse_NoResponseFromServer() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(null);\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n\n    @Test(expected = BinanceClientException.class)\n    public void testHandleResponse_ClientError() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(400);\n        when(mockResponseBody.string()).thenReturn(\"{\\\"code\\\":-1000,\\\"msg\\\":\\\"Invalid request\\\"}\");\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n\n    @Test(expected = BinanceServerException.class)\n    public void testHandleResponse_ServerError() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(500);\n        when(mockResponseBody.string()).thenReturn(\"Internal Server Error\");\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testHandleResponse_IOException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new IOException(\"Connection reset\"));\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testHandleResponse_ConnectException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new ConnectException(\"Connection refused\"));\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testHandleResponse_UnknownHostException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://example.com\").build();\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new UnknownHostException(\"Unknown host\"));\n\n        ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n    }\n}\n"}]