[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class PortfolioMargin_assetLeverageTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private PortfolioMargin portfolioMargin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.portfolioMargin = new PortfolioMargin(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testAssetLeverage() {\n        String path = \"/sapi/v1/portfolio/margin-asset-leverage\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = portfolioMargin.assetLeverage();\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}\n"}]