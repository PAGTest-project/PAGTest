[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.RequestHandler;\n\npublic class Trade_commissionTest {\n\n    private Trade trade;\n    private String baseUrl = \"https://api.binance.com\";\n    private String apiKey = \"testApiKey\";\n    private String secretKey = \"testSecretKey\";\n    private boolean showLimitUsage = false;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        trade = new Trade(baseUrl, apiKey, secretKey, showLimitUsage, null);\n        trade.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testCommission() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        String expectedResponse = \"{\\\"commissionRates\\\":{\\\"maker\\\":0.001,\\\"taker\\\":0.001}}\";\n        when(requestHandler.sendSignedRequest(baseUrl, \"/api/v3/account/commission\", parameters, HttpMethod.GET, showLimitUsage))\n            .thenReturn(expectedResponse);\n\n        String result = trade.commission(parameters);\n        assertEquals(expectedResponse, result);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testCommissionMissingSymbol() {\n        Map<String, Object> parameters = new HashMap<>();\n        trade.commission(parameters);\n    }\n}\n"}]