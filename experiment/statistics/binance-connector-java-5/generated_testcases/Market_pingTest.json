[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.SpotClient;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Market_pingTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testPing() {\n        String path = \"/api/v3/ping\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        Market market = new Market(baseUrl, \"apiKey\", true, null);\n        String result = market.ping();\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result.replace(\"\\\"data\\\":\", \"\").replaceAll(\"\\\\{|}\", \"\").trim());\n    }\n}\n"}]