[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.UrlBuilder;\nimport com.binance.connector.client.utils.RequestHandler;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class SubAccount_depositAddressTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testDepositAddress() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subAddress?email=%s&coin=BTC\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"coin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = subAccount.depositAddress(parameters);\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result);\n    }\n\n    @Test\n    public void testDepositAddressMissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.depositAddress(parameters));\n    }\n\n    @Test\n    public void testDepositAddressMissingCoin() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.depositAddress(parameters));\n    }\n}\n"}]