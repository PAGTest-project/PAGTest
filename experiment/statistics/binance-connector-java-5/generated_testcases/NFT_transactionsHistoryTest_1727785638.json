[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.RequestHandler;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class NFT_transactionsHistoryTest {\n\n    private NFT nft;\n    private String baseUrl = \"http://test.url\";\n    private boolean showLimitUsage = true;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    @Before\n    public void setUp() {\n        nft = new NFT(baseUrl, \"apiKey\", \"secretKey\", showLimitUsage, null);\n        nft.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testTransactionsHistorySuccess() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderType\", 0);\n\n        when(requestHandler.sendSignedRequest(baseUrl, \"/sapi/v1/nft/history/transactions\", parameters, HttpMethod.GET, showLimitUsage))\n            .thenReturn(\"success\");\n\n        String result = nft.transactionsHistory(parameters);\n        assertEquals(\"success\", result);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testTransactionsHistoryMissingOrderType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        nft.transactionsHistory(parameters);\n    }\n}\n"}]