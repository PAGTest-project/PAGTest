[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.RequestHandler;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class NFT_getAssetTest {\n\n    private NFT nft;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    private final String baseUrl = \"http://test.url\";\n    private final boolean showLimitUsage = true;\n\n    @Before\n    public void setUp() {\n        nft = new NFT(baseUrl, \"apiKey\", \"secretKey\", showLimitUsage, null);\n        nft.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testGetAsset() {\n        String expectedResponse = \"{\\\"status\\\":\\\"success\\\"}\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"limit\", 50);\n        parameters.put(\"page\", 1);\n\n        when(requestHandler.sendSignedRequest(baseUrl, NFT.GET_ASSET, parameters, HttpMethod.GET, showLimitUsage))\n            .thenReturn(expectedResponse);\n\n        String result = nft.getAsset(parameters);\n        assertEquals(expectedResponse, result);\n    }\n}\n"}]