[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\nimport java.security.Signature;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.util.Base64;\n\npublic class RsaSignatureGenerator_getSignatureTest {\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        // Given\n        String privateKeyPem = \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDZ\\n-----END PRIVATE KEY-----\";\n        String data = \"testData\";\n        RSAPrivateKey mockPrivateKey = mock(RSAPrivateKey.class);\n        Signature mockSignature = mock(Signature.class);\n        byte[] mockSignatureBytes = \"mockSignature\".getBytes();\n\n        RsaSignatureGenerator generator = spy(new RsaSignatureGenerator(privateKeyPem));\n        doReturn(mockPrivateKey).when(generator).parsePrivateKey(anyString(), anyString());\n        doReturn(mockSignature).when(mockSignature).getInstance(RsaSignatureGenerator.RSA_SHA256);\n        doNothing().when(mockSignature).initSign(mockPrivateKey);\n        doNothing().when(mockSignature).update(data.getBytes());\n        doReturn(mockSignatureBytes).when(mockSignature).sign();\n\n        // When\n        String result = generator.getSignature(data);\n\n        // Then\n        assertEquals(Base64.getEncoder().encodeToString(mockSignatureBytes), result);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        // Given\n        String privateKeyPem = \"invalidKey\";\n        String data = \"testData\";\n        RSAPrivateKey mockPrivateKey = mock(RSAPrivateKey.class);\n        Signature mockSignature = mock(Signature.class);\n\n        RsaSignatureGenerator generator = spy(new RsaSignatureGenerator(privateKeyPem));\n        doReturn(mockPrivateKey).when(generator).parsePrivateKey(anyString(), anyString());\n        doReturn(mockSignature).when(mockSignature).getInstance(RsaSignatureGenerator.RSA_SHA256);\n        doThrow(new Exception(\"Mock Exception\")).when(mockSignature).initSign(mockPrivateKey);\n\n        // When\n        generator.getSignature(data);\n\n        // Then\n        // Expecting RuntimeException\n    }\n}\n"}]