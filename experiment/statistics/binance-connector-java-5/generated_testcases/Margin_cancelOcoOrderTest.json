[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.MockWebServerDispatcher;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\n\npublic class Margin_cancelOcoOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(\"/\").toString();\n    }\n\n    @Test\n    public void testCancelOcoOrderSuccess() {\n        String path = \"/sapi/v1/margin/orderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(\"/\", path, \"{\\\"success\\\":true}\", HttpMethod.DELETE, 200);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Margin margin = new Margin(baseUrl, \"apiKey\", \"secretKey\", false, null);\n        String result = margin.cancelOcoOrder(parameters);\n        assertEquals(\"{\\\"success\\\":true}\", result);\n    }\n\n    @Test\n    public void testCancelOcoOrderMissingSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Margin margin = new Margin(baseUrl, \"apiKey\", \"secretKey\", false, null);\n        assertThrows(BinanceConnectorException.class, () -> margin.cancelOcoOrder(parameters));\n    }\n}\n"}]