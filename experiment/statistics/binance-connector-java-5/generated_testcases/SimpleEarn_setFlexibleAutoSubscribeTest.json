[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class SimpleEarn_setFlexibleAutoSubscribeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testSetFlexibleAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe?productId=BUSD001&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"BUSD001\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.setFlexibleAutoSubscribe(parameters);\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result);\n    }\n\n    @Test\n    public void testSetFlexibleAutoSubscribeMissingProductId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoSubscribe\", true);\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.setFlexibleAutoSubscribe(parameters));\n    }\n\n    @Test\n    public void testSetFlexibleAutoSubscribeMissingAutoSubscribe() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"BUSD001\");\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.setFlexibleAutoSubscribe(parameters));\n    }\n}\n"}]