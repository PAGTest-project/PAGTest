[
    {
        "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java",
        "testclass_name": "ParameterChecker_checkRequiredParameterTest",
        "dependencies": [
            "package com.binance.connector.client.utils;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.HashMap;",
            "import java.util.Map;",
            "import org.junit.Test;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;"
        ],
        "name": "ParameterChecker_checkRequiredParameterTest",
        "description": "Unit tests for the ParameterChecker.checkRequiredParameter method.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCheckRequiredParameter_ParameterPresent",
                "primary_tested": [
                    "ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker",
                        "HashMap",
                        "Map"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that the ParameterChecker.checkRequiredParameter method does not throw an exception when the required parameter is present."
            },
            {
                "name": "testCheckRequiredParameter_ParameterMissing",
                "primary_tested": [
                    "ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker",
                        "HashMap",
                        "Map",
                        "BinanceConnectorException"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that the ParameterChecker.checkRequiredParameter method throws a BinanceConnectorException when the required parameter is missing."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java",
        "testclass_name": "ParameterChecker_checkParameterTypeTest",
        "dependencies": [
            "package com.binance.connector.client.utils;",
            "import static org.junit.Assert.assertThrows;",
            "import org.junit.Test;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;"
        ],
        "name": "ParameterChecker_checkParameterTypeTest",
        "description": "Unit tests for the ParameterChecker.checkParameterType method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCheckParameterTypeValid",
                "primary_tested": [
                    "ParameterChecker.checkParameterType(String,Class,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker"
                    ]
                },
                "category": "unit",
                "description": "Tests the checkParameterType method with a valid string parameter."
            },
            {
                "name": "testCheckParameterTypeInvalidType",
                "primary_tested": [
                    "ParameterChecker.checkParameterType(Object,Class,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker",
                        "BinanceConnectorException"
                    ]
                },
                "category": "unit",
                "description": "Tests the checkParameterType method with an invalid type (int instead of String), expecting a BinanceConnectorException."
            },
            {
                "name": "testCheckParameterTypeEmptyString",
                "primary_tested": [
                    "ParameterChecker.checkParameterType(String,Class,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker",
                        "BinanceConnectorException"
                    ]
                },
                "category": "unit",
                "description": "Tests the checkParameterType method with an empty string, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java",
        "testclass_name": "ParameterChecker_processIdTest",
        "dependencies": [
            "package com.binance.connector.client.utils;",
            "import org.junit.Test;",
            "import static org.junit.Assert.*;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;"
        ],
        "name": "ParameterChecker_processIdTest",
        "description": "Unit tests for the ParameterChecker.processId method, covering various input scenarios.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testProcessId_ValidInteger",
                "primary_tested": [
                    "ParameterChecker.processId(int,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker"
                    ]
                },
                "category": "unit",
                "description": "Tests the processId method with a valid integer input."
            },
            {
                "name": "testProcessId_ValidString",
                "primary_tested": [
                    "ParameterChecker.processId(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker"
                    ]
                },
                "category": "unit",
                "description": "Tests the processId method with a valid string input."
            },
            {
                "name": "testProcessId_NullId",
                "primary_tested": [
                    "ParameterChecker.processId(null,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker"
                    ]
                },
                "category": "unit",
                "description": "Tests the processId method with a null input."
            },
            {
                "name": "testProcessId_EmptyString",
                "primary_tested": [
                    "ParameterChecker.processId(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker"
                    ]
                },
                "category": "unit",
                "description": "Tests the processId method with an empty string input."
            },
            {
                "name": "testProcessId_InvalidType",
                "primary_tested": [
                    "ParameterChecker.processId(Object,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ParameterChecker",
                        "BinanceConnectorException"
                    ]
                },
                "category": "unit",
                "description": "Tests the processId method with an invalid type input, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java",
        "testclass_name": "VIPLoans_borrowTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "VIPLoans_borrowTest",
        "description": "Unit tests for the VIPLoans borrow functionality.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "vipLoans",
                    "type": "VIPLoans"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testBorrowSuccess",
                "primary_tested": [
                    "VIPLoans.borrow(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "VIPLoans"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "vipLoans",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful borrowing functionality of the VIPLoans."
            },
            {
                "name": "testBorrowMissingRequiredParameter",
                "primary_tested": [
                    "VIPLoans.borrow(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "LinkedHashMap",
                        "VIPLoans",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "vipLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of missing required parameters in the VIPLoans borrow functionality."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java",
        "testclass_name": "UserData_closeIsolatedMarginListenKeyTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "UserData_closeIsolatedMarginListenKeyTest",
        "description": "Tests for closing isolated margin listen key functionality in the SpotClient.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testCloseIsolatedMarginListenKeyWithoutParameters",
                "primary_tested": [
                    "UserData.closeIsolatedMarginListenKey(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the exception thrown when closing isolated margin listen key without parameters."
            },
            {
                "name": "testCloseIsolatedMarginListenKey",
                "primary_tested": [
                    "UserData.closeIsolatedMarginListenKey(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "MockWebServer",
                        "Dispatcher",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful closing of isolated margin listen key with parameters."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java",
        "testclass_name": "ParameterChecker_checkOnlyOneOfParametersTest",
        "dependencies": [
            "package com.binance.connector.client.utils;",
            "import org.json.JSONObject;",
            "import org.junit.Test;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import static org.junit.Assert.*;"
        ],
        "name": "ParameterChecker_checkOnlyOneOfParametersTest",
        "description": "Unit tests for the ParameterChecker.checkOnlyOneOfParameters method.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCheckOnlyOneOfParameters_SingleParameterPresent",
                "primary_tested": [
                    "ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "ParameterChecker"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that no exception is thrown when only one parameter is present."
            },
            {
                "name": "testCheckOnlyOneOfParameters_MultipleParametersPresent",
                "primary_tested": [
                    "ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "ParameterChecker",
                        "BinanceConnectorException"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that an exception is thrown when multiple parameters are present."
            },
            {
                "name": "testCheckOnlyOneOfParameters_NoParametersPresent",
                "primary_tested": [
                    "ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "ParameterChecker"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that no exception is thrown when no parameters are present."
            },
            {
                "name": "testCheckOnlyOneOfParameters_NullParams",
                "primary_tested": [
                    "ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "ParameterChecker"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that no exception is thrown when the parameters object is null."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java",
        "testclass_name": "SimpleEarn_lockedSubscriptionPreviewTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SimpleEarn_lockedSubscriptionPreviewTest",
        "description": "Tests for the locked subscription preview functionality in the SimpleEarn class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "simpleEarn",
                    "type": "SimpleEarn"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testLockedSubscriptionPreview",
                "primary_tested": [
                    "SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "SimpleEarn"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the locked subscription preview functionality with required parameters."
            },
            {
                "name": "testLockedSubscriptionPreviewWithoutRequiredParameters",
                "primary_tested": [
                    "SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "SimpleEarn"
                    ],
                    "class_members": [
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the locked subscription preview functionality when required parameters are missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java",
        "testclass_name": "Trade_newOrderTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Trade_newOrderTest",
        "description": "Unit tests for the newOrder method in the Trade class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "trade",
                    "type": "Trade"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testNewOrderSuccess",
                "primary_tested": [
                    "Trade.newOrder(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "Trade"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful creation of a new order."
            },
            {
                "name": "testNewOrderMissingParameter",
                "primary_tested": [
                    "Trade.newOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Trade",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a missing parameter in the new order request, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java",
        "testclass_name": "Wallet_delegationHistoryTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.ParameterChecker;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Wallet_delegationHistoryTest",
        "description": "Tests for the delegation history functionality in the Wallet module of the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testDelegationHistory",
                "primary_tested": [
                    "Wallet.delegationHistory(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "Map",
                        "LinkedHashMap"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the delegation history functionality with all required parameters provided."
            },
            {
                "name": "testDelegationHistoryMissingParameter",
                "primary_tested": [
                    "Wallet.delegationHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "Map",
                        "LinkedHashMap"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the delegation history functionality when a required parameter (endTime) is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java",
        "testclass_name": "CryptoLoans_loanRepayTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "CryptoLoans_loanRepayTest",
        "description": "Unit tests for the loan repayment functionality in the CryptoLoans class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "cryptoLoans",
                    "type": "CryptoLoans"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testLoanRepayWithoutParameters",
                "primary_tested": [
                    "CryptoLoans.loanRepay(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the loan repayment functionality without providing necessary parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testLoanRepayWithValidParameters",
                "primary_tested": [
                    "CryptoLoans.loanRepay(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the loan repayment functionality with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java",
        "testclass_name": "ParameterChecker_checkOneOfParametersRequiredTest",
        "dependencies": [
            "package com.binance.connector.client.utils;",
            "import org.json.JSONObject;",
            "import org.junit.Test;",
            "import static org.junit.Assert.*;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import java.util.Arrays;"
        ],
        "name": "ParameterChecker_checkOneOfParametersRequiredTest",
        "description": "Unit tests for the ParameterChecker.checkOneOfParametersRequired method, which checks if at least one of the specified parameters is present in a JSONObject.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCheckOneOfParametersRequired_AllParametersMissing",
                "primary_tested": [
                    "ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "BinanceConnectorException",
                        "ParameterChecker",
                        "Arrays"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests that a BinanceConnectorException is thrown when none of the required parameters are present in the JSONObject."
            },
            {
                "name": "testCheckOneOfParametersRequired_OneParameterPresent",
                "primary_tested": [
                    "ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONObject",
                        "ParameterChecker"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests that no exception is thrown when at least one of the required parameters is present in the JSONObject."
            },
            {
                "name": "testCheckOneOfParametersRequired_NullParams",
                "primary_tested": [
                    "ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "ParameterChecker",
                        "Arrays"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests that a BinanceConnectorException is thrown when the provided JSONObject is null."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java",
        "testclass_name": "Mining_statsticsListTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ParameterChecker;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Mining_statsticsListTest",
        "description": "Tests for the Mining statistics list functionality.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testStatsticsListWithoutParameters",
                "primary_tested": [
                    "Mining.statsticsList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "BinanceConnectorException",
                        "Mining",
                        "Map",
                        "LinkedHashMap",
                        "Dispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the statsticsList method when called without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testStatsticsListWithValidParameters",
                "primary_tested": [
                    "Mining.statsticsList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Mining",
                        "Map",
                        "LinkedHashMap",
                        "Dispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the statsticsList method with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java",
        "testclass_name": "Futures_futuresOrderBookHistoryTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Futures_futuresOrderBookHistoryTest",
        "description": "Unit tests for the Futures class's futuresOrderBookHistory method.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "futures",
                    "type": "Futures"
                }
            ],
            "methods": []
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFuturesOrderBookHistory",
                "primary_tested": [
                    "Futures.futuresOrderBookHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "Futures",
                        "LinkedHashMap",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futuresOrderBookHistory method with all required parameters."
            },
            {
                "name": "testFuturesOrderBookHistoryMissingParameter",
                "primary_tested": [
                    "Futures.futuresOrderBookHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Futures",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futuresOrderBookHistory method when a required parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java",
        "testclass_name": "Trade_ocoOrderTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Trade_ocoOrderTest",
        "description": "Unit tests for the OCO order functionality in the Trade class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "trade",
                    "type": "Trade"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testOcoOrderSuccess",
                "primary_tested": [
                    "Trade.ocoOrder(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Trade",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful creation of an OCO order."
            },
            {
                "name": "testOcoOrderMissingRequiredParameter",
                "primary_tested": [
                    "Trade.ocoOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Trade",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a BinanceConnectorException when a required parameter is missing for an OCO order."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java",
        "testclass_name": "Trade_testNewOrderTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Trade_testNewOrderTest",
        "description": "Tests for the Trade class's new order functionality.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "trade",
                    "type": "Trade"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testTestNewOrderSuccess",
                "primary_tested": [
                    "Trade.testNewOrder(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Trade",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful creation of a new order with the Trade class."
            },
            {
                "name": "testTestNewOrderMissingParameters",
                "primary_tested": [
                    "Trade.testNewOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Trade",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "trade",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of missing parameters when creating a new order with the Trade class."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java",
        "testclass_name": "CryptoLoans_loanAdjustLTVTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "CryptoLoans_loanAdjustLTVTest",
        "description": "Unit tests for the loanAdjustLTV method in the CryptoLoans class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "cryptoLoans",
                    "type": "CryptoLoans"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testLoanAdjustLTVWithoutParameters",
                "primary_tested": [
                    "CryptoLoans.loanAdjustLTV(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the loanAdjustLTV method without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testLoanAdjustLTVWithValidParameters",
                "primary_tested": [
                    "CryptoLoans.loanAdjustLTV(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the loanAdjustLTV method with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java",
        "testclass_name": "Mining_earningListTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Mining_earningListTest",
        "description": "Tests for the earning list functionality in the Mining module of the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testEarningListWithoutParameters",
                "primary_tested": [
                    "Mining.earningList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the earning list functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testEarningListWithParameters",
                "primary_tested": [
                    "Mining.earningList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the earning list functionality with parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java",
        "testclass_name": "TestEd25519SignatureGenerator",
        "dependencies": [
            "package unit.signature;",
            "import static org.junit.Assert.assertEquals;",
            "import java.io.FileNotFoundException;",
            "import java.io.IOException;",
            "import org.junit.Test;",
            "import com.binance.connector.client.utils.signaturegenerator.Ed25519SignatureGenerator;"
        ],
        "name": "TestEd25519SignatureGenerator",
        "description": "Unit tests for the Ed25519SignatureGenerator class, specifically focusing on the unprotected signing functionality.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testUnprotectedSigning",
                "primary_tested": [
                    "Ed25519SignatureGenerator.getSignature(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Ed25519SignatureGenerator"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the unprotected signing functionality of the Ed25519SignatureGenerator by comparing the generated signature with an expected signature."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java",
        "testclass_name": "Mining_hashrateResaleRequestTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ParameterChecker;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Mining_hashrateResaleRequestTest",
        "description": "Unit tests for the hashrate resale request functionality in the Mining class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "mining",
                    "type": "Mining"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testHashrateResaleRequestSuccess",
                "primary_tested": [
                    "Mining.hashrateResaleRequest(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Mining",
                        "MockData",
                        "HttpMethod",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful execution of the hashrate resale request with all required parameters."
            },
            {
                "name": "testHashrateResaleRequestMissingParameter",
                "primary_tested": [
                    "Mining.hashrateResaleRequest(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Mining",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a missing required parameter in the hashrate resale request, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java",
        "testclass_name": "SubAccount_subAccountToSubAccountTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_subAccountToSubAccountTest",
        "description": "Tests for the subAccountToSubAccount method in the SubAccount class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "subAccount",
                    "type": "SubAccount"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSubAccountToSubAccountWithoutParameters",
                "primary_tested": [
                    "SubAccount.subAccountToSubAccount(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "SubAccount",
                        "LinkedHashMap",
                        "Map",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "subAccount",
                            "type": "variable"
                        },
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the subAccountToSubAccount method without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testSubAccountToSubAccountWithValidParameters",
                "primary_tested": [
                    "SubAccount.subAccountToSubAccount(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SubAccount",
                        "LinkedHashMap",
                        "Map",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "subAccount",
                            "type": "variable"
                        },
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the subAccountToSubAccount method with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java",
        "testclass_name": "SubAccount_getIpRestrictionTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_getIpRestrictionTest",
        "description": "Tests for the IP restriction functionality of the SubAccount API in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testGetIpRestriction",
                "primary_tested": [
                    "SubAccount.getIpRestriction(Map<String,Object>)"
                ],
                "associated_methods": [
                    "UrlBuilder.urlEncode(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "UrlBuilder",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the IP restriction retrieval functionality for a sub-account with valid parameters."
            },
            {
                "name": "testGetIpRestrictionWithoutParameters",
                "primary_tested": [
                    "SubAccount.getIpRestriction(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the IP restriction retrieval functionality when no parameters are provided, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/spot/subaccount/TestDepositHistory.java",
        "testclass_name": "TestDepositHistory",
        "dependencies": [
            "package unit.spot.subaccount;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "TestDepositHistory",
        "description": "Tests for the deposit history functionality of the SubAccount service in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testDepositHistWithoutParameters",
                "primary_tested": [
                    "SubAccount.depositHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the deposit history functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testDepositHist",
                "primary_tested": [
                    "SubAccount.depositHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "UrlBuilder",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the deposit history functionality with parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java",
        "testclass_name": "SubAccount_marginTransferTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_marginTransferTest",
        "description": "Unit tests for the margin transfer functionality of the SubAccount class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "subAccount",
                    "type": "SubAccount"
                }
            ],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testMarginTransferWithoutParameters",
                "primary_tested": [
                    "SubAccount.marginTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "subAccount",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the margin transfer functionality of the SubAccount class without providing any parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testMarginTransferWithValidParameters",
                "primary_tested": [
                    "SubAccount.marginTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "subAccount",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the margin transfer functionality of the SubAccount class with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java",
        "testclass_name": "Mining_bonusListTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Mining_bonusListTest",
        "description": "Tests for the bonus list functionality in the Mining module of the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testBonusListWithoutParameters",
                "primary_tested": [
                    "Mining.bonusList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the bonus list functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testBonusListWithParameters",
                "primary_tested": [
                    "Mining.bonusList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the bonus list functionality with parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/TestJSONParser.java",
        "testclass_name": "TestJSONParser",
        "dependencies": [
            "package unit;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import org.json.JSONException;",
            "import org.junit.Test;",
            "import com.binance.connector.client.utils.JSONParser;"
        ],
        "name": "TestJSONParser",
        "description": "Unit tests for JSONParser utility methods.",
        "class_members": {
            "variables": [
                {
                    "name": "mockJson",
                    "type": "final String"
                },
                {
                    "name": "value2",
                    "type": "final int"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testGetJSONStringValue",
                "primary_tested": [
                    "JSONParser.getJSONStringValue(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONParser"
                    ],
                    "class_members": [
                        {
                            "name": "mockJson",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the retrieval of a string value from a JSON string using JSONParser."
            },
            {
                "name": "testGetJSONIntValue",
                "primary_tested": [
                    "JSONParser.getJSONIntValue(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONParser"
                    ],
                    "class_members": [
                        {
                            "name": "mockJson",
                            "type": "variable"
                        },
                        {
                            "name": "value2",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the retrieval of an integer value from a JSON string using JSONParser."
            },
            {
                "name": "testGetJSONStringValueThrowException",
                "primary_tested": [
                    "JSONParser.getJSONStringValue(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONParser",
                        "JSONException"
                    ],
                    "class_members": [
                        {
                            "name": "mockJson",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests that JSONParser throws a JSONException when attempting to retrieve a string value using an invalid key."
            },
            {
                "name": "testGetJSONIntValueThrowException",
                "primary_tested": [
                    "JSONParser.getJSONIntValue(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "JSONParser",
                        "JSONException"
                    ],
                    "class_members": [
                        {
                            "name": "mockJson",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests that JSONParser throws a JSONException when attempting to retrieve an integer value using an invalid key."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java",
        "testclass_name": "Futures_futuresTransferTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Futures_futuresTransferTest",
        "description": "Unit tests for the futures transfer functionality in the Futures class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "futures",
                    "type": "Futures"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFuturesTransferSuccess",
                "primary_tested": [
                    "Futures.futuresTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "Futures",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful execution of the futures transfer functionality."
            },
            {
                "name": "testFuturesTransferMissingRequiredParameter",
                "primary_tested": [
                    "Futures.futuresTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Futures",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of missing required parameters in the futures transfer functionality."
            },
            {
                "name": "testFuturesTransferInvalidParameterType",
                "primary_tested": [
                    "Futures.futuresTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Futures",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of invalid parameter types in the futures transfer functionality."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java",
        "testclass_name": "SubAccount_managedSubWithdrawTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_managedSubWithdrawTest",
        "description": "Tests for the managed sub-account withdrawal functionality in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testManagedSubWithdrawWithoutParameters",
                "primary_tested": [
                    "SubAccount.managedSubWithdraw(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Map",
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the managed sub-account withdrawal functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testManagedSubWithdrawWithValidParameters",
                "primary_tested": [
                    "SubAccount.managedSubWithdraw(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Map",
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the managed sub-account withdrawal functionality with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java",
        "testclass_name": "CryptoLoans_flexibleLoanBorrowTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "CryptoLoans_flexibleLoanBorrowTest",
        "description": "Unit tests for the flexible loan borrow functionality in the CryptoLoans class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "cryptoLoans",
                    "type": "CryptoLoans"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFlexibleLoanBorrowWithoutParameters",
                "primary_tested": [
                    "CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible loan borrow functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testFlexibleLoanBorrowWithValidParameters",
                "primary_tested": [
                    "CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible loan borrow functionality with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java",
        "testclass_name": "Blvt_subscribeTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Blvt_subscribeTest",
        "description": "Unit tests for the Blvt subscribe functionality.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "blvt",
                    "type": "Blvt"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSubscribeSuccess",
                "primary_tested": [
                    "Blvt.subscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "Blvt",
                        "HmacSignatureGenerator",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "blvt",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful subscription to a BLVT with valid parameters."
            },
            {
                "name": "testSubscribeMissingTokenName",
                "primary_tested": [
                    "Blvt.subscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "LinkedHashMap",
                        "Blvt"
                    ],
                    "class_members": [
                        {
                            "name": "blvt",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the subscription to a BLVT with a missing tokenName parameter, expecting a BinanceConnectorException."
            },
            {
                "name": "testSubscribeMissingCost",
                "primary_tested": [
                    "Blvt.subscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "LinkedHashMap",
                        "Blvt"
                    ],
                    "class_members": [
                        {
                            "name": "blvt",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the subscription to a BLVT with a missing cost parameter, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java",
        "testclass_name": "AutoInvest_targetAssetRoiListTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "AutoInvest_targetAssetRoiListTest",
        "description": "Tests for the target asset ROI list functionality in the AutoInvest module of the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testTargetAssetRoiList",
                "primary_tested": [
                    "AutoInvest.targetAssetRoiList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the target asset ROI list functionality with valid parameters."
            },
            {
                "name": "testTargetAssetRoiListMissingParameters",
                "primary_tested": [
                    "AutoInvest.targetAssetRoiList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the target asset ROI list functionality when required parameters are missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java",
        "testclass_name": "SubAccount_universalTransferTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_universalTransferTest",
        "description": "Unit tests for the universal transfer functionality of the SubAccount class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "subAccount",
                    "type": "SubAccount"
                },
                {
                    "name": "requestHandler",
                    "type": "RequestHandler"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testUniversalTransferSuccess",
                "primary_tested": [
                    "SubAccount.universalTransfer(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "SubAccount",
                        "RequestHandler",
                        "HmacSignatureGenerator",
                        "Dispatcher",
                        "LinkedHashMap",
                        "Map",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "subAccount",
                            "type": "variable"
                        },
                        {
                            "name": "requestHandler",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful universal transfer functionality of the SubAccount class."
            },
            {
                "name": "testUniversalTransferMissingRequiredParameter",
                "primary_tested": [
                    "SubAccount.universalTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SubAccount",
                        "LinkedHashMap",
                        "Map",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "subAccount",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of missing required parameters in the universal transfer functionality of the SubAccount class."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java",
        "testclass_name": "SimpleEarn_subscribeLockedProductTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SimpleEarn_subscribeLockedProductTest",
        "description": "Unit tests for subscribing to locked products in SimpleEarn.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "simpleEarn",
                    "type": "SimpleEarn"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSubscribeLockedProductSuccess",
                "primary_tested": [
                    "SimpleEarn.subscribeLockedProduct(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "SimpleEarn",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockData",
                        "MockWebServerDispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful subscription to a locked product in SimpleEarn."
            },
            {
                "name": "testSubscribeLockedProductMissingProjectId",
                "primary_tested": [
                    "SimpleEarn.subscribeLockedProduct(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SimpleEarn",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the exception thrown when subscribing to a locked product in SimpleEarn with a missing projectId."
            },
            {
                "name": "testSubscribeLockedProductMissingAmount",
                "primary_tested": [
                    "SimpleEarn.subscribeLockedProduct(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SimpleEarn",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the exception thrown when subscribing to a locked product in SimpleEarn with a missing amount."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java",
        "testclass_name": "CryptoLoans_flexibleLoanRepayTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "CryptoLoans_flexibleLoanRepayTest",
        "description": "Unit tests for the flexible loan repay functionality in the CryptoLoans class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "cryptoLoans",
                    "type": "CryptoLoans"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFlexibleLoanRepayWithoutParameters",
                "primary_tested": [
                    "CryptoLoans.flexibleLoanRepay(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible loan repay functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testFlexibleLoanRepayWithValidParameters",
                "primary_tested": [
                    "CryptoLoans.flexibleLoanRepay(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "cryptoLoans",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible loan repay functionality with valid parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendIsolatedMarginListenKeyTest.java",
        "testclass_name": "UserData_extendIsolatedMarginListenKeyTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "UserData_extendIsolatedMarginListenKeyTest",
        "description": "Unit tests for extending isolated margin listen key functionality in UserData class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "userData",
                    "type": "UserData"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testExtendIsolatedMarginListenKey",
                "primary_tested": [
                    "UserData.extendIsolatedMarginListenKey(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "UserData",
                        "LinkedHashMap",
                        "Dispatcher",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "userData",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the functionality of extending isolated margin listen key with valid parameters."
            },
            {
                "name": "testExtendIsolatedMarginListenKeyWithoutParameters",
                "primary_tested": [
                    "UserData.extendIsolatedMarginListenKey(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UserData",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "userData",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of extending isolated margin listen key without providing necessary parameters, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java",
        "testclass_name": "SimpleEarn_flexibleSubscriptionPreviewTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SimpleEarn_flexibleSubscriptionPreviewTest",
        "description": "Unit tests for the flexible subscription preview functionality in the SimpleEarn class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "simpleEarn",
                    "type": "SimpleEarn"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFlexibleSubscriptionPreview",
                "primary_tested": [
                    "SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "SimpleEarn"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible subscription preview functionality with valid parameters."
            },
            {
                "name": "testFlexibleSubscriptionPreviewMissingProductId",
                "primary_tested": [
                    "SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SimpleEarn",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible subscription preview functionality when the productId parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testFlexibleSubscriptionPreviewMissingAmount",
                "primary_tested": [
                    "SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SimpleEarn",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "simpleEarn",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the flexible subscription preview functionality when the amount parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java",
        "testclass_name": "SimpleEarn_setLockedAutoSubscribeTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SimpleEarn_setLockedAutoSubscribeTest",
        "description": "Test suite for the setLockedAutoSubscribe method in the SimpleEarn module of the Binance Connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSetLockedAutoSubscribe",
                "primary_tested": [
                    "SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the setLockedAutoSubscribe method with valid parameters."
            },
            {
                "name": "testSetLockedAutoSubscribeMissingPositionId",
                "primary_tested": [
                    "SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the setLockedAutoSubscribe method when the positionId parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testSetLockedAutoSubscribeMissingAutoSubscribe",
                "primary_tested": [
                    "SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the setLockedAutoSubscribe method when the autoSubscribe parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java",
        "testclass_name": "SubAccount_enableLeverageTokenTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_enableLeverageTokenTest",
        "description": "Tests for enabling leverage token for sub-accounts in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testEnableLeverageToken",
                "primary_tested": [
                    "SubAccount.enableLeverageToken(Map<String,Object>)"
                ],
                "associated_methods": [
                    "UrlBuilder.urlEncode(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "UrlBuilder",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the functionality of enabling leverage token for a sub-account with valid parameters."
            },
            {
                "name": "testEnableLeverageTokenMissingEmail",
                "primary_tested": [
                    "SubAccount.enableLeverageToken(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior when the 'email' parameter is missing while enabling leverage token for a sub-account."
            },
            {
                "name": "testEnableLeverageTokenMissingEnableBlvt",
                "primary_tested": [
                    "SubAccount.enableLeverageToken(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior when the 'enableBlvt' parameter is missing while enabling leverage token for a sub-account."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java",
        "testclass_name": "Wallet_cloudMiningHistoryTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.ParameterChecker;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Wallet_cloudMiningHistoryTest",
        "description": "Tests for the cloud mining history functionality in the Binance Spot Client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testCloudMiningHistory",
                "primary_tested": [
                    "Wallet.cloudMiningHistory(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "Map",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the cloud mining history functionality with valid parameters."
            },
            {
                "name": "testCloudMiningHistoryMissingStartTime",
                "primary_tested": [
                    "Wallet.cloudMiningHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "Map",
                        "LinkedHashMap"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the cloud mining history functionality when the startTime parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testCloudMiningHistoryMissingEndTime",
                "primary_tested": [
                    "Wallet.cloudMiningHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "Map",
                        "LinkedHashMap"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the cloud mining history functionality when the endTime parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferHistoryTest.java",
        "testclass_name": "Futures_futuresTransferHistoryTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Futures_futuresTransferHistoryTest",
        "description": "Unit tests for the futures transfer history functionality in the Futures class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "futures",
                    "type": "Futures"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFuturesTransferHistory",
                "primary_tested": [
                    "Futures.futuresTransferHistory(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Futures",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures transfer history functionality with valid parameters."
            },
            {
                "name": "testFuturesTransferHistoryMissingAsset",
                "primary_tested": [
                    "Futures.futuresTransferHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Futures",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures transfer history functionality when the 'asset' parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testFuturesTransferHistoryMissingStartTime",
                "primary_tested": [
                    "Futures.futuresTransferHistory(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Futures",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "futures",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures transfer history functionality when the 'startTime' parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java",
        "testclass_name": "Market_ticker24HTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.ArrayList;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Market_ticker24HTest",
        "description": "Tests for the 24-hour ticker functionality in the Binance Spot Client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testTicker24HWithSymbol",
                "primary_tested": [
                    "Market.ticker24H(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the 24-hour ticker functionality with a single symbol."
            },
            {
                "name": "testTicker24HWithSymbols",
                "primary_tested": [
                    "Market.ticker24H(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the 24-hour ticker functionality with multiple symbols."
            },
            {
                "name": "testTicker24HWithDoubleParameter",
                "primary_tested": [
                    "Market.ticker24H(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the exception handling when both 'symbol' and 'symbols' parameters are provided."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java",
        "testclass_name": "Wallet_universalTransferTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Wallet_universalTransferTest",
        "description": "Tests for the universal transfer functionality in the Wallet class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "wallet",
                    "type": "Wallet"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testUniversalTransferSuccess",
                "primary_tested": [
                    "Wallet.universalTransfer(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Wallet",
                        "LinkedHashMap",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "wallet",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful universal transfer functionality in the Wallet class."
            },
            {
                "name": "testUniversalTransferMissingRequiredParameter",
                "primary_tested": [
                    "Wallet.universalTransfer(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Wallet",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "wallet",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of missing required parameters in the universal transfer functionality in the Wallet class."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java",
        "testclass_name": "TestFuturesAccountV2",
        "dependencies": [
            "package unit.spot.subaccount;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "TestFuturesAccountV2",
        "description": "Unit tests for the futures account functionality of the SubAccount service in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "futuresType",
                    "type": "final int"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFuturesAccountWithoutParameters",
                "primary_tested": [
                    "SubAccount.futuresAccountV2(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures account functionality without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testFuturesAccount",
                "primary_tested": [
                    "SubAccount.futuresAccountV2(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher",
                        "LinkedHashMap",
                        "Map"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "futuresType",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)",
                        "UrlBuilder.urlEncode(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures account functionality with parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/signature/TestRsaSignatureGenerator.java",
        "testclass_name": "TestRsaSignatureGenerator",
        "dependencies": [
            "package unit.signature;",
            "import static org.junit.Assert.assertEquals;",
            "import org.junit.Test;",
            "import com.binance.connector.client.utils.signaturegenerator.RsaSignatureGenerator;"
        ],
        "name": "TestRsaSignatureGenerator",
        "description": "Unit tests for the RsaSignatureGenerator class, focusing on signature generation with both unprotected and protected private keys.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testUnprotectedSigning",
                "primary_tested": [
                    "RsaSignatureGenerator.getSignature(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RsaSignatureGenerator"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the generation of a signature using an unprotected private key."
            },
            {
                "name": "testProtectedSigning",
                "primary_tested": [
                    "RsaSignatureGenerator.getSignature(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RsaSignatureGenerator"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the generation of a signature using a protected private key with a password."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_detailMinerListTest.java",
        "testclass_name": "Mining_detailMinerListTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestHandler;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Mining_detailMinerListTest",
        "description": "Unit tests for the detailMinerList method in the Mining class, focusing on various scenarios including successful execution and missing required parameters.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "mining",
                    "type": "Mining"
                }
            ],
            "methods": []
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testDetailMinerListSuccess",
                "primary_tested": [
                    "Mining.detailMinerList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "HttpMethod",
                        "Mining"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful execution of the detailMinerList method with all required parameters provided."
            },
            {
                "name": "testDetailMinerListMissingAlgo",
                "primary_tested": [
                    "Mining.detailMinerList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "Mining"
                    ],
                    "class_members": [
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the detailMinerList method when the 'algo' parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testDetailMinerListMissingUserName",
                "primary_tested": [
                    "Mining.detailMinerList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "Mining"
                    ],
                    "class_members": [
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the detailMinerList method when the 'userName' parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testDetailMinerListMissingWorkerName",
                "primary_tested": [
                    "Mining.detailMinerList(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "Mining"
                    ],
                    "class_members": [
                        {
                            "name": "mining",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the behavior of the detailMinerList method when the 'workerName' parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/TestResponseHandler.java",
        "testclass_name": "TestResponseHandler",
        "dependencies": [
            "package unit;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import static org.junit.Assert.assertTrue;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.exceptions.BinanceClientException;",
            "import com.binance.connector.client.exceptions.BinanceServerException;",
            "import com.binance.connector.client.utils.ResponseHandler;",
            "import okhttp3.Request;",
            "import okhttp3.mockwebserver.MockResponse;",
            "import okhttp3.mockwebserver.MockWebServer;"
        ],
        "name": "TestResponseHandler",
        "description": "Unit tests for the ResponseHandler class, focusing on handling different HTTP responses and error scenarios.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "request",
                    "type": "Request"
                },
                {
                    "name": "VALID_RESPONSE",
                    "type": "static final String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testHandleResponse",
                "primary_tested": [
                    "ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Request",
                        "ResponseHandler"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "request",
                            "type": "variable"
                        },
                        {
                            "name": "VALID_RESPONSE",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a valid HTTP response by the ResponseHandler."
            },
            {
                "name": "testWith400JSONErrorMsg",
                "primary_tested": [
                    "ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Request",
                        "ResponseHandler",
                        "BinanceClientException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "request",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a 400 HTTP error response with a JSON error message by the ResponseHandler."
            },
            {
                "name": "testWith400ErrorMsg",
                "primary_tested": [
                    "ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Request",
                        "ResponseHandler",
                        "BinanceClientException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "request",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a 400 HTTP error response with a plain text error message by the ResponseHandler."
            },
            {
                "name": "testWith500ErrorMsg",
                "primary_tested": [
                    "ResponseHandler.handleResponse(Request,boolean,ProxyAuth)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "Request",
                        "ResponseHandler",
                        "BinanceServerException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "request",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the handling of a 500 HTTP error response by the ResponseHandler."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java",
        "testclass_name": "GiftCard_createDualTokensCodeTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.ProxyAuth;",
            "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "GiftCard_createDualTokensCodeTest",
        "description": "Unit tests for the GiftCard createDualTokensCode method, focusing on various scenarios including success and missing parameters.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                },
                {
                    "name": "giftCard",
                    "type": "GiftCard"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testCreateDualTokensCodeSuccess",
                "primary_tested": [
                    "GiftCard.createDualTokensCode(Map<String,Object>)"
                ],
                "associated_methods": [
                    "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MockWebServer",
                        "MockData",
                        "HttpMethod",
                        "GiftCard",
                        "LinkedHashMap",
                        "Dispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "giftCard",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the successful creation of dual tokens code with all required parameters provided."
            },
            {
                "name": "testCreateDualTokensCodeMissingBaseToken",
                "primary_tested": [
                    "GiftCard.createDualTokensCode(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "GiftCard",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "giftCard",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the scenario where the baseToken parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testCreateDualTokensCodeMissingFaceToken",
                "primary_tested": [
                    "GiftCard.createDualTokensCode(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "GiftCard",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "giftCard",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the scenario where the faceToken parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testCreateDualTokensCodeMissingBaseTokenAmount",
                "primary_tested": [
                    "GiftCard.createDualTokensCode(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "GiftCard",
                        "LinkedHashMap",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "giftCard",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the scenario where the baseTokenAmount parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java",
        "testclass_name": "TestSwitchBusdAutoConversion",
        "dependencies": [
            "package unit.spot.wallet;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "TestSwitchBusdAutoConversion",
        "description": "Unit tests for the switchBusdAutoConversion functionality in the SpotClient.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSwitchBusdAutoConversionWithoutParameters",
                "primary_tested": [
                    "Wallet.switchBusdAutoConversion(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the switchBusdAutoConversion method without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testSwitchBusdAutoConversion",
                "primary_tested": [
                    "Wallet.switchBusdAutoConversion(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "MockWebServer",
                        "Dispatcher",
                        "HttpMethod",
                        "MockData",
                        "MockWebServerDispatcher"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK",
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the switchBusdAutoConversion method with parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java",
        "testclass_name": "Market_klinesTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Market_klinesTest",
        "description": "Unit tests for the klines functionality of the SpotClientImpl class.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testKlinesWithoutSymbol",
                "primary_tested": [
                    "Market.klines(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the klines functionality without a symbol parameter, expecting a BinanceConnectorException."
            },
            {
                "name": "testKlinesWithoutInterval",
                "primary_tested": [
                    "Market.klines(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the klines functionality without an interval parameter, expecting a BinanceConnectorException."
            },
            {
                "name": "testKlines",
                "primary_tested": [
                    "Market.klines(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "Dispatcher",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the klines functionality with both symbol and interval parameters, expecting a successful response."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java",
        "testclass_name": "SubAccount_futuresAccountV2Test",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import com.binance.connector.client.utils.UrlBuilder;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "SubAccount_futuresAccountV2Test",
        "description": "Tests for the futures account V2 functionality of the SubAccount service in the Binance connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ],
            "methods": []
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testFuturesAccountV2",
                "primary_tested": [
                    "SubAccount.futuresAccountV2(Map<String,Object>)"
                ],
                "associated_methods": [
                    "UrlBuilder.urlEncode(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "UrlBuilder",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures account V2 functionality with valid parameters."
            },
            {
                "name": "testFuturesAccountV2MissingEmail",
                "primary_tested": [
                    "SubAccount.futuresAccountV2(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures account V2 functionality when the email parameter is missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testFuturesAccountV2MissingFuturesType",
                "primary_tested": [
                    "SubAccount.futuresAccountV2(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "BinanceConnectorException",
                        "MockWebServer",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.API_KEY",
                        "MockData.SECRET_KEY"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the futures account V2 functionality when the futuresType parameter is missing, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java",
        "testclass_name": "TestWebSocketApiRequestHandler",
        "dependencies": [
            "package unit.websocketapi;",
            "import static org.junit.Assert.assertThrows;",
            "import org.json.JSONObject;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.websocketapi.WebSocketApiRequestHandler;",
            "import unit.MockData;"
        ],
        "name": "TestWebSocketApiRequestHandler",
        "description": "Unit tests for the WebSocketApiRequestHandler class, focusing on exception handling and mandatory parameter checks.",
        "class_members": {
            "variables": [
                {
                    "name": "params",
                    "type": "JSONObject"
                },
                {
                    "name": "invalidReqId",
                    "type": "static final double"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testRequestWithoutWebSocketConnection",
                "primary_tested": [
                    "WebSocketApiRequestHandler.WebSocketApiRequestHandler(WebSocketConnection,String,SignatureGenerator)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "WebSocketApiRequestHandler",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "params",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.API_KEY",
                        "MockData.HMAC_SIGNATURE_GENERATOR"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the constructor of WebSocketApiRequestHandler when no WebSocket connection is provided, expecting a BinanceConnectorException."
            },
            {
                "name": "testPublicRequestWithoutMandatoryParams",
                "primary_tested": [
                    "WebSocketApiRequestHandler.publicRequest(String,JSONObject)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "WebSocketApiRequestHandler",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "params",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.WS_CONNECTION",
                        "MockData.API_KEY",
                        "MockData.HMAC_SIGNATURE_GENERATOR"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the publicRequest method of WebSocketApiRequestHandler when mandatory parameters are missing, expecting a BinanceConnectorException."
            },
            {
                "name": "testApiRequestWithoutMandatoryParams",
                "primary_tested": [
                    "WebSocketApiRequestHandler.apiRequest(String,JSONObject)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "WebSocketApiRequestHandler",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "params",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.WS_CONNECTION",
                        "MockData.API_KEY",
                        "MockData.HMAC_SIGNATURE_GENERATOR"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the apiRequest method of WebSocketApiRequestHandler when mandatory parameters are missing or when the API key is null, expecting a BinanceConnectorException."
            },
            {
                "name": "testSignedRequestWithoutMandatoryParams",
                "primary_tested": [
                    "WebSocketApiRequestHandler.signedRequest(String,JSONObject)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "WebSocketApiRequestHandler",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "params",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.WS_CONNECTION",
                        "MockData.API_KEY",
                        "MockData.HMAC_SIGNATURE_GENERATOR"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the signedRequest method of WebSocketApiRequestHandler when mandatory parameters are missing or when the API key or signature generator is null, expecting a BinanceConnectorException."
            },
            {
                "name": "testRequestWithInvalidRequestId",
                "primary_tested": [
                    "WebSocketApiRequestHandler.publicRequest(String,JSONObject)"
                ],
                "external_dependencies": {
                    "modules": [
                        "BinanceConnectorException",
                        "WebSocketApiRequestHandler",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "params",
                            "type": "variable"
                        },
                        {
                            "name": "invalidReqId",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.WS_CONNECTION",
                        "MockData.API_KEY",
                        "MockData.HMAC_SIGNATURE_GENERATOR"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the publicRequest method of WebSocketApiRequestHandler when an invalid requestId is provided, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java",
        "testclass_name": "Trade_testSorOrderTest",
        "dependencies": [
            "package com.binance.connector.client.impl.spot;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import java.util.LinkedHashMap;",
            "import java.util.Map;",
            "import org.junit.Before;",
            "import org.junit.Test;",
            "import com.binance.connector.client.SpotClient;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.impl.SpotClientImpl;",
            "import okhttp3.mockwebserver.Dispatcher;",
            "import okhttp3.mockwebserver.MockWebServer;",
            "import unit.MockData;",
            "import unit.MockWebServerDispatcher;"
        ],
        "name": "Trade_testSorOrderTest",
        "description": "Unit tests for the sorOrder and testSorOrder methods of the Trade class in the Binance Connector client.",
        "class_members": {
            "variables": [
                {
                    "name": "mockWebServer",
                    "type": "MockWebServer"
                },
                {
                    "name": "baseUrl",
                    "type": "String"
                }
            ]
        },
        "fixtures": [
            "init"
        ],
        "test_cases": [
            {
                "name": "testSorOrder",
                "primary_tested": [
                    "Trade.sorOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the sorOrder method with valid parameters."
            },
            {
                "name": "testSorOrderWithoutParameters",
                "primary_tested": [
                    "Trade.sorOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the sorOrder method without parameters, expecting a BinanceConnectorException."
            },
            {
                "name": "testTestSorOrder",
                "primary_tested": [
                    "Trade.testSorOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the testSorOrder method with valid parameters."
            },
            {
                "name": "testTestSorOrderWithoutParameters",
                "primary_tested": [
                    "Trade.testSorOrder(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "SpotClient",
                        "SpotClientImpl",
                        "MockWebServer",
                        "MockWebServerDispatcher",
                        "MockData",
                        "HttpMethod",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "mockWebServer",
                            "type": "variable"
                        },
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "MockData.PREFIX",
                        "MockData.MOCK_RESPONSE",
                        "MockData.HTTP_STATUS_OK"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "init"
                ],
                "description": "Tests the testSorOrder method without parameters, expecting a BinanceConnectorException."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/TestUrlBuilder.java",
        "testclass_name": "TestUrlBuilder",
        "dependencies": [
            "package unit;",
            "import static org.junit.Assert.assertEquals;",
            "import java.util.ArrayList;",
            "import java.util.LinkedHashMap;",
            "import java.util.Locale;",
            "import java.util.Map;",
            "import org.junit.Test;",
            "import com.binance.connector.client.utils.UrlBuilder;"
        ],
        "name": "TestUrlBuilder",
        "description": "Unit tests for the UrlBuilder utility class, focusing on URL construction and query parameter joining.",
        "class_members": {
            "variables": [
                {
                    "name": "baseUrl",
                    "type": "final String"
                },
                {
                    "name": "urlPath",
                    "type": "final String"
                },
                {
                    "name": "doubleValue",
                    "type": "final double"
                },
                {
                    "name": "extensiveDecimalsDouble",
                    "type": "final double"
                },
                {
                    "name": "highDouble",
                    "type": "final double"
                },
                {
                    "name": "intValue",
                    "type": "final int"
                },
                {
                    "name": "mockParameters",
                    "type": "final Map<String, Object>"
                },
                {
                    "name": "mockDoubleParameters",
                    "type": "final Map<String, Object>"
                },
                {
                    "name": "mockStreams",
                    "type": "final ArrayList<String>"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testBuildFullUrl",
                "primary_tested": [
                    "UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "urlPath",
                            "type": "variable"
                        },
                        {
                            "name": "mockParameters",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the construction of a full URL with parameters."
            },
            {
                "name": "testBuildFullUrlWithoutParams",
                "primary_tested": [
                    "UrlBuilder.buildFullUrl(String,String,Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "urlPath",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the construction of a full URL without parameters."
            },
            {
                "name": "testJoinQueryParameters",
                "primary_tested": [
                    "UrlBuilder.joinQueryParameters(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockParameters",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the joining of query parameters into a single string."
            },
            {
                "name": "testJoinLargeQueryParameters",
                "primary_tested": [
                    "UrlBuilder.joinQueryParameters(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "mockParameters",
                            "type": "variable"
                        },
                        {
                            "name": "extensiveDecimalsDouble",
                            "type": "variable"
                        },
                        {
                            "name": "highDouble",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the joining of a large set of query parameters into a single string."
            },
            {
                "name": "testJoinQueryParametersWithoutParams",
                "primary_tested": [
                    "UrlBuilder.joinQueryParameters(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ]
                },
                "category": "unit",
                "description": "Tests the joining of query parameters when no parameters are provided."
            },
            {
                "name": "testJoinQueryParametersWithEmptyParams",
                "primary_tested": [
                    "UrlBuilder.joinQueryParameters(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ]
                },
                "category": "unit",
                "description": "Tests the joining of query parameters when empty parameters are provided."
            },
            {
                "name": "testJoinQueryParametersWithLocaleIT",
                "primary_tested": [
                    "UrlBuilder.joinQueryParameters(Map<String,Object>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder",
                        "Locale"
                    ],
                    "class_members": [
                        {
                            "name": "mockDoubleParameters",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the joining of query parameters with a specific Locale (IT) to ensure double values are formatted correctly."
            },
            {
                "name": "testBuildStreamUrl",
                "primary_tested": [
                    "UrlBuilder.buildStreamUrl(String,ArrayList<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        },
                        {
                            "name": "mockStreams",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the construction of a stream URL with parameters."
            },
            {
                "name": "testBuildStreamUrlWitoutParams",
                "primary_tested": [
                    "UrlBuilder.buildStreamUrl(String,ArrayList<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the construction of a stream URL without parameters."
            },
            {
                "name": "testBuildStreamUrlWithEmptyParams",
                "primary_tested": [
                    "UrlBuilder.buildStreamUrl(String,ArrayList<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "UrlBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "baseUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the construction of a stream URL with empty parameters."
            }
        ]
    },
    {
        "file_path": "src/test/java/unit/TestRequestBuilder.java",
        "testclass_name": "TestRequestBuilder",
        "dependencies": [
            "package unit;",
            "import static org.junit.Assert.assertEquals;",
            "import static org.junit.Assert.assertThrows;",
            "import static org.junit.Assert.assertTrue;",
            "import org.junit.Test;",
            "import com.binance.connector.client.enums.HttpMethod;",
            "import com.binance.connector.client.exceptions.BinanceConnectorException;",
            "import com.binance.connector.client.utils.RequestBuilder;",
            "import okhttp3.Request;"
        ],
        "name": "TestRequestBuilder",
        "description": "Unit tests for the RequestBuilder class, focusing on various HTTP methods and WebSocket requests.",
        "class_members": {
            "variables": [
                {
                    "name": "fullUrl",
                    "type": "final String"
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testPublicPostMethod",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the public POST method request building functionality."
            },
            {
                "name": "testPublicGetMethod",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the public GET method request building functionality."
            },
            {
                "name": "testPublicPutMethod",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the public PUT method request building functionality."
            },
            {
                "name": "testPublicDeleteMethod",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the public DELETE method request building functionality."
            },
            {
                "name": "testPublicInvalidMethod",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the handling of an invalid HTTP method in the public request building functionality."
            },
            {
                "name": "testPublicInvalidUrl",
                "primary_tested": [
                    "RequestBuilder.buildPublicRequest(String,HttpMethod)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "BinanceConnectorException"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the handling of an invalid URL in the public request building functionality."
            },
            {
                "name": "testApiKeyPostMethod",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the API key POST method request building functionality."
            },
            {
                "name": "testApiKeyGetMethod",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the API key GET method request building functionality."
            },
            {
                "name": "testApiKeyPutMethod",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the API key PUT method request building functionality."
            },
            {
                "name": "testApiKeyDeleteMethod",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "Request",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the API key DELETE method request building functionality."
            },
            {
                "name": "testApiKeyInvalidMethod",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "BinanceConnectorException",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the handling of an invalid HTTP method in the API key request building functionality."
            },
            {
                "name": "testApiKeyInvalidUrl",
                "primary_tested": [
                    "RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "HttpMethod",
                        "BinanceConnectorException",
                        "MockData"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the handling of an invalid URL in the API key request building functionality."
            },
            {
                "name": "testWebSocketUrl",
                "primary_tested": [
                    "RequestBuilder.buildWebSocketRequest(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "RequestBuilder",
                        "Request"
                    ],
                    "class_members": [
                        {
                            "name": "fullUrl",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the WebSocket request building functionality."
            }
        ]
    }
]